{
    "custom_item_1": {
        "description": "Check for MongoDB 5",
        "cmd": "mongo --version",
        "expect": "MongoDB shell version v@MONGODB_VERSION@"
    },
    "custom_item_2": {
        "description": "Check for isdbgrid / sharding",
        "cmd": "@MONGO_BINARY_FULL_PATH@ --eval \"db.hello()\"",
        "expect": "\"msg\"[\\\\s]*:[\\\\s]*\"isdbgrid\""
    },
    "custom_item_3": {
        "description": "2.3 Ensure authentication is enabled in the sharded cluster - PEMKeyFile",
        "info": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.\n\nWith keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.\n\nFor Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.\n\nFor Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.\n\nRationale:\n\nEnforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
        "solution": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.\nMongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.\nChange the configuration file /etc/mongod.conf on each host, adding the following rows:\n\nnet:\n   port: 27017\n   tls:\n      mode: requireSSL\n      PEMKeyFile: /etc/mongodb/ssl/server1.pem\n      CAFile: /etc/mongodb/ssl/mongoCA.crt\n      clusterFile: /etc/mongodb/ssl/server1.pem\n   security:\n      authorization: enabled\n      clusterAuthMode: x509\n\nRestart the daemon\n\nsudo service mongodb restart\n\n\n\n\nTo enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)\n\n\nGenerate A Key File\n\nOn each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:\n\nkeyFile = /srv/mongodb/keyfile\n\nWhen starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2A,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*PEMKeyFile[\\\\s]*:",
        "expect": "^[\\\\s]*PEMKeyFile[\\\\s]*:[\\\\s]*.+$"
    },
    "custom_item_4": {
        "description": "2.3 Ensure authentication is enabled in the sharded cluster - clusterFile",
        "info": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.\n\nWith keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.\n\nFor Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.\n\nFor Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.\n\nRationale:\n\nEnforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
        "solution": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.\nMongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.\nChange the configuration file /etc/mongod.conf on each host, adding the following rows:\n\nnet:\n   port: 27017\n   tls:\n      mode: requireSSL\n      PEMKeyFile: /etc/mongodb/ssl/server1.pem\n      CAFile: /etc/mongodb/ssl/mongoCA.crt\n      clusterFile: /etc/mongodb/ssl/server1.pem\n   security:\n      authorization: enabled\n      clusterAuthMode: x509\n\nRestart the daemon\n\nsudo service mongodb restart\n\n\n\n\nTo enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)\n\n\nGenerate A Key File\n\nOn each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:\n\nkeyFile = /srv/mongodb/keyfile\n\nWhen starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2A,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*clusterFile[\\\\s]*:",
        "expect": "^[\\\\s]*clusterFile[\\\\s]*:[\\\\s]*.+$"
    },
    "custom_item_5": {
        "description": "2.3 Ensure authentication is enabled in the sharded cluster - CAFile",
        "info": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.\n\nWith keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.\n\nFor Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.\n\nFor Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.\n\nRationale:\n\nEnforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
        "solution": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.\nMongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.\nChange the configuration file /etc/mongod.conf on each host, adding the following rows:\n\nnet:\n   port: 27017\n   tls:\n      mode: requireSSL\n      PEMKeyFile: /etc/mongodb/ssl/server1.pem\n      CAFile: /etc/mongodb/ssl/mongoCA.crt\n      clusterFile: /etc/mongodb/ssl/server1.pem\n   security:\n      authorization: enabled\n      clusterAuthMode: x509\n\nRestart the daemon\n\nsudo service mongodb restart\n\n\n\n\nTo enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)\n\n\nGenerate A Key File\n\nOn each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:\n\nkeyFile = /srv/mongodb/keyfile\n\nWhen starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2A,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*CAFile[\\\\s]*:",
        "expect": "^[\\\\s]*CAFile[\\\\s]*:[\\\\s]*.+$"
    },
    "custom_item_6": {
        "description": "2.3 Ensure authentication is enabled in the sharded cluster - clusterAuthMode",
        "info": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.\n\nWith keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.\n\nFor Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.\n\nFor Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.\n\nRationale:\n\nEnforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
        "solution": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.\nMongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.\nChange the configuration file /etc/mongod.conf on each host, adding the following rows:\n\nnet:\n   port: 27017\n   tls:\n      mode: requireSSL\n      PEMKeyFile: /etc/mongodb/ssl/server1.pem\n      CAFile: /etc/mongodb/ssl/mongoCA.crt\n      clusterFile: /etc/mongodb/ssl/server1.pem\n   security:\n      authorization: enabled\n      clusterAuthMode: x509\n\nRestart the daemon\n\nsudo service mongodb restart\n\n\n\n\nTo enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)\n\n\nGenerate A Key File\n\nOn each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:\n\nkeyFile = /srv/mongodb/keyfile\n\nWhen starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2A,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*clusterAuthMode[\\\\s]*:",
        "expect": "^[\\\\s]*clusterAuthMode[\\\\s]*:[\\\\s]*x509[\\\\s]*$"
    },
    "custom_item_7": {
        "description": "2.3 Ensure authentication is enabled in the sharded cluster - authenticationMechanisms",
        "info": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.\n\nWith keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.\n\nFor Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.\n\nFor Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.\n\nRationale:\n\nEnforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
        "solution": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.\nMongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.\nChange the configuration file /etc/mongod.conf on each host, adding the following rows:\n\nnet:\n   port: 27017\n   tls:\n      mode: requireSSL\n      PEMKeyFile: /etc/mongodb/ssl/server1.pem\n      CAFile: /etc/mongodb/ssl/mongoCA.crt\n      clusterFile: /etc/mongodb/ssl/server1.pem\n   security:\n      authorization: enabled\n      clusterAuthMode: x509\n\nRestart the daemon\n\nsudo service mongodb restart\n\n\n\n\nTo enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)\n\n\nGenerate A Key File\n\nOn each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:\n\nkeyFile = /srv/mongodb/keyfile\n\nWhen starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2A,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*authenticationMechanisms[\\\\s]*:",
        "expect": "^[\\\\s]*authenticationMechanisms[\\\\s]*:[\\\\s]*MONGODB-X509[\\\\s]*$"
    },
    "custom_item_8": {
        "description": "4.1 Ensure legacy TLS protocols are disabled",
        "info": "Only modern TLS protocols should be enabled in MongoDB for all client connections and upstream connections. Removing legacy TLS and SSL protocols (SSL 3.0, TLS 1.0 and 1.1), and enabling emerging and stable TLS protocols (TLS 1.2, and TLS 1.3), ensures users are able to take advantage of strong security capabilities and protects them from insecure legacy protocols.\n\nRationale:\n\nWhy disable TLS 1.0: TLS 1.0 was deprecated from use when PCI DSS Compliance mandated that it not be used for any applications processing credit card numbers in June 2018.\n\nWhy disable TLS 1.1: Because of the increased security associated with higher versions of TLS, TLS 1.0 should be disabled.",
        "solution": "Make changes to configuration file, to configure your mongod or mongos instance to disable legacy protocols, shut down the instance and update the configuration file with the following setting:\n\nnet:\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/caToValidateClientCertificates.pem\n    disabledProtocols: TLS1_0,TLS1_1\n\nStart mongod or mongos instance with the configuration file.\n\nmongod --config /etc/mongod.conf\n\nDefault Value:\n\nTLS1_0, TLS1_1, TLS1_2\n\nNote: Starting in version 4.0.4 (and 3.6.9)TLS1_3 is added to the default value.",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|18.11,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|2A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 net: @MONGOD_CONF_FULL_PATH@ | grep disabledProtocols",
        "expect": "^[\\\\s]*disabledProtocols[\\\\s]*:[\\\\s]*(?=.*TLS1_0)(?=.*TLS1_1).*"
    },
    "custom_item_9": {
        "description": "4.4 Ensure Federal Information Processing Standard (FIPS) is enabled",
        "info": "The Federal Information Processing Standard (FIPS) is a computer security standard used to certify software modules and libraries that encrypt and decrypt data securely. You can configure MongoDB to run with a FIPS 140-2 certified library for OpenSSL.\n\nFIPS is a property of the encryption system and not the access control system. However, the environment requires FIPS compliant encryption and access control. Organizations must ensure that the access control system uses only FIPS-compliant encryption.\n\nRationale:\n\nFIPS is an industry standard which dictates how data should be encrypted at rest and during transmission.",
        "solution": "Configuring FIPS mode, ensure that your certificate is FIPS compliant. Run mongod or mongos instance in FIPS mode.\nMake changes to configuration file, to configure your mongod or mongos instance to use FIPS mode, shut down the instance and update the configuration file with the following setting:\n\nnet:\n   tls:\n      FIPSMode: true\n\nStart mongod or mongos instance with a configuration file.\n\nmongod --config /etc/mongod.conf\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.13.8,800-171|3.13.16,800-53|SC-8,800-53|SC-28,800-53r5|SC-8,800-53r5|SC-28,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(a),CN-L3|8.1.4.8(b),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv7|14.8,CSF|PR.DS-1,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),HIPAA|164.312(e)(2)(ii),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-28,ITSG-33|SC-28a.,LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 net: @MONGOD_CONF_FULL_PATH@ | grep FIPSMode",
        "expect": "^[\\\\s]*FIPSMode[\\\\s]*:[\\\\s]*true"
    },
    "custom_item_10": {
        "description": "4.5 Ensure Encryption of Data at Rest - enableEncryption",
        "info": "Encryption of data at rest must be enabled to ensure compliance with security and privacy standards including HIPAA, PCI-DSS, and FERPA.\n\nEncryption at rest, when used in conjunction with transport encryption and good security policies that protect relevant accounts, passwords, and encryption keys.\n\nRationale:\n\nUnauthorized users, such as intruders who are attempting security attacks, cannot read the data from storage and back up media unless they have the master encryption key to decrypt it.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "It is recommended to enable the data at rest encryption to protect the data.\nProtecting Data at Rest Including following steps.\n\nGenerating a master key.\n\nGenerating keys for each database.\n\nEncrypting data with the database keys.\n\nEncrypting the database keys with the master key.\n\nOnly the master key is external to the server and requires external management. To manage the master key, MongoDB's encrypted storage engine supports two key management options:\n\nIntegration with a third-party key management appliance via the Key Management Interoperability Protocol (KMIP). Recommended\n\nUse of local key management via a keyfile.\n\nThe encryption occurs transparently in the storage layer; i.e. all data files are fully encrypted from a filesystem perspective, and data only exists in an unencrypted state in memory and during transmission.\nTo enable Encryption on Database follow below step mentioned in below Link\nhttps://docs.mongodb.com/manual/tutorial/configure-encryption/\nRotation of Key is also important. This can be enabled by following mentioned steps in below link.\nhttps://docs.mongodb.com/manual/tutorial/rotate-encryption-key/",
        "reference": "800-171|3.13.16,800-53|SC-28,800-53r5|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ITSG-33|SC-28,ITSG-33|SC-28a.,LEVEL|2M,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "ps -ef | grep -E \"mongos|mongod\"",
        "expect": "enableEncryption"
    },
    "custom_item_11": {
        "description": "4.5 Ensure Encryption of Data at Rest - encryptionKeyFile",
        "info": "Encryption of data at rest must be enabled to ensure compliance with security and privacy standards including HIPAA, PCI-DSS, and FERPA.\n\nEncryption at rest, when used in conjunction with transport encryption and good security policies that protect relevant accounts, passwords, and encryption keys.\n\nRationale:\n\nUnauthorized users, such as intruders who are attempting security attacks, cannot read the data from storage and back up media unless they have the master encryption key to decrypt it.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "It is recommended to enable the data at rest encryption to protect the data.\nProtecting Data at Rest Including following steps.\n\nGenerating a master key.\n\nGenerating keys for each database.\n\nEncrypting data with the database keys.\n\nEncrypting the database keys with the master key.\n\nOnly the master key is external to the server and requires external management. To manage the master key, MongoDB's encrypted storage engine supports two key management options:\n\nIntegration with a third-party key management appliance via the Key Management Interoperability Protocol (KMIP). Recommended\n\nUse of local key management via a keyfile.\n\nThe encryption occurs transparently in the storage layer; i.e. all data files are fully encrypted from a filesystem perspective, and data only exists in an unencrypted state in memory and during transmission.\nTo enable Encryption on Database follow below step mentioned in below Link\nhttps://docs.mongodb.com/manual/tutorial/configure-encryption/\nRotation of Key is also important. This can be enabled by following mentioned steps in below link.\nhttps://docs.mongodb.com/manual/tutorial/rotate-encryption-key/",
        "reference": "800-171|3.13.16,800-53|SC-28,800-53r5|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ITSG-33|SC-28,ITSG-33|SC-28a.,LEVEL|2M,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "ps -ef | grep -E \"mongos|mongod\"",
        "expect": "encryptionKeyFile"
    },
    "custom_item_12": {
        "description": "5.2 Ensure that audit filters are configured properly",
        "info": "MongoDB Enterprise supports auditing of various operations. When enabled, the audit facility, by default, records all auditable operations as detailed in Audit Event Actions, Details, and Results. To specify which events to record, the audit feature includes the --auditFilter option. This check is only for Enterprise editions.\n\nRationale:\n\nAll operations carried out on the database are logged. This helps in backtracking and tracing any incident that occurs.",
        "solution": "Set the audit filters based on the organization's requirements.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSCv8|8.2,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2M,NESA|M1.2.2,NESA|M5.5.1,NESA|T3.6.2,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 auditLog @MONGOD_CONF_FULL_PATH@ | grep filter",
        "expect": "^[\\\\s]*filter[\\\\s]*:[\\\\s]*.+$"
    },
    "custom_item_13": {
        "description": "5.3 Ensure that logging captures as much information as possible",
        "info": "The SystemLog.quiet option stops logging of information such as:\n\nconnection events\n\nauthentication events\n\nreplication sync activities\n\nevidence of some potentially impactful commands being run (eg: drop, dropIndexes, validate)\n\nThis information should be logged whenever possible. This check is only for Enterprise editions.\n\nRationale:\n\nThe use of SystemLog.quiet makes troubleshooting problems and investigating possible security incidents much more difficult.",
        "solution": "Set\n\n'SystemLog:\n       quiet: false'\n\nto false in the /etc/mongod.conf file to disable it.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSCv8|8.2,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2A,NESA|M1.2.2,NESA|M5.5.1,NESA|T3.6.2,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 systemLog @MONGOD_CONF_FULL_PATH@ | grep quiet",
        "expect": "^[\\\\s]*quiet[\\\\s]*:[\\\\s]*false"
    },
    "custom_item_14": {
        "description": "5.4 Ensure that new entries are appended to the end of the log file",
        "info": "By default, new log entries will overwrite old entries after a restart of the mongod or Mongols service. Enabling the systemLog.logAppend setting causes new entries to be appended to the end of the log file rather than overwriting the existing content of the log when the mongos or mongod instance restarts.\n\nRationale:\n\nAllowing old entries to be overwritten by new entries instead of appending new entries to the end of the log may destroy old log data that is needed for a variety of purposes.",
        "solution": "Set\n\n'systemLog:\n    logAppend: true'\n\nto true in the /etc/mongod.conf file.",
        "reference": "800-53|AU-11,800-53r5|AU-11,CSCv7|6.4,CSCv8|8.10,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-11,LEVEL|2A,NESA|M5.2.3,NESA|T3.6.2,NIAv2|SM7,PCI-DSSv3.2.1|10.7,PCI-DSSv4.0|10.5.1,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 systemLog @MONGOD_CONF_FULL_PATH@ | grep logAppend",
        "expect": "^[\\\\s]*logAppend[\\\\s]*:[\\\\s]*true"
    },
    "custom_item_15": {
        "description": "6.2 Ensure that operating system resource limits are set for MongoDB",
        "info": "Operating systems provide ways to limit and control the usage of system resources such as threads, files, and network connections on a per-process and per-user basis\n\nRationale:\n\nThese ulimits prevent a single user from consuming too many system resources.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Every deployment may have unique requirements and settings. Recommended thresholds and settings are particularly important for MongoDB deployments:\n\n\nf (file size): unlimited\n\n\nt (cpu time): unlimited\n\n\nv (virtual memory): unlimited [1]\n\n\nn (open files): 64000\n\n\nm (memory size): unlimited [1] [2]\n\n\nu (processes/threads): 64000\n\nRestart the mongod and mongos instances after changing the ulimit settings to ensure that the changes take effect.\n\nDefault Value:\n\nNot configured",
        "reference": "800-53|SC-6,800-53r5|SC-6,CN-L3|7.1.3.7(c),CN-L3|7.1.3.7(d),GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-6,ITSG-33|SC-6a.,LEVEL|2M,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "pid=$(ps -ef | grep [m]ongod | awk -F' ' '{print $2}'); cat /proc/$pid/limits",
        "expect": "Manual Review Required"
    },
    "custom_item_16": {
        "description": "6.3 Ensure that server-side scripting is disabled if not needed",
        "info": "MongoDB supports the execution of JavaScript code for certain server-side operations: mapReduce, group, $where, $accumulator, and $function aggregation operations that allow users to define custom aggregation expressions. If you do not use these operations, server-side scripting should be disabled.\n\nRationale:\n\nIf server-side scripting is not needed and is not disabled, this introduces unnecessary risk which may allow an attacker to take advantage of insecure coding.\n\nImpact:\n\nDisabling server-side scripting will block all server-side scripts from executing.",
        "solution": "If server-side scripting is not required, for mongod instance disable it by using the --noscripting option on the command line, or setting security.javascriptEnabled to false in the configuration file.\nStarting in MongoDB 4.4 this is also applicable to mongos.\n\nDefault Value:\n\nEnabled",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2M,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15136",
        "cmd": "grep -A10 security @MONGOD_CONF_FULL_PATH@ | grep javascriptEnabled",
        "expect": "^[\\\\s]*javascriptEnabled[\\\\s]*:[\\\\s]*false"
    }
}