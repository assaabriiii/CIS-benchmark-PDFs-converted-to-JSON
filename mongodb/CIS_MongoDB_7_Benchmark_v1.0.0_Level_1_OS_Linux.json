{
    "custom_item_1": {
        "description": "Check for MongoDB 7",
        "cmd": "/bin/mongod --version",
        "expect": "db version v@MONGODB_VERSION@"
    },
    "custom_item_2": {
        "description": "2.1 Ensure Authentication is configured",
        "info": "This setting ensures that all clients, users, servers are required to authenticate before being granted access to the MongoDB database.\n\nAuthentication is the process of verifying the identity of a client. When access control, i.e. authorization, is enabled, MongoDB requires all clients to authenticate themselves in order to determine their access.\n\nfrom MongoDB documentation\n\nAuthentication Mechanisms\n\nMongoDB supports a number of authentication mechanisms that clients can use to verify their identity. These mechanisms allow MongoDB to integrate into your existing authentication system.\n\nMongoDB supports multiple authentication mechanisms:\n\nSCRAM (Default)\n\nx.509 Certificate Authentication.\n\nCertificate Authority\n\nFor production use, your MongoDB deployment should use valid certificates generated and signed by a certificate authority. You or your organization can generate and maintain an independent certificate authority, or use certificates generated by third-party TLS/SSL vendors.\n\nIn addition to supporting the aforementioned mechanisms, MongoDB Enterprise also supports the following mechanisms:\n\nLDAP proxy authentication\n\nKerberos authentication.\n\nRationale:\n\nFailure to authenticate clients, users, servers can enable unauthorized access to the MongoDB database and can prevent tracing actions back to their sources.\n\nIt's highly recommended that password length and complexity also be in-place. When performing the traditional user/password authentication against MongoDB there is not in-place intrinsic password complexity check and there is no LOCKING mechanism with multiple failure logins. So, MongoDB is prone to brute force attacks compared to other database systems.",
        "solution": "The authentication mechanism should be implemented before anyone accesses the MongoDB Server.\nTo enable the authentication mechanism:\n\nStart the MongoDB instance without authentication.\n\nmongod --port 27017 --dbpath /data/db1\n\nOr\n\nmongod.exe --port 27017 --dbpath db1\n\nCreate the system user administrator, ensuring that its password meets organizationally-defined password in terms of length and complexity requirements as there is no in-place locking mechanism for multiple failed login attempts against MongoDB.\n\nuse admin\ndb.createUser(\n  {\n    user: 'MongoAdmin',\n    pwd: 'password',\n    roles: [ { role: 'root', db: 'admin' } ]\n  }\n)\n\nOpen mongod.conf and change for authorization value to enabled:\n\nsecurity:\n    authorization: 'enabled'\n\nRestart the MongoDB instance\n\nservice mongod restart\n\nDefault Value:\n\nBy default, authorization is set to disable.",
        "reference": "800-171|3.5.2,800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53|IA-5(1),800-53r5|IA-2(1),800-53r5|IA-2(2),800-53r5|IA-5(1),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|5.2,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|4.1,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*authorization[\\\\s]*:",
        "expect": "^[\\\\s]*authorization[\\\\s]*:[\\\\s]*(?i)enabled(?-i)"
    },
    "custom_item_3": {
        "description": "2.2 Ensure that MongoDB does not bypass authentication via the localhost exception",
        "info": "MongoDB should not be set to bypass authentication via the localhost exception. The localhost exception allows the user to enable authorization before creating the first user in the system. When active, the localhost exception allows all connections from the localhost interface to have full access to that instance. The exception applies only when there are no users created in the MongoDB instance.\n\nNote: This recommendation only applies when there are no users created in the MongoDB instance.\n\nRationale:\n\nDisabling this exception will prevent unauthorized local access to the MongoDB database. It will also ensure the traceability of each database activity to a specific user. Localhost Exception allows direct connect to Mongod's without any UN/PW.",
        "solution": "To disable local authentication on the MongoDB database.\nType OS Console Command\n\nmongod --setParameter enableLocalhostAuthBypass=0\n\nor\nTo manually configure use the setParameter option in the mongo configuration file to set it to false.\n\nsetParameter:\n  enableLocalhostAuthBypass: false\n\nDefault Value:\n\nBy default, localhost exception value (enableLocalhostAuthBypass) is true.",
        "reference": "800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53r5|IA-2(1),800-53r5|IA-2(2),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),LEVEL|1A,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*enableLocalhostAuthBypass[\\\\s]*:",
        "expect": "^[\\\\s]*enableLocalhostAuthBypass[\\\\s]*:[\\\\s]*(?i)false(?-i)"
    },
    "custom_item_4": {
        "description": "3.3 Ensure that MongoDB is run using a non-privileged, dedicated service account",
        "info": "The MongoDB service should not be run using a privileged account such as 'root' because this unnecessarily exposes the operating system to high risk.\n\nRationale:\n\nUsing a non-privileged, dedicated service account restricts the database from accessing the critical areas of the operating system which are not required by the MongoDB. This will also mitigate the potential for unauthorized access via a compromised, privileged account on the operating system.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Create a dedicated user for performing MongoDB database activity.\n\nSet the Database data files, the keyfile, and the SSL private key files to only be readable by the mongod/mongos user.\n\nSet the log files to only be writable by the mongod/mongos user and readable only by root.\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|4.3,CSCv8|5.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1M,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "cmd": "/bin/ps -ef | /bin/grep -E \"mongos|mongod\"",
        "expect": "Manual Review Required"
    },
    "custom_item_5": {
        "description": "4.2 Ensure Weak Protocols are Disabled",
        "info": "Servers can be configured to disable specific TLS/SSL protocol versions which may be vulnerable to exploitation and/or lack features which improve the level of security as provided by newer versions of the protocol.\n\nRationale:\n\nThe TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity.\n\nThe NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references.\n\nImpact:\n\nIf an attempt to connect using a disabled protocol is made the connection attempt will fail and may have unanticipated impact on clients attempting to establish the connection.",
        "solution": "For mongod ('Primary daemon process for the MongoDB system')\nIn the configuration file /etc/mongod.conf, set the disabledProtocols option to to include TLS1_0,TLS1_1:\n\nnet:\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/caToValidateClientCertificates.pem\n    disabledProtocols: TLS1_0,TLS1_1\n\nAnd restart monogdb instance with\n\nmongod --config /etc/mongod.conf\n\nOr\n\nmongod --sslDisabledProtocols 'TLS1_0,TLS1_1\n\nDefault Value:\n\nTLS1_0 if TLS 1.1+ is available on the system.",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*disabledProtocols[\\\\s]*:",
        "expect": "^[\\\\s]*disabledProtocols[\\\\s]*:[\\\\s]*(?=.*TLS1_0)(?=.*TLS1_1).*"
    },
    "custom_item_6": {
        "description": "4.3 Ensure Encryption of Data in Transit TLS or SSL (Transport Encryption)",
        "info": "Use TLS or SSL to protect all incoming and outgoing connections. This should include using TLS or SSL to encrypt communication between the mongod and mongos components of a MongoDB client as well as between all applications and MongoDB.\n\nMongoDB supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of MongoDB's network traffic. TLS/SSL ensures that MongoDB network traffic is only readable by the intended client.\n\nPlease note: As of MongoDB version 4.2 SSL has been deprecated.\n\nAlso, starting in MongoDB version 4.0, MongoDB disables support for TLS 1.0 encryption on systems where TLS 1.1+ is available.\n\nRationale:\n\nThis prevents sniffing of cleartext traffic between MongoDB components or performing a man-in-the-middle attack for MongoDB.",
        "solution": "Configure MongoDB servers to require the use of SSL or TLS to encrypt all MongoDB network communications.\nTo implement SSL or TLS to encrypt all MongoDB network communication, perform the following steps:\nFor mongod ('Primary daemon process for the MongoDB system')\nIn the configuration file /etc/mongod.conf, set the PEMKeyFile option to the certificate file's path and then start the component with this command:\n\nnet:\n   tls:\n      mode: requireTLS\n      certificateKeyFile: /etc/ssl/mongodb.pem\n      CAFile: /etc/ssl/caToValidateClientCertificates.pem\n\nAnd restart monogdb instance with\n\nmongod --config /etc/mongod.conf\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "file": "@MONGOD_CONF_FULL_PATH@",
        "regex": "^[\\\\s]*mode[\\\\s]*:",
        "expect": "^[\\\\s]*mode[\\\\s]*:[\\\\s]*(requireTLS|requireSSL)"
    },
    "custom_item_7": {
        "description": "5.1 Ensure that system activity is audited",
        "info": "Track access and changes to database configurations and data. MongoDB Enterprise includes a system auditing facility that can record system events (e.g. user operations, connection events) on a MongoDB instance. These audit records permit forensic analysis and allow administrators to verify proper controls.\n\nRationale:\n\nSystem level logs can be handy while troubleshooting an operational problem or handling a security incident.",
        "solution": "Set the value of auditLog.destination to the appropriate value from the following options:\nsyslog\nTo enable auditing and print audit events to syslog\n\nmongod --dbpath data/db --auditDestination syslog\n\nconsole\nTo enable auditing and print audit events to standard output (i.e., stdout)\n\nmongod --dbpath data/db --auditDestination console\n\nJson File\nTo enable auditing and print audit events to a file in JSON format. Printing audit events to file in JSON format degrades server performance more than printing to a file in BSON format.\n\nmongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/auditLog.json\n\nBson File\nTo enable auditing and print audit events to a file in BSON binary format\n\nmongod --dbpath data/db --auditDestination file --auditFormat BSON --auditPath data/db/auditLog.bson\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "cmd": "/bin/grep -A4 'auditLog' @MONGOD_CONF_FULL_PATH@ | /bin/grep 'destination'",
        "expect": "^[\\\\s]*auditLog.destination[\\\\s]*:[\\\\s]*(syslog|console|file)"
    },
    "custom_item_8": {
        "description": "6.1 Ensure that MongoDB uses a non-default port",
        "info": "Changing the default port used by MongoDB makes it harder for attackers to find the database and target it.\n\nRationale:\n\nStandard ports are used in automated attacks and by attackers to verify which applications are running on a server.\n\nImpact:\n\nHackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to 'fly under the radar'. This is just to avoid detection, other than that there is no added safety by using a different port.",
        "solution": "Change the port for MongoDB server to a number other than 27017.\nIn mongod.conf edit the below lines\n\n# network interfaces\nnet:\n  port: $Orginasation Defined port\n  bindIp: $Orginasation Defined IP",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "cmd": "/bin/grep port: @MONGOD_CONF_FULL_PATH@ | /bin/grep 27017 | /bin/awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "^pass$"
    },
    "custom_item_9": {
        "description": "keyFile",
        "cmd": "keyfile=$(/bin/cat @MONGOD_CONF_FULL_PATH@ | /bin/awk '/keyfile/ { print $2 }' | /bin/sort -u); ls -l $keyfile",
        "expect": "-rw-------[\\\\s]+\\\\d+[\\\\s]+mongodb[\\\\s]+mongodb"
    },
    "custom_item_10": {
        "description": "PEMKeyFile",
        "cmd": "pemkeyfile=$(/bin/cat @MONGOD_CONF_FULL_PATH@ | /bin/awk '/PEMKeyFile/ { print $2 }' | /bin/sort -u); ls -l $pemkeyfile",
        "expect": "-rw-------[\\\\s]+\\\\d+[\\\\s]+mongodb[\\\\s]+mongodb"
    },
    "custom_item_11": {
        "description": "CAFile",
        "cmd": "cafile=$(/bin/cat @MONGOD_CONF_FULL_PATH@ | /bin/awk '/CAFile/ { print $2 }' | /bin/sort -u); ls -l $cafile",
        "expect": "-rw-------[\\\\s]+\\\\d+[\\\\s]+mongodb[\\\\s]+mongodb"
    },
    "custom_item_12": {
        "description": "7.2 Ensure appropriate database file permissions are set",
        "info": "MongoDB database files need to be protected using file permissions.\n\nRationale:\n\nThis will restrict unauthorized users from accessing the database.",
        "solution": "Set ownership of the database file to mongodb user and remove other permissions using the following commands:\n\nchmod 770 /var/lib/mongodb\nchown mongodb:mongodb /var/lib/mongodb\n\nDefault Value:\n\nNot configured",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1M,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/15135",
        "file": "@MONGODB_DBPATH@",
        "owner": "@MONGO_USER@",
        "mask": "007",
        "group": "@MONGO_GROUP@"
    }
}