{
    "custom_item_1": {
        "description": "Linux found",
        "cmd": "uname -a",
        "expect": "Linux"
    },
    "custom_item_2": {
        "description": "1.1 Ensure packages are obtained from authorized repositories",
        "info": "Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though).\n\nWhen obtaining and installing software packages (typically via dnf or apt), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, the canonical repositories are the official PostgreSQL YUM repository (yum.postgresql.org) and the official PostgreSQL APT repository (apt.postgresql.org). Your chosen PostgreSQL vendor may offer its own software repositories as well.\n\nRationale:\n\nBeing open-source, PostgreSQL packages are widely available across the internet through package aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective, or malicious software.\n\nMany organizations choose to implement a local software repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories.\n\nFrom a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid software repository. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from dnf provides '*libpq.so' or apt-file search /usr/pgsql-13/lib/libpq.so.5.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Alter the configured repositories so they only include valid and authorized sources of packages.\n\nAs an example of adding an authorized repository, we will install the PGDG repository RPM from 'yum.postgresql.org':\n\n# whoami\nroot\n# dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\nLast metadata expiration check: 0:01:35 ago on Mon 03 Oct 2022 01:19:37 PM EDT.\n[snip]\nInstalled:\n  pgdg-redhat-repo-42.0-35.noarch\n\nComplete!\n# whoami\nroot\n# dnf repolist all | egrep 'enabled$'\npgdg-common                                        PostgreSQL common  enabled\npgdg12                                             PostgreSQL 12 for  enabled\npgdg13                                             PostgreSQL 13 for  enabled\npgdg14                                             PostgreSQL 14 for  enabled\npgdg15                                             PostgreSQL 15 for  enabled\npgdg16                                             PostgreSQL 16 for  enabled\nrhel-9-for-x86_64-appstream-rpms                   Red Hat Enterprise enabled\nrhel-9-for-x86_64-baseos-rpms                      Red Hat Enterprise enabled\n\nIf the version of PostgreSQL installed is not 13.x or they did not come from a valid repository, the packages may be uninstalled using this command:\n\n# whoami\nroot\n# dnf remove $(rpm -qa|grep postgres)\n\nTo install the PGDG RPMs for PostgreSQL 13.x, run:\n\n# whoami\nroot\n# dnf install -y postgresql13-{server,contrib}Installed:postgresql13-13.14-1PGDG.rhel9.x86_64        postgresql13-contrib-13.14-1PGDG.rhel9.x86_64   postgresql13-server-13.14-1PGDG.rhel9.x86_64\n  postgresql13-libs-13.14-1PGDG.rhel9.x86_64   postgresql13-devel-13.14-1PGDG.rhel9.x86_64\nComplete!",
        "reference": "800-171|3.4.1,800-171|3.4.7,800-171|3.7.1,800-171|3.7.2,800-53|CM-7(1),800-53|CM-8,800-53|MA-3,800-53r5|CM-7(1),800-53r5|CM-8,800-53r5|MA-3,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|2.1,CSCv8|2.1,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,CSF|PR.IP-1,CSF|PR.MA-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7(1),ITSG-33|CM-8,ITSG-33|MA-3,ITSG-33|MA-3a.,LEVEL|1M,NESA|T1.2.1,NESA|T1.2.2,NESA|T2.3.4,NESA|T5.4.4,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.3,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "yum repolist all | grep enabled",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_3": {
        "description": "1.3 Ensure systemd Service Files Are Enabled",
        "info": "Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.\n\nRationale:\n\nEnabling the systemd service on the OS ensures the database service is active when a change of state occurs as in the case of a system startup or reboot.",
        "solution": "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string 'postgresql'. PGDG installs do not automatically register the service as a 'want' of the default systemd target. Multiple instances of PostgreSQL services often distinguish themselves using a version number.\n\n# whoami\nroot\n# systemctl enable postgresql-14\nCreated symlink /etc/systemd/system/multi-user.target.wants/postgresql-14.service -> /usr/lib/systemd/system/postgresql-14.service.\n# systemctl is-enabled postgresql-14.service\nenabled",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "systemctl is-enabled postgresql-13.service",
        "expect": "^[\\\\s]*enabled[\\\\s]*$"
    },
    "custom_item_4": {
        "description": "data_directory",
        "file": "@PG_CONF@/main",
        "mask": "077"
    },
    "custom_item_5": {
        "description": "data_directory/data",
        "file": "@PG_CONF@/data",
        "mask": "077"
    },
    "custom_item_6": {
        "description": "data_directory/backups",
        "file": "@PG_CONF@/backups",
        "mask": "077"
    },
    "custom_item_7": {
        "description": "data_directory/initdb.log",
        "file": "@PG_CONF@/initdb.log",
        "mask": "177"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "Home",
        "file": "~/.[!.]*",
        "regex": "PGPASSWORD",
        "expect": "PGPASSWORD"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "root",
        "file": "/root/.[!.]*",
        "regex": "PGPASSWORD",
        "expect": "PGPASSWORD"
    },
    "custom_item_10": {
        "system": "Linux",
        "description": "/etc/environment",
        "file": "/etc/environment",
        "regex": "PGPASSWORD",
        "expect": "PGPASSWORD"
    },
    "custom_item_11": {
        "description": "1.7 Verify That the 'PGPASSWORD' Environment Variable is Not in Use",
        "info": "PostgreSQL can read a default database password from an environment variable called PGPASSWORD.\n\nRationale:\n\nUsing the PGPASSWORD environment variable implies PostgreSQL credentials are stored as clear text. Avoiding use of this environment variable can better safeguard the confidentiality of PostgreSQL credentials.",
        "solution": "Check which users and/or scripts are setting PGPASSWORD and change them\nto use a more secure method.",
        "reference": "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "grep PGPASSWORD /proc/*/environ",
        "expect": "/proc/(self|thread-self)[^/]+/environ"
    },
    "custom_item_12": {
        "description": "2.1 Ensure the file permissions mask is correct",
        "info": "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask. The postgres user account should use a umask of 0077 to deny file access to all user accounts except the owner.\n\nRationale:\n\nThe Linux OS defaults the umask to 0022, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 0077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error-prone process that is not advised).",
        "solution": "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file:\n\n# whoami\npostgres\n# cd ~\n# ls -ld .{bash_profile,profile,bashrc}\nls: cannot access .profile: No such file or directory\nls: cannot access .bashrc: No such file or directory\n-rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile\n# echo 'umask 077' >> .bash_profile\n# source .bash_profile\n# umask\n0077\n\nDefault Value:\n\n0022",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "su - postgres -c umask",
        "expect": "^[0-7]+77$"
    },
    "custom_item_13": {
        "description": "home",
        "cmd": "find /home -name '.psql_history' -exec ls -la {} \\\\;",
        "expect": "^.*\\.psql_history.* -> \\/dev\\/null$"
    },
    "custom_item_14": {
        "description": "root",
        "cmd": "find /root -name '.psql_history' -exec ls -la {} \\\\;",
        "expect": "^.*\\.psql_history.* -> \\/dev\\/null$"
    },
    "custom_item_15": {
        "description": "4.1 Ensure Interactive Login is Disabled",
        "info": "When created, the PostgreSQL user may have interactive access to the operating system, which means that the PostgreSQL user could login to the host as any other user would.\n\nRationale:\n\nPreventing the PostgreSQL user from logging in interactively may reduce the impact of a compromised PostgreSQL account. There is also more accountability, as accessing the operating system where the PostgreSQL server lies will require the user's own account and the apprpriate sudo configuration. Interactive access by the PostgreSQL user is unnecessary and should be disabled.\n\nImpact:\n\nThis setting will prevent the PostgreSQL administrator from interactively logging into the operating system using the PostgreSQL user. Instead, the administrator will need to log in using one's own account and then sudo to the PostgreSQL administrator account.",
        "solution": "Execute the following command:\n\nsudo passwd -l postgres",
        "reference": "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "grep postgres /etc/shadow | cut -d: -f1-2",
        "expect": "^postgres:!.+$"
    },
    "custom_item_16": {
        "description": "fips-mode-setup",
        "cmd": "fips-mode-setup --check",
        "expect": "FIPS mode is enabled."
    },
    "custom_item_17": {
        "description": "openssl version",
        "cmd": "openssl version",
        "expect": "FIPS"
    },
    "custom_item_18": {
        "description": "6.10 Ensure Weak SSL/TLS Ciphers Are Disabled",
        "info": "The PostgreSQL ssl_ciphers directive specifies which Cipher Suites are allowed in the negotiation with the client.\n\nIn cryptography, perfect forward secrecy (PFS), also known as forward secrecy (FS), is a feature of specific key exchange protocols that give assurance that the session keys will not be compromised even if the private key of the server is compromised. For instance, RSA does not provide PFS, while the ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) and DHE (Diffie-Hellman Ephemeral) provides PFS.\n\nECDHE is the stronger protocol and should be preferred, while DHE may be allowed for greater compatibility with older clients. Only Cipher Suites with either the ECDHE or the DHE key exchange are allowed.\n\nRationale:\n\nThe SSL/TLS protocols support a large number of Cipher Suites including many weak and medium strength algorithms that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL Cipher Suite which allows a TLS connection without any cryptographic protection. Therefore, it is critical to ensure the configuration only allows strong algorithms greater than or equal to 128-bit to be negotiated with the client. Stronger 256-bit algorithms should be allowed and preferred.\n\nFurthermore, during the TLS handshake, after the initial Client Hello and Server Hello, there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server's public key and sent over the network. However, with protocols such as ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With forward secrecy, each session has a unique key exchange, so that future sessions are protected.\n\nNote This recommendation is primarily targeted at those installs that cannot run in FIPS-mode, or need to further refine the allowable cipher list.",
        "solution": "Add or modify the ssl_ciphers directive to the following value in the PostgreSQL configuration file (postgresql.conf):\n\nssl_ciphers = 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES256-CCM,ECDHE-ECDSA-AES128-CCM,DHE-RSA-AES256-CCM,DHE-RSA-AES128-CCM,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-CHACHA20-POLY1305'",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "file": "@PG_CONF@",
        "regex": "^[^#]*ssl_ciphers",
        "expect": "^[^#]*ssl_ciphers[\\\\s]*=[\\\\s]*[\"']TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES256-CCM,ECDHE-ECDSA-AES128-CCM,DHE-RSA-AES256-CCM,DHE-RSA-AES128-CCM,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-CHACHA20-POLY1305[\"']"
    },
    "custom_item_19": {
        "description": "8.2 Ensure the backup and restore tool, 'pgBackRest', is installed and configured",
        "info": "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.\n\nRationale:\n\nThe native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs a physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility.\n\npgBackRest is open-source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per-file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental backups, local/remote operation via SSH or TLS, hard-linking, restore, backup encryption, and more. pgBackRest is written in C and does not depend on rsync or tar but instead performs its own deltas which give it maximum flexibility. Finally, pgBackRest provides an easy-to-use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.\n\n$ pgbackrest info\n\nstanza: proddb01\n\nstatus: ok\n\ndb (current)\n\n  wal archive min/max (13): 000000010000000000000012 / 000000010000000000000017\n\n      full backup: 20231012-153106F\n\n          timestamp start/stop: 2023-10-12 15:31:06 / 2023-10-12 15:31:49\n\n          wal start/stop: 000000010000000000000012 / 000000010000000000000012\n\n          database size: 29.4MB, backup size: 29.4MB\n\n          repository size: 3.4MB, repository backup size: 3.4MB\n\n      diff backup: 20231012-153106F_20231012-173109D\n\n          timestamp start/stop: 2023-10-12 17:31:09 / 2023-10-12 17:31:19\n\n          wal start/stop: 000000010000000000000015 / 000000010000000000000015\n\n          database size: 29.4MB, backup size: 2.6MB\n\n          repository size: 3.4MB, repository backup size: 346.8KB\n\n          backup reference list: 20231012-153106F\n\n      incr backup: 20231012-153106F_20231012-183114I\n\n          timestamp start/stop: 2023-10-12 18:31:14 / 2023-10-12 18:31:22\n\n          wal start/stop: 000000010000000000000017 / 000000010000000000000017\n\n          database size: 29.4MB, backup size: 8.2KB\n\n          repository size: 3.4MB, repository backup size: 519B\n\n          backup reference list: 20231012-153106F, 20231012-153106F_20231012-173109D\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:\n\n# whoami\nroot\n# dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpmInstalled:\n  epel-release-9-7.el9.noarch\n\nComplete!\n# dnf -y install pgbackrestInstalled:\n  libssh2-1.10.0-1.el9.x86_64                          pgbackrest-2.48-1PGDG.rhel9.x86_64\n\nComplete!\n\nOnce installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide.\nIf employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups reside should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully.",
        "reference": "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.1,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1A,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/17003",
        "cmd": "pgbackrest info",
        "expect": "MANUAL_REVIEW"
    }
}