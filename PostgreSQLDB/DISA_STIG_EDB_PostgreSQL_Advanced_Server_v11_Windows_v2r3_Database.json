{
    "custom_item_1": {
        "description": "Administrators",
        "sql_request": "SELECT rolname, rolconnlimit FROM pg_roles WHERE rolsuper = true AND (rolconnlimit = -1 OR rolconnlimit > @ADMIN_CONN_LIMIT@);"
    },
    "custom_item_2": {
        "description": "Users",
        "sql_request": "SELECT rolname, rolconnlimit FROM pg_roles WHERE rolsuper = false AND (rolconnlimit = -1 OR rolconnlimit > @USER_CONN_LIMIT@) AND rolname NOT IN ('pg_signal_backend');"
    },
    "custom_item_3": {
        "description": "EP11-00-000900 - The EDB Postgres Advanced Server must protect against a user falsely repudiating by ensuring all accounts are individual, unique, and not shared.",
        "info": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message.\n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables, and configuring the DBMS' audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, group account.",
        "solution": "Use accounts assigned to individual users where feasible. Configure the DBMS to provide individual accountability at the DBMS level, and in audit logs, for actions performed under a shared database account.\n\nModify any applications that use a shared database account to capture individual application user identities to the audit log using the edb_audit_tag or to the data tables.\n\nCreate and enforce the use of individual user IDs for logging on to EDB Postgres tools and third-party products.\n\nIf EDB auditing is not already enabled, enable it.\n\nExecute the following SQL as enterprisedb:\n\n ALTER SYSTEM SET edb_audit = csv;\n SELECT pg_reload_conf();\n\nor\n\n ALTER SYSTEM SET edb_audit = xml;\n SELECT pg_reload_conf();",
        "reference": "800-53|AU-10,800-53r5|AU-10,CAT|II,CCI|CCI-000166,CSF|PR.PT-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-10,NESA|T4.3.1,NESA|T7.3.3,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-224133r879554_rule,STIG-ID|EP11-00-000900,STIG-Legacy|SV-109397,STIG-Legacy|V-100293,Vuln-ID|V-224133",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW edb_audit;",
        "sql_expect": "^(csv|xml)$"
    },
    "custom_item_4": {
        "description": "EP11-00-001000 - The EDB Postgres Advanced Server must be configured to provide audit record generation capability for DoD-defined auditable events within all EDB Postgres Advanced Server/database components.",
        "info": "Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nAudit records can be generated from various components within the DBMS (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the DBMS will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.",
        "solution": "Configure the DBMS's auditing to audit organization-defined auditable events.\n\nExecute the following SQL as enterprisedb to ensure that EDB Auditing is enabled:\n\n ALTER SYSTEM SET edb_audit = csv;\n SELECT pg_reload_conf();\n\nor\n\n ALTER SYSTEM SET edb_audit = xml;\n SELECT pg_reload_conf();\n\nConfigure EDB audit settings to audit organization-defined auditable events in accordance with the information documented in the EDB Postgres Advanced Server Guide.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12a.,800-53r5|AU-12a.,CAT|II,CCI|CCI-000169,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-12a.,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-224134r879559_rule,STIG-ID|EP11-00-001000,STIG-Legacy|SV-109399,STIG-Legacy|V-100295,SWIFT-CSCv1|6.4,Vuln-ID|V-224134",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW edb_audit;",
        "sql_expect": "^(csv|xml)$"
    },
    "custom_item_5": {
        "description": "EP11-00-001200 - The EDB Postgres Advanced Server must generate audit records for DoD-defined auditable events.",
        "info": "The EDB Postgres Advanced Server must generate audit records for DoD-defined auditable events within all DBMS/database components.\n\nAudit records should contain (at a minimum):\n-Time stamps to establish when the events occurred\n-Sufficient information to establish what type of events occurred\n-Sufficient information to establish where the events occurred\n-Sufficient information to establish the sources (origins) of the events\n-Sufficient information to establish the outcome (success or failure) of the events\n-Sufficient information to establish the identity of any user/subject or process associated with the event\n\nAudit record content which may be necessary to investigate the events relating to an incident or identify those responsible for one. Audit policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know where events occurred, such as application components, modules, session identifiers, filenames, host names, and functionality.\n\nThe list of minimum DoD-defined audit events includes:\n-When privileges/permissions are retrieved, added, modified or deleted\n-When unsuccessful attempts to retrieve, add, modify, delete privileges/permissions occur\n-Enforcement of access restrictions associated with changes to the configuration of the database(s)\n-When security objects are accessed, modified, or deleted\n-When unsuccessful attempts to access, modify, or delete security objects occur\n-When categories of information (e.g., classification levels/security levels) are accessed, created, modified, or deleted\n-When unsuccessful attempts to access, create, modify, or delete categorized information occur\n-All privileged activities or other system-level access\n-When unsuccessful attempts to execute privileged activities or other system-level access occur\n-When successful or unsuccessful access to objects occur\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.\n\nSatisfies: SRG-APP-000095-DB-000039, SRG-APP-000091-DB-000325, SRG-APP-000096-DB-000040, SRG-APP-000097-DB-000041, SRG-APP-000098-DB-000042, SRG-APP-000099-DB-000043, SRG-APP-000100-DB-000201, SRG-APP-000381-DB-000361, SRG-APP-000492-DB-000332, SRG-APP-000492-DB-000333, SRG-APP-000494-DB-000344, SRG-APP-000494-DB-000345, SRG-APP-000495-DB-000326, SRG-APP-000495-DB-000327, SRG-APP-000495-DB-000328, SRG-APP-000495-DB-000329, SRG-APP-000496-DB-000334, SRG-APP-000496-DB-000335, SRG-APP-000498-DB-000346, SRG-APP-000498-DB-000347, SRG-APP-000499-DB-000330, SRG-APP-000499-DB-000331, SRG-APP-000501-DB-000336, SRG-APP-000501-DB-000337, SRG-APP-000502-DB-000348, SRG-APP-000502-DB-000349, SRG-APP-000504-DB-000354, SRG-APP-000504-DB-000355, SRG-APP-000507-DB-000356, SRG-APP-000507-DB-000357",
        "solution": "Execute the following SQL as enterprisedb:\n\nALTER SYSTEM SET edb_audit_statement = 'all';\nSELECT pg_reload_conf();\n\nor\n\nUpdate the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.4.5,800-53|AU-3,800-53|AU-12c.,800-53|CM-5(1),800-53r5|AU-3,800-53r5|AU-12c.,800-53r5|CM-5(1),CAT|II,CCI|CCI-000131,CCI|CCI-000134,CCI|CCI-000172,CCI|CCI-001487,CCI|CCI-001814,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.IP-1,CSF|PR.PT-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-3,ITSG-33|AU-12c.,ITSG-33|CM-5(1),NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SM8,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-224136r879561_rule,STIG-ID|EP11-00-001200,STIG-Legacy|SV-109403,STIG-Legacy|V-100299,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-224136",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW edb_audit_statement;",
        "sql_expect": "all"
    },
    "custom_item_6": {
        "description": "edb_audit",
        "sql_request": "SHOW edb_audit;",
        "sql_expect": "^(csv|xml)$"
    },
    "custom_item_7": {
        "description": "edb_audit_statement",
        "sql_request": "SHOW edb_audit_statement;",
        "sql_expect": "all"
    },
    "custom_item_8": {
        "description": "EP11-00-002200 - The EDB Postgres Advanced Server must include additional, more detailed, organization-defined information in the audit records for audit events identified by type, location, or subject.",
        "info": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise.\n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of group account users.\n\nIn EnterpriseDB Postgres Plus Advanced Server, the edb_audit_tag can be used to record additional information. This tag can be set to different values by different sessions (connections), and can be set to new values any number of times. How to recognize the conditions for producing such audit data must be determined and coded for as part of application and database design.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Execute the following SQL to set additional detailed information for the audit records in the session:\n\n set edb_audit_tag = '';\n\nReplacewith a character string holding the additional data that must be captured.\n\nTo set this in a trigger, an example is included below. Keep in mind that the edb_audit_tag is set for the life of the session, not just the life of the insert command:\n\nCREATE OR REPLACE FUNCTION add_audit_info()\nRETURNS trigger AS\n$BODY\n$BEGIN\nSET edb_audit_tag = '';\nRETURN NEW;\nEND;\n$BODY\n$LANGUAGE plpgsql;\n\nCREATE TRIGGER add_audit_info_trigger\nBEFORE INSERT\nONFOR EACH ROW\nEXECUTE PROCEDURE add_audit_info();",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3(1),800-53r5|AU-3(1),CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(b),CSF|PR.PT-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3(1),NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-224145r879569_rule,STIG-ID|EP11-00-002200,STIG-Legacy|SV-109421,STIG-Legacy|V-100317,SWIFT-CSCv1|6.4,Vuln-ID|V-224145",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW edb_audit_tag;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_9": {
        "description": "EP11-00-003210 - EDB Postgres Advanced Server software modules, to include stored procedures, functions, and triggers must be monitored to discover unauthorized changes.",
        "info": "If the system were to allow any user to make changes to software modules implemented within the database, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications. Monitoring is required for assurance that the protections are effective.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Regularly run a check similar to this:\n\nmove\\latest.schema\\previous.schema\n\nC:\\Program Files\\edb\\as\\bin\\pg_dump -s -d edb -f\\latest.schema\n\nFC\\previous.schema\\latest.schema\n\nIf any differences are shown, ensure the differences are expected.",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-224155r879586_rule,STIG-ID|EP11-00-003210,STIG-Legacy|SV-109441,STIG-Legacy|V-100337,Vuln-ID|V-224155",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT * FROM pg_stat_database;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_10": {
        "description": "EP11-00-003500 - Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to the EDB Postgres Advanced Server, etc.) must be owned by database/EDB Postgres Advanced Server principals authorized for ownership.",
        "info": "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Assign ownership of authorized objects to authorized object owner accounts by running this SQL command for each object to be changed:\n\nALTEROWNER TO;\n\nFor example: ALTER TABLE my_table OWNER TO APP_USER;",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-224158r879586_rule,STIG-ID|EP11-00-003500,STIG-Legacy|SV-109447,STIG-Legacy|V-100343,Vuln-ID|V-224158",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "select owner, schema_name, object_name from sys.all_objects where not lower(owner) = lower('@PG_OWNER@');"
    },
    "custom_item_11": {
        "description": "EP11-00-003700 - Default, demonstration and sample databases, database objects, and applications must be removed.",
        "info": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nDBMSs must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the DBMS and host system.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Remove any unused sample databases or sample objects within a database from the DBMS.\n\nTo remove a database, execute the follow SQL:\n\n DROP DATABASE;\n\nTo remove objects within a database, use the appropriate DROP statement (DROP TABLE, DROP VIEW, etc.).",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-224160r879587_rule,STIG-ID|EP11-00-003700,STIG-Legacy|SV-109451,STIG-Legacy|V-100347,SWIFT-CSCv1|2.3,Vuln-ID|V-224160",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT datname FROM pg_database WHERE datistemplate = false;"
    },
    "custom_item_12": {
        "description": "port",
        "sql_request": "SHOW port;",
        "sql_expect": "^(@PG_PORTS@)$"
    },
    "custom_item_13": {
        "description": "address",
        "sql_request": "SHOW listen_addresses;",
        "sql_expect": "^(([1-9][0-9]{1,2}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|localhost|::1|[0-9A-Fa-f:]{4,128}),?)+$"
    },
    "custom_item_14": {
        "description": "EP11-00-004250 - If DBMS authentication, using passwords, is employed, EDB Postgres Advanced Server must enforce the DoD standards for password complexity and lifetime.",
        "info": "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.\n\nThe DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For other DBMSs, the rules must be enforced using available configuration parameters or custom code.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "After creating a password verification function, configure the default profile to use it and to the other required password related settings.\n\nTo facilitate checking that a new password is sufficiently different from a previously used one, the dod_verify_password function uses the Levenshtein function, which is available as part of the PostgreSQL fuzzystrmatch extension.\n\nBefore creating the password verification function, check whether the fuzzystrmatch extension is installed by executing the following SQL query as enterprisedb:\n\n SELECT extname FROM pg_extension;\n\nIf 'fuzzystrmatch' is not listed, execute the following SQL to install the extension as enterprisedb:\n\n CREATE EXTENSION fuzzystrmatch;\n\nWith the fuzzystrmatch extension installed, execute the following SQL statements as enterprisedb:\n\n CREATE OR REPLACE FUNCTION sys.dod_verify_password(user_name varchar2, new_password varchar2, old_password varchar2)\n RETURN boolean IMMUTABLE\n IS\n pwd_length integer := NVL( length(new_password), 0 );\n\n min_length integer := 15;\n min_lower integer := 1;\n min_upper integer := 1;\n min_numeric integer := 1;\n min_special integer := 1;\n min_diff integer := ceil(min_length::numeric / 2);\n\n cnt_lower integer := 0;\n cnt_upper integer := 0;\n cnt_numeric integer := 0;\n cnt_special integer := 0;\n\n cnt_diff integer := 0;\n\n i integer ;\n curr_char CHAR(1);\n\n BEGIN\n\n --\n -- Check Length of new password\n --\n IF ( pwd_length < min_length )\n THEN\n raise_application_error(-20001, 'Password is too short. Password must be at least '||min_length||' characters long.');\n END IF;\n\n --\n -- Get count of each character type in new password.\n --\n FOR i in 1..pwd_length LOOP\n curr_char := substr(new_password, i, 1);\n\n IF ( curr_char SIMILAR TO '[a-z]' ) THEN\n cnt_lower := cnt_lower + 1;\n ELSIF ( curr_char SIMILAR TO '[A-Z]' ) THEN\n cnt_upper := cnt_upper + 1;\n ELSIF ( curr_char SIMILAR TO '[0-9]' ) THEN\n cnt_numeric := cnt_numeric + 1;\n ELSE\n cnt_special := cnt_special + 1;\n END IF;\n END LOOP;\n\n --\n -- Calculate Levenshtein difference between old and new password\n --\n cnt_diff := levenshtein( old_password, new_password );\n\n -- Check if new password has minimum number of lowercase characters\n IF cnt_lower < min_lower THEN\n raise_application_error(-20004, 'Password must contain at least '||min_lower||' lowercase character(s)');\n END IF;\n\n -- Check if new password has minimum number of uppercase characters\n IF cnt_upper < min_upper THEN\n raise_application_error(-20003, 'Password must contain at least '||min_upper||' uppercase character(s)');\n END IF;\n\n -- Check if new password has minimum number of numeric characters\n IF cnt_numeric < min_numeric THEN\n raise_application_error(-20005, 'Password must contain at least '||min_numeric||' numeric character(s)');\n END IF;\n\n -- Check if new password has minimum number of special characters\n IF cnt_special < min_special THEN\n raise_application_error(-20006, 'Password must contain at least '||min_special||' special character(s)');\n END IF;\n\n -- Check if new password differs from old password by minimum number of required characters\n IF cnt_diff < min_diff THEN\n raise_application_error(-20007, 'Password must differ from old password by at least '||min_diff||' character(s)');\n END IF;\n\n\n RETURN true;\n END;\n\n ALTER FUNCTION sys.dod_verify_password(varchar2, varchar2, varchar2) OWNER TO enterprisedb;\n\nNext, execute the following statement (or a variant of this) to set the default profile for DoD standards:\n\n ALTER PROFILE DEFAULT LIMIT\n FAILED_LOGIN_ATTEMPTS 3\n PASSWORD_LOCK_TIME 1\n PASSWORD_LIFE_TIME 60\n PASSWORD_GRACE_TIME 3\n PASSWORD_REUSE_TIME 180\n PASSWORD_REUSE_MAX 5\n PASSWORD_VERIFY_FUNCTION dod_verify_password;\n\nNote that the above statement assumes that the password verification function is named 'dod_verify_password'. If the function was created with a different name, update the ALTER PROFILE statement above as appropriate.",
        "reference": "800-171|3.5.7,800-53|IA-5(1)(a),800-53r5|IA-5(1)(a),CAT|I,CCI|CCI-000192,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(a),NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-224166r879601_rule,STIG-ID|EP11-00-004250,STIG-Legacy|SV-109463,STIG-Legacy|V-100359,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4,Vuln-ID|V-224166",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "select * from dba_profiles;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_15": {
        "description": "EP11-00-004300 - If passwords are used for authentication, the EDB Postgres Advanced Server must store only hashed, salted representations of passwords.",
        "info": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the DBMS.\n\nIn Postgres, encrypted passwords may be generated and stored using either MD5 or SRAM-SHA-256 encryption algorithms. The Postgres password_encryption parameter identifies which algorithm is being used by the Postgres cluster (i.e., instance). In general, MD5 is not approved for use within DoD systems. However, SCRAM-SHA-256 is approved for use within the DoD.",
        "solution": "Execute the following SQL as enterprisedb:\n\n ALTER SYSTEM SET password_encryption = 'scram-sha-256';\n SELECT pg_reload_conf();",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CAT|I,CCI|CCI-000196,CSF|PR.AC-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-224167r879608_rule,STIG-ID|EP11-00-004300,STIG-Legacy|SV-109465,STIG-Legacy|V-100361,SWIFT-CSCv1|4.1,TBA-FIISB|26.1,Vuln-ID|V-224167",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW password_encryption;",
        "sql_expect": "scram-sha-256"
    },
    "custom_item_16": {
        "description": "EP11-00-004900 - The EDB Postgres Advanced Server must use NIST FIPS 140-2 or 140-3 validated cryptographic modules for all cryptographic operations including generation of cryptographic hashes and data protection - version",
        "info": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 or 140-3 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.\n\nThe standard for validating cryptographic modules will transition to the NIST FIPS 140-3 publication.\n\nFIPS 140-2 modules can remain active for up to 5 years after validation or until September 21, 2026, when the FIPS 140-2 validations will be moved to the historical list.  Even on the historical list, CMVP supports the purchase and use of these modules for existing systems. While Federal Agencies decide when they move to FIPS 140-3 only modules, purchasers are reminded that for several years there may be a limited selection of FIPS 140-3 modules from which to choose. CMVP recommends purchasers consider all modules that appear on the Validated Modules Search Page:\nhttps://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules\n\nMore information on the FIPS 140-3 transition can be found here:\nhttps://csrc.nist.gov/Projects/fips-140-3-transition-effort/\n\nWhen the EDB FIPS 140 certified cryptographic modules are configured properly, an EDB Postgres Advanced Server will fail to start if non-FIPS 140 ciphers are specified for the Postgres ssl_ciphers parameter. To test whether the FIPS 140 compliant configuration is working, temporarily set the 'ssl_ciphers' parameter in the postgresql.conf file to 'RC4-SHA' and then attempt to restart the database service. Since 'RC4-SHA' is not a FIPS 140 approved cipher, the database will fail to start. Using the Event Viewer in Windows, a 'FATAL: could not set the cipher list (no valid ciphers available)' error will be found under 'Event Viewer (Local) >> Windows Logs >> Application'.\n\nSatisfies: SRG-APP-000179-DB-000114,SRG-APP-000514-DB-000382,SRG-APP-000514-DB-000383",
        "solution": "Edit\\pg_hba.conf so that each uncommented line starts with 'hostssl'\n\nIf the EDB Postgres Advanced Server minor version is less than version 11.6, install the 11.6 update or later version or contact EnterpriseDB to obtain a copy of the FIPS 140 compliant versions of the 'ssleay32.dll' and 'libeay32.dll' files and replace the 'ssleay32.dll' and 'libeay32.dll' files in\\bin with FIPS 140 compliant DLLs from EnterpriseDB. If the EDB Postgres Advanced Server minor version is 11.6 or greater, the FIPS 140 compliant versions of these DLLs are installed by default and do not need to be replaced.\n\nCreate C:\\usr\\local\\ssl\\openssl.cnf or another file referenced by a System Environment variable called OPENSSL_CONF with these contents:\n\nHOME = .\nRANDFILE = $ENV::HOME/.rnd\nopenssl_conf=openssl_conf_section\n[openssl_conf_section]\nalg_section=evp_settings\n[evp_settings]\nfips_mode=yes\n\nRestart the Postgres server via the Services administration GUI.",
        "reference": "800-171|3.13.11,800-53|IA-7,800-53|SC-13,800-53r5|IA-7,800-53r5|SC-13,CAT|I,CCI|CCI-000803,CCI|CCI-002450,CSF|PR.DS-5,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|IA-7,ITSG-33|IA-7a.,ITSG-33|SC-13,ITSG-33|SC-13a.,NESA|M5.2.1,NESA|M5.2.6,NESA|M5.3.1,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2,QCSC-v1|13.2,Rule-ID|SV-224174r879616_rule,STIG-ID|EP11-00-004900,STIG-Legacy|SV-109477,STIG-Legacy|V-100373,Vuln-ID|V-224174",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "select version()",
        "sql_expect": "^[\\\\s]*PostgreSQL 11\\.([6-9]|[1-9][0-9])"
    },
    "custom_item_17": {
        "description": "EP11-00-005600 - In the event of a system failure, the DBMS must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes.",
        "info": "Failure to a known state can address safety or security in accordance with the mission/business needs of the organization.\n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system.\n\nPreserving information system state information helps to facilitate system restart and return to the operational mode of the organization with less disruption of mission/business processes.\n\nSince it is usually not possible to test this capability in a production environment, systems should either be validated in a testing environment or prior to installation. This requirement is usually a function of the design of the IDPS component. Compliance can be verified by acceptance/validation processes or vendor attestation.\n\nAt all times, Postgres maintains a write ahead log (WAL) in the pg_wal/ subdirectory of the cluster's data directory. The log records every change made to the database's data files. This log exists primarily for crash-safety purposes: if the system crashes, the database can be restored to consistency by 'replaying' the log entries made since the last checkpoint. Under the covers, Postgres uses fsync system calls to help ensure that modified database information held in memory is written to disk. To support certain specialized use cases where crash recovery is not as important as system performance, Postgres provides an fsync parameter that can be set to 'off' to disable the use of fsync. By default, this parameter is set to 'on' and except for the rare use cases should not be set to 'off'.\n\nTo support being able to determine what may have caused a database failure, Postgres inherently logs failures.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "To set the fsync parameter to 'on', connect to the database as a database superuser using psql and execute the following SQL commands:\n\n ALTER SYSTEM SET fsync = on;\n\n SELECT pg_reload_conf();",
        "reference": "800-53|SC-24,800-53r5|SC-24,CAT|II,CCI|CCI-001665,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-24,ITSG-33|SC-24a.,QCSC-v1|5.2.1,Rule-ID|SV-224177r879641_rule,STIG-ID|EP11-00-005600,STIG-Legacy|SV-109481,STIG-Legacy|V-100377,Vuln-ID|V-224177",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW fsync;",
        "sql_expect": "on"
    },
    "custom_item_18": {
        "description": "Check if sqlprotect.list_protected_users table exists",
        "sql_request": "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';",
        "sql_expect": "sqlprotect"
    },
    "custom_item_19": {
        "description": "EP11-00-006200 - The EDB Postgres Advanced Server must check the validity of all data inputs except those specifically identified by the organization.",
        "info": "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that is recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Modify database code to properly validate data before it is put into the database or acted upon by the database.\n\nModify the database to contain column/field definitions for each column/field in the database.\n\nModify the database to contain constraints and validity checking on database columns and tables that require them for data integrity.\n\nUse prepared statements for user supplied inputs.\n\nDo not allow general users direct console access to the EDB Postgres Advanced Server database.\n\nIf EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:\n\n https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#",
        "reference": "800-53|SI-10,800-53r5|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-224182r879652_rule,STIG-ID|EP11-00-006200,STIG-Legacy|SV-109491,STIG-Legacy|V-100387,Vuln-ID|V-224182",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT * FROM sqlprotect.list_protected_users;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_20": {
        "description": "Check if sqlprotect.list_protected_users table exists",
        "sql_request": "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';",
        "sql_expect": "sqlprotect"
    },
    "custom_item_21": {
        "description": "EP11-00-006300 - The EDB Postgres Advanced Server and associated applications must reserve the use of dynamic code execution for situations that require it.",
        "info": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so.\n\nIf EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:\n\n https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#",
        "reference": "800-53|SI-10,800-53r5|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-224183r879652_rule,STIG-ID|EP11-00-006300,STIG-Legacy|SV-109493,STIG-Legacy|V-100389,Vuln-ID|V-224183",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT * FROM sqlprotect.list_protected_users;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_22": {
        "description": "Check if sqlprotect.list_protected_users table exists",
        "sql_request": "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';",
        "sql_expect": "sqlprotect"
    },
    "custom_item_23": {
        "description": "EP11-00-006400 - The EDB Postgres Advanced Server and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack.",
        "info": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary.\n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */\n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, and REVOKE will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly 'Grant' (as a person's name), could also be valid input.\n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Where dynamic code execution is used, modify the code to implement protections against code injection (i.e., prepared statements).\n\nIf EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:\n\n https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#",
        "reference": "800-53|SI-10,800-53r5|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-224184r879652_rule,STIG-ID|EP11-00-006400,STIG-Legacy|SV-109495,STIG-Legacy|V-100391,Vuln-ID|V-224184",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT * FROM sqlprotect.list_protected_users;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_24": {
        "description": "Check if security labeling is required",
        "sql_request": "SELECT lower('@LABELING_REQUIRED@') as answer;",
        "sql_expect": "yes"
    },
    "custom_item_25": {
        "description": "EP11-00-006900 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in storage.",
        "info": "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.\n\nIn addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row-level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements, and application code, to provide reliable security labeling of information in storage.\n\nhttps://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|II,CCI|CCI-002262,CSF|PR.AC-4,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-224188r879689_rule,STIG-ID|EP11-00-006900,STIG-Legacy|SV-109503,STIG-Legacy|V-100399,Vuln-ID|V-224188",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_26": {
        "description": "Check if security labeling is required",
        "sql_request": "SELECT lower('@LABELING_REQUIRED@') as answer;",
        "sql_expect": "yes"
    },
    "custom_item_27": {
        "description": "EP11-00-007000 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in process.",
        "info": "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.\n\nIn addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in process.\n\nhttps://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|II,CCI|CCI-002263,CSF|PR.AC-4,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-224189r879690_rule,STIG-ID|EP11-00-007000,STIG-Legacy|SV-109505,STIG-Legacy|V-100401,Vuln-ID|V-224189",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_28": {
        "description": "Check if security labeling is required",
        "sql_request": "SELECT lower('@LABELING_REQUIRED@') as answer;",
        "sql_expect": "yes"
    },
    "custom_item_29": {
        "description": "EP11-00-007100 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in transmission.",
        "info": "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.\n\nIn addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission.\n\nhttps://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|II,CCI|CCI-002264,CSF|PR.AC-4,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-224190r879691_rule,STIG-ID|EP11-00-007100,STIG-Legacy|SV-109507,STIG-Legacy|V-100403,Vuln-ID|V-224190",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_30": {
        "description": "EP11-00-007500 - Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only.",
        "info": "In certain situations, to provide required functionality, a DBMS must execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Determine where, when, how, and by what principals/subjects elevated privilege is needed.\n\nModify the system and the application(s) using the database to ensure privilege elevation is used only as required.\n\nTo alter a function to use SECURITY INVOKER instead of SECURITY DEFINER, execute the following SQL:\n\nALTER FUNCTIONSECURITY INVOKER;",
        "reference": "800-171|3.1.5,800-53|AC-6(8),800-53r5|AC-6(8),CAT|II,CCI|CCI-002233,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-224193r879719_rule,STIG-ID|EP11-00-007500,STIG-Legacy|SV-109511,STIG-Legacy|V-100407,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-224193",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "select proname from pg_proc where prosecdef = true;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_31": {
        "description": "EP11-00-007510 - Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only.",
        "info": "In certain situations, to provide required functionality, a DBMS must execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Determine where, when, how, and by what principals/subjects elevated privilege is needed.\n\nModify the system and the application(s) using the database to ensure privilege elevation is used only as required.\n\nTo alter a user to not allow bypassing RLS, execute the following SQL:\n\nALTER USERNOBYPASSRLS;",
        "reference": "800-171|3.1.5,800-53|AC-6(8),800-53r5|AC-6(8),CAT|II,CCI|CCI-002233,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-224194r879719_rule,STIG-ID|EP11-00-007510,STIG-Legacy|SV-109513,STIG-Legacy|V-100409,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-224194",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "select rolname from pg_roles where rolbypassrls = true;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_32": {
        "description": "EP11-00-009500 - The EDB Postgres Advanced Server must maintain the confidentiality and integrity of information during preparation for transmission.",
        "info": "Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process.\n\nWhen transmitting data, the DBMS, associated applications, and infrastructure must leverage transmission protection mechanisms.\n\nEDB Postgres Advanced Server provides native support for using SSL connections to encrypt client/server communications. To enable the use of SSL, the postgres 'ssl' configuration parameter must be set to 'on' and the database instance needs to be configured to use a valid server certificate and private key installed on the server. With SSL enabled, connections made to the database server will default to being encrypted. However, it is possible for clients to override the default and attempt to establish an unencrypted connection. To prevent connections made from non-local hosts from being unencrypted, the postgres host-based authentication settings should be configured to only allow hostssl (i.e., encrypted) connections. The hostssl connections can be further configured to require the client present a valid (trusted) SSL certificate for a connection.",
        "solution": "To configure EDB Postgres Advanced Server to use SSL, open the 'postgresql.conf' file in an editor. Note the default location for the postgresql.conf file is in the postgresql data directory. The location of the postgresql.conf for a running EDB Postgres instance can be found by connecting to the database as a database superuser using psql and executing the following command:\n\n   SHOW config_file;\n\nIn the postgresql.conf file, set the 'ssl' parameter as follows:\n\n   ssl = on\n\nMake sure the parameter is uncommented.\n\nIn order to start an EDB Postgres Advance Server instance in SSL mode, files containing the server certificate and private key must exist. By default, these files are expected to exist in the Postgres data directory and are expected to be named server.crt and server.key, respectively. Update the ssl_cert_file and ssl_cert_key parameters in the postgresql.conf file if the files are placed in a different location or are named differently.\nNote that changes to the ssl parameter setting and any of the other ssl related parameters require a reload of the database server configuration to put the changes into effect.\nTo reload the database server configuration, connect to the database as a database superuser using psql and execute the following command:\n   SELECT pg_reload_conf();\nAfter verifying that SSL is enabled for the database, open the pg_hba.conf file in an editor to configure the host-based authentication settings. Note the default location for the pg_hba.conf file is in the postgresql data directory. The location of the pg_hba.conf file for a running EDB postgres instance can be found by connecting to the database as a database superuser using psql and execute the following command:\n   SHOW hba_file;\n\nObtain approval and document any uncommented entries with corresponding justification that are not of type hostssl and do not include the 'clientcert=1' option.\n\nFor any entries that are not of type hostssl authentication with the 'clientcert=1' option and not documented and approved, change the 'TYPE' column to 'hostssl' and add the 'clientcert=1' authentication method option.\n\nNote on Microsoft Windows systems, changes to the host-based authentication settings in the pg_hba.conf file are immediately applied by subsequent new connections.\n\nFor more information on configuring PostgreSQL to use SSL, consult the following documentation:\nhttps://www.postgresql.org/docs/current/ssl-tcp.html\n\nFor more information on configuring the postgresql pg_hba.conf file, consult the following documentation:\nhttps://www.postgresql.org/docs/current/auth-pg-hba-conf.html",
        "reference": "800-171|3.13.8,800-53|SC-8(2),800-53r5|SC-8(2),CAT|II,CCI|CCI-002420,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.DS-2,CSF|PR.DS-5,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8(2),ITSG-33|SC-9(2),NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-224208r879812_rule,STIG-ID|EP11-00-009500,STIG-Legacy|SV-109541,STIG-Legacy|V-100437,SWIFT-CSCv1|2.1,Vuln-ID|V-224208",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW ssl;",
        "sql_expect": "on"
    },
    "custom_item_33": {
        "description": "EP11-00-009600 - The EDB Postgres Advanced Server must maintain the confidentiality and integrity of information during reception.",
        "info": "Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data non-locally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process.\n\nWhen receiving data, the DBMS, associated applications, and infrastructure must leverage protection mechanisms.\n\nEDB Postgres Advanced Server provides native support for using SSL connections to encrypt client/server communications. To enable the use of SSL, the postgres 'ssl' configuration parameter must be set to 'on' and the database instance needs to be configured to use a valid server certificate and private key installed on the server. With SSL enabled, connections made to the database server will default to being encrypted. However, it is possible for clients to override the default and attempt to establish an unencrypted connection. To prevent connections made from non-local hosts from being unencrypted, the postgres host-based authentication settings should be configured to only allow hostssl (i.e., encrypted) connections. The hostssl connections can be further configured to require the client present a valid (trusted) SSL certificate for a connection.",
        "solution": "To configure EDB Postgres Advanced Server to use SSL, open the 'postgresql.conf' file in an editor. Note the default location for the postgresql.conf file is in the postgresql data directory. The location of the postgresql.conf for a running EDB Postgres instance can be found by connecting to the database as a database superuser using psql and executing the following command:\n\n   SHOW config_file;\n\nIn the postgresql.conf file, set the 'ssl' parameter as follows:\n\n   ssl = on\n\nMake sure the parameter is uncommented.\n\nIn order to start an EDB Postgres Advanced Server instance in SSL mode, files containing the server certificate and private key must exist. By default, these files are expected to exist in the Postgres data directory and are expected to be named server.crt and server.key, respectively. Update the ssl_cert_file and ssl_cert_key parameters in the postgresql.conf file if the files are placed in a different location or are named differently.\nNote changes to the ssl parameter setting and any of the other ssl related parameters require a reload of the database server configuration to put the changes into effect.\nTo reload the database server configuration, connect to the database as a database superuser using psql and execute the following command:\n   SELECT pg_reload_conf();\nAfter verifying SSL is enabled for the database, open the pg_hba.conf file in an editor to configure the host-based authentication settings. Note the default location for the pg_hba.conf file is in the postgresql data directory. The location of the pg_hba.conf file for a running EDB postgres instance can be found by connecting to the database as a database superuser using psql and execute the following command:\n   SHOW hba_file;\nObtain approval and document any uncommented entries with corresponding justification that are not of type hostssl and do not include the 'clientcert=1' option.\n\nFor any entries that are not of type hostssl authentication with the 'clientcert=1' option and not documented and approved, change the 'TYPE' column to 'hostssl' and add the 'clientcert=1' authentication method option.\n\nNote that on Microsoft Windows systems, changes to the host-based authentication settings in the pg_hba.conf file are immediately applied by subsequent new connections.\n\nFor more information on configuring PostgreSQL to use SSL, consult the following documentation:\nhttps://www.postgresql.org/docs/current/ssl-tcp.html\n\nFor more information on configuring the postgresql pg_hba.conf file, consult the following documentation:\nhttps://www.postgresql.org/docs/current/auth-pg-hba-conf.html",
        "reference": "800-171|3.13.8,800-53|SC-8(2),800-53r5|SC-8(2),CAT|II,CCI|CCI-002422,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.DS-2,CSF|PR.DS-5,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8(2),ITSG-33|SC-9(2),NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-224209r879813_rule,STIG-ID|EP11-00-009600,STIG-Legacy|SV-109543,STIG-Legacy|V-100439,SWIFT-CSCv1|2.1,Vuln-ID|V-224209",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW ssl;",
        "sql_expect": "on"
    },
    "custom_item_34": {
        "description": "Check if sqlprotect.list_protected_users table exists",
        "sql_request": "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';",
        "sql_expect": "sqlprotect"
    },
    "custom_item_35": {
        "description": "EP11-00-009700 - When invalid inputs are received, the EDB Postgres Advanced Server must behave in a predictable and documented manner that reflects organizational and system objectives.",
        "info": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Revise and deploy the source code for database program objects (stored procedures, functions, triggers) and application source code, to implement the documented behavior.\n\nTo enable EDB Auditing, execute the following SQL statements as the enterprisedb user:\n\n ALTER SYSTEM SET edb_audit = csv;\n SELECT pg_reload_conf();\n\nor\n\n ALTER SYSTEM SET edb_audit = xml;\n SELECT pg_reload_conf();\n\nTo configure the edb_audit_statement parameter, execute the following SQL statements as the enterprisedb user:\n\n ALTER SYSTEM SET edb_audit_statement = 'all';\n SELECT pg_reload_conf();\n\nor\n\n Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement.\n\nIf EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from unexpected or unauthorized actions performed on database tables, install and configure SQL/Protect as documented in section 'Protecting Against SQL Injection Attacks' in the EDB Postgres Advanced Server Guide available at the following link:\n\nhttps://www.enterprisedb.com/edb-docs/p/edb-postgres-advanced-server",
        "reference": "800-53|SI-10(3),800-53r5|SI-10(3),CAT|II,CCI|CCI-002754,CN-L3|8.1.4.4(d),DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NIAv2|SS6e,Rule-ID|SV-224210r879818_rule,STIG-ID|EP11-00-009700,STIG-Legacy|SV-109545,STIG-Legacy|V-100441,Vuln-ID|V-224210",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SELECT * FROM sqlprotect.list_protected_users;",
        "sql_expect": "^Manual Review Required$"
    },
    "custom_item_36": {
        "description": "EP11-00-011800 - The EDB Postgres Advanced Server must generate audit records when successful/unsuccessful logons, connections, or connection attempts occur.",
        "info": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to the DBMS.\n\nIt is also necessary to track failed attempts to log on to the DBMS. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.\n\nSatisfies: SRG-APP-000503-DB-000350,SRG-APP-000503-DB-000351",
        "solution": "Execute the following SQL as enterprisedb:\n\n ALTER SYSTEM SET edb_audit_connect = 'all';\n SELECT pg_reload_conf();\n\nor\n\nUpdate the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-224232r879874_rule,STIG-ID|EP11-00-011800,STIG-Legacy|SV-109589,STIG-Legacy|V-100485,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-224232",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW edb_audit_connect;",
        "sql_expect": "all"
    },
    "custom_item_37": {
        "description": "edb_audit_connect",
        "sql_request": "SHOW edb_audit_connect;",
        "sql_expect": "all"
    },
    "custom_item_38": {
        "description": "edb_audit_disconnect",
        "sql_request": "SHOW edb_audit_disconnect;",
        "sql_expect": "all"
    },
    "custom_item_39": {
        "description": "edb_audit_statement",
        "sql_request": "SHOW edb_audit_statement;",
        "sql_expect": "all"
    },
    "custom_item_40": {
        "description": "edb_audit_connect",
        "sql_request": "SHOW edb_audit_connect;",
        "sql_expect": "all"
    },
    "custom_item_41": {
        "description": "edb_audit_disconnect",
        "sql_request": "SHOW edb_audit_disconnect;",
        "sql_expect": "all"
    },
    "custom_item_42": {
        "description": "EP11-00-013300 - EDB Postgres Advanced Server v11 products must be a version supported by the vendor.",
        "info": "Unsupported commercial and database systems should not be used because fixes to newly identified bugs will not be implemented by the vendor. The lack of support can result in potential vulnerabilities.\n\nSystems at unsupported servicing levels or releases will not receive security updates for new vulnerabilities, which leaves them subject to exploitation.\n\nWhen maintenance updates and patches are no longer available, the database software is no longer considered supported and should be upgraded or decommissioned.",
        "solution": "Remove or decommission all unsupported software products.\n\nUpgrade unsupported DBMS or unsupported components to a supported version of the product.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "reference": "800-53|SA-22a.,800-53r5|SA-22a.,CAT|I,CCI|CCI-003376,DISA_Benchmark|EDB_Postgres_Advanced_Server_v11_on_Windows_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),Rule-ID|SV-259795r947231_rule,STIG-ID|EP11-00-013300,Vuln-ID|V-259795",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V2R3_STIG.zip",
        "sql_request": "SHOW SERVER_VERSION",
        "sql_expect": "^Manual Review Required$"
    }
}