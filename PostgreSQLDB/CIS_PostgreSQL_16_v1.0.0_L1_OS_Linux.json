{
    "custom_item_1": {
        "description": "Linux found",
        "cmd": "uname -a",
        "expect": "Linux"
    },
    "custom_item_2": {
        "description": "1.1 Ensure packages are obtained from authorized repositories",
        "info": "Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though).\n\nWhen obtaining and installing software packages (typically via dnf or apt), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, the canonical repositories are the official PostgreSQL YUM repository (yum.postgresql.org) and the official PostgreSQL APT repository (apt.postgresql.org). Your chosen PostgreSQL vendor may offer its own software repositories as well.\n\nRationale:\n\nBeing open-source, PostgreSQL packages are widely available across the internet through package aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective, or malicious software.\n\nMany organizations choose to implement a local software repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories.\n\nFrom a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid software repository. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from dnf provides '*libpq.so' or apt-file search /usr/pgsql-16/lib/libpq.so.5.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Alter the configured repositories so they only include valid and authorized sources of packages.\n\nAs an example of adding an authorized repository, we will install the PGDG repository RPM from 'yum.postgresql.org':\n\n# whoami\nroot\n# dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\nLast metadata expiration check: 0:01:35 ago on Mon 03 Oct 2022 01:19:37 PM EDT.\n[snip]\nInstalled:\n  pgdg-redhat-repo-42.0-35PGDG.noarch\n\nComplete!\n# whoami\nroot\n# dnf repolist all | egrep 'enabled$'\npgdg-common                                        PostgreSQL common  enabled\npgdg11                                             PostgreSQL 11 for  enabled\npgdg12                                             PostgreSQL 12 for  enabled\npgdg13                                             PostgreSQL 13 for  enabled\npgdg14                                             PostgreSQL 14 for  enabled\npgdg15                                             PostgreSQL 15 for  enabled\npgdg16                                             PostgreSQL 16 for  enabled\nrhel-9-for-x86_64-appstream-rpms                   Red Hat Enterprise enabled\nrhel-9-for-x86_64-baseos-rpms                      Red Hat Enterprise enabled\n\nIf the version of PostgreSQL installed is not 16.x or they did not come from a valid repository, the packages may be uninstalled using this command:\n\n# whoami\nroot\n# dnf remove $(rpm -qa|grep postgres)\n\nTo install the PGDG RPMs for PostgreSQL 1.x, run:\n\n# whoami\nroot\n# dnf install -y postgresql16-{server,contrib}Installed:postgresql16-16.0-1PGDG.rhel9.x86_64                     postgresql16-contrib-16.0-1PGDG.rhel9.x86_64\n  postgresql16-libs-16.0-1PGDG.rhel9.x86_64                postgresql16-server-16.0-1PGDG.rhel9.x86_64\nComplete!",
        "reference": "800-171|3.4.1,800-171|3.4.7,800-171|3.7.1,800-171|3.7.2,800-53|CM-7(1),800-53|CM-8,800-53|MA-3,800-53r5|CM-7(1),800-53r5|CM-8,800-53r5|MA-3,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|2.1,CSCv8|2.1,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,CSF|PR.IP-1,CSF|PR.MA-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7(1),ITSG-33|CM-8,ITSG-33|MA-3,ITSG-33|MA-3a.,LEVEL|1M,NESA|T1.2.1,NESA|T1.2.2,NESA|T2.3.4,NESA|T5.4.4,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.3,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "cmd": "dnf repolist all | grep -E 'enabled$'",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_3": {
        "description": "1.2 Ensure systemd Service Files Are Enabled",
        "info": "Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.\n\nRationale:\n\nEnabling the systemd service on the OS ensures the database service is active when a change of state occurs as in the case of a system startup or reboot.",
        "solution": "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string 'postgresql'. PGDG installs do not automatically register the service as a 'want' of the default systemd target. Multiple instances of PostgreSQL services often distinguish themselves using a version number.\n\n# whoami\nroot\n# systemctl enable postgresql-16\nCreated symlink /etc/systemd/system/multi-user.target.wants/postgresql-16.service -> /usr/lib/systemd/system/postgresql-16.service.\n# systemctl is-enabled postgresql-16.service\nenabled",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "cmd": "systemctl is-enabled postgresql-16.service",
        "expect": "^[\\\\s]*enabled[\\\\s]*$"
    },
    "custom_item_4": {
        "description": "1.3 Ensure Data Cluster Initialized Successfully",
        "info": "First-time installs of a given PostgreSQL major release require the instantiation of the database cluster. A database cluster is a collection of databases that are managed by a single server instance.\n\nRationale:\n\nFor the purposes of security, PostgreSQL enforces ownership and permissions of the data cluster such that:\n\nAn initialized data cluster is owned by the UNIX account that created it.\n\nThe data cluster cannot be accessed by other UNIX user accounts.\n\nThe data cluster cannot be created or owned by root\n\nThe PostgreSQL process cannot be invoked by root nor any UNIX user account other than the owner of the data cluster.\n\nIncorrectly instantiating the data cluster will result in a failed installation.",
        "solution": "Attempting to instantiate a data cluster to an existing non-empty directory will fail:\n\n# whoami\nroot\n# PGSETUP_INITDB_OPTIONS='-k' /usr/pgsql-16/bin/postgresql-16-setup initdb\nData directory is not empty!\n\nIn the case of a cluster instantiation failure, one must delete/remove the entire data cluster directory and repeat the initdb command:\n\n# whoami\nroot\n# rm -rf ~postgres/16\n# PGSETUP_INITDB_OPTIONS='-k' /usr/pgsql-16/bin/postgresql-16-setup initdb\nInitializing database ... OK",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "file": "@PG_DATA_DIR@",
        "mask": "077"
    },
    "custom_item_5": {
        "description": "2.1 Ensure the file permissions mask is correct",
        "info": "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask. The postgres user account should use a umask of 0077 to deny file access to all user accounts except the owner.\n\nRationale:\n\nThe Linux OS defaults the umask to 0022, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 0077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error-prone process that is not advised).",
        "solution": "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file:\n\n# whoami\npostgres\n# cd ~\n# ls -ld .{bash_profile,profile,bashrc}\nls: cannot access .profile: No such file or directory\nls: cannot access .bashrc: No such file or directory\n-rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile\n# echo 'umask 077' >> .bash_profile\n# source .bash_profile\n# umask\n0077\n\nDefault Value:\n\n0022",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "cmd": "su - postgres -c umask",
        "expect": "^[0-7]+77$"
    },
    "custom_item_6": {
        "description": "4.1 Ensure sudo is configured correctly",
        "info": "It is common to have more than one authorized individual administering the PostgreSQL service at the Operating System level. It is also quite common to permit login privileges to individuals on a PostgreSQL host who otherwise are not authorized to access the server's data cluster and files. Administering the PostgreSQL data cluster, as opposed to its data, is to be accomplished via a localhost login of a regular UNIX user account. Access to the postgres superuser account is restricted in such a manner as to interdict unauthorized access. sudo satisfies the requirements by escalating ordinary user account privileges as the PostgreSQL RDBMS superuser.\n\nRationale:\n\nWithout sudo, there would be no capabilities to strictly control access to the superuser account nor to securely and authoritatively audit its use.",
        "solution": "As superuser root, execute the following commands:\n\n# echo '%dba ALL=(postgres) PASSWD: ALL' > /etc/sudoers.d/postgres\n# chmod 600 /etc/sudoers.d/postgres\n\nThis grants any Operating System user that is a member of the dba group the ability to use sudo -iu postgres to become the postgres user.\nEnsure that all Operating System user's that need such access are members of the group.",
        "reference": "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "file": "/etc/sudoers.d/* /etc/sudoers",
        "regex": "^[\\\\s]*%dba",
        "expect": "^[\\\\s]*%dba[\\\\s]*ALL[\\\\s]*=[\\\\s]*\\\\(*postgres\\\\)*(.*?)$",
        "min_occurrences": "1"
    },
    "custom_item_7": {
        "description": "fips_enabled",
        "cmd": "cat /proc/sys/crypto/fips_enabled",
        "expect": "^1$"
    },
    "custom_item_8": {
        "description": "openssl version",
        "cmd": "openssl version",
        "expect": "((?i)openssl(?-i) 3|fips)"
    },
    "custom_item_9": {
        "description": "8.2 Ensure the backup and restore tool, 'pgBackRest', is installed and configured",
        "info": "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.\n\nRationale:\n\nThe native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs a physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility.\n\npgBackRest is open-source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per-file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental backups, local/remote operation via SSH or TLS, hard-linking, restore, backup encryption, and more. pgBackRest is written in C and does not depend on rsync or tar but instead performs its own deltas which give it maximum flexibility. Finally, pgBackRest provides an easy-to-use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.\n\n$ pgbackrest info\n\nstanza: proddb01\n\nstatus: ok\n\ndb (current)\n\n  wal archive min/max (16.0-1): 000000010000000000000012 / 000000010000000000000017\n\n      full backup: 20231012-153106F\n\n          timestamp start/stop: 2023-10-12 15:31:06 / 2023-10-12 15:31:49\n\n          wal start/stop: 000000010000000000000012 / 000000010000000000000012\n\n          database size: 29.4MB, backup size: 29.4MB\n\n          repository size: 3.4MB, repository backup size: 3.4MB\n\n      diff backup: 20231012-153106F_20231012-173109D\n\n          timestamp start/stop: 2023-10-12 17:31:09 / 2023-10-12 17:31:19\n\n          wal start/stop: 000000010000000000000015 / 000000010000000000000015\n\n          database size: 29.4MB, backup size: 2.6MB\n\n          repository size: 3.4MB, repository backup size: 346.8KB\n\n          backup reference list: 20231012-153106F\n\n      incr backup: 20231012-153106F_20231012-183114I\n\n          timestamp start/stop: 2023-10-12 18:31:14 / 2023-10-12 18:31:22\n\n          wal start/stop: 000000010000000000000017 / 000000010000000000000017\n\n          database size: 29.4MB, backup size: 8.2KB\n\n          repository size: 3.4MB, repository backup size: 519B\n\n          backup reference list: 20231012-153106F, 20231012-153106F_20231012-173109D",
        "solution": "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:\n\n# whoami\nroot\n# dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpmInstalled:\n  epel-release-9-7.el9.noarch\n\nComplete!\n# dnf -y install pgbackrestInstalled:\n  libssh2-1.10.0-1.el9.x86_64                          pgbackrest-2.48-1PGDG.rhel9.x86_64\n\nComplete!\n\nOnce installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide.\nIf employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups reside should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully.",
        "reference": "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.1,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1A,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14977",
        "rpm": "pgbackrest-0.0.0-0",
        "operator": "gt"
    }
}