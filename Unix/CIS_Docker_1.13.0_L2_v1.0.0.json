{
    "custom_item_1": {
        "description": "Check if this is a Docker Vessel/Host",
        "cmd": "/usr/bin/docker info",
        "expect": "Containers"
    },
    "custom_item_2": {
        "description": "2.9 Confirm default cgroup usage",
        "info": "The --cgroup-parent option allows you to set the default cgroup parent to use for all the containers. If there is no specific use case, this setting should be left at its default.\n\nRationale:\n\nSystem administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.\n\nIt is possible to attach to a different cgroup other than that is the default. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is a default, it is possible to share resources unevenly and thus might starve the host for resources.",
        "solution": "The default setting is good enough and can be left as-is. If you want to specifically set a non-default cgroup, pass --cgroup-parent parameter to the docker daemon when starting it.\n\nFor Example,\n\ndockerd --cgroup-parent=/foobar\n\nImpact:\n\nNone.\n\nDefault Value:\n\nBy default, docker daemon uses /docker for fs cgroup driver and system.slice for systemd cgroup driver.",
        "reference": "800-53|SC-39,800-53r5|SC-39,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2A,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "ps -ef | grep docker | grep [\\-][\\-]cgroup-parent | /usr/bin/awk \\'{print} END {if (NR == 0) print \"none\"}\\'",
        "expect": "(--cgroup-parent=@CGROUP_PARENT@|none)"
    },
    "custom_item_3": {
        "description": "2.11 Use authorization plugin",
        "info": "Use authorization plugin to manage access to Docker daemon.\n\nRationale:\n\nDockers out-of-the-box authorization model is all or nothing. Any user with permission to access the Docker daemon can run any Docker client command. The same is true for callers using Dockers remote API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization plugin, a Docker administrator can configure granular access policies for managing access to Docker daemon.",
        "solution": "Step 1: Install/Create an authorization plugin.\n\nStep 2: Configure the authorization policy as desired.\n\nStep 3: Start the docker daemon as below:\n\ndockerd --authorization-plugin=Impact:\n\nEach docker command specifically passes through authorization plugin mechanism. This might introduce a slight performance drop.\n\nDefault Value:\n\nBy default, authorization plugins are not set up.",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "ps -ef | grep docker | grep [\\-][\\-]authorization-plugin",
        "expect": "authorization-plugin=@AUTH_PLUGIN_ID@"
    },
    "custom_item_4": {
        "description": "2.12 Configure centralized and remote logging",
        "info": "Docker now supports various log drivers. A preferable way to store logs is the one that supports centralized and remote logging.\n\nRationale:\n\nCentralized and remote logging ensures that all important log records are safe despite catastrophic events. Docker now supports various such logging drivers. Use the one that suits your environment the best.",
        "solution": "Step 1: Setup the desired log driver by following its documentation.\n\nStep 2: Start the docker daemon with that logging driver.\n\nFor example,\n\ndockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx\n\nImpact:\n\nNone.\n\nDefault Value:\n\nBy default, container logs are maintained as json files",
        "reference": "800-171|3.3.8,800-53|AU-9(2),800-53r5|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9(2),LEVEL|2A,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e,PCI-DSSv3.2.1|10.5.3,PCI-DSSv3.2.1|10.5.4,PCI-DSSv4.0|10.3.3,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "ps -ef | grep docker | grep [\\-][\\-]log-driver",
        "expect": "log-driver=@LOG_DRIVER@"
    },
    "custom_item_5": {
        "description": "2.22 Use Docker's secret management commands for managing secrets in a Swarm cluster",
        "info": "Use Docker's in-built secret management command.\n\nRationale:\n\nDocker has variouscommands for managing secrets in a Swarm cluster. This is the foundation for future secret support in Docker with potential improvements such as Windows support, different backing stores, etc.\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow docker secret documentation and use it to manage secrets effectively.\n\nImpact:\n\nNone\n\nDefault Value:\n\nNot Applicable",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "docker secret ls",
        "expect": ".*"
    },
    "custom_item_6": {
        "description": "4.5 Enable Content trust for Docker",
        "info": "Content trust is disabled by default. You should enable it.\n\nRationale:\n\nContent trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the integrity and publisher of specific image tags. This ensures provenance of container images.",
        "solution": "To enable content trust in a bash shell, enter the following command:\n\nexport DOCKER_CONTENT_TRUST=1\n\nAlternatively, set this environment variable in your profile file so that content trust in enabled on every login.\n\nImpact:\n\nIn an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures while working with images - build, create, pull, push and run. You can use the --disable-content-trust flag to run individual operations on tagged images without content trust on an as-needed basis but that defeats the purpose of enabling content trust and hence, should be avoided wherever possible.\n\nNote: Content trust is currently only available for users of the public Docker Hub. It is currently not available for the Docker Trusted Registry or for private registries.\n\nDefault Value:\n\nBy default, content trust is disabled.",
        "reference": "800-53|SI-7(6),800-53r5|SI-7(6),CSF|PR.DS-6,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ITSG-33|SI-7,ITSG-33|SI-7a.,LEVEL|2A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,PCI-DSSv3.2.1|10.5.5,QCSC-v1|3.2,SWIFT-CSCv1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "echo $DOCKER_CONTENT_TRUST",
        "expect": "1"
    },
    "custom_item_7": {
        "description": "4.11 Install verified packages only",
        "info": "Verify authenticity of the packages before installing them in the image.\n\nRationale:\n\nVerifying authenticity of the packages is essential for building a secure container image. Tampered packages could potentially be malicious or have some known vulnerabilities that could be exploited.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Use GPG keys for downloading and verifying packages or any other secure package distribution mechanism of your choice.\n\nImpact:\n\nNone\n\nDefault Value:\n\nNot Applicable",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "for image in $(docker images|awk {\\'print $3\\'}); do docker history $image;done",
        "expect": ""
    },
    "custom_item_8": {
        "description": "5.2 Verify SELinux security options, if applicable",
        "info": "SELinux is an effective and easy-to-use Linux application security system. It is available on quite a few Linux distributions by default such asRed Hat and Fedora.\n\nRationale:\n\nSELinux provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model.You can thus add an extra layer of safety by enabling SELinux on your Linux host, if applicable.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "If SELinuxis applicable for your Linux OS, use it. You may have to follow below set of steps:\n\n1. Set the SELinux State.\n\n2. Set the SELinux Policy.\n\n3. Create or import a SELinux policy template for Docker containers.\n\n4. Start Docker in daemon mode with SELinux enabled. For example,\n\ndocker daemon --selinux-enabled\n\n5. Start your Docker container using the security options. For example,\n\ndocker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash\n\nImpact:\n\nThe container (process) would have set of restrictions as defined in SELinux policy. If your SELinux policy is mis-configured, then the container may not entirely work as expected.\n\n\nDefault Value:\n\nBy default, no SELinux security options are applied on containers.",
        "reference": "800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),800-53r5|AC-3(3),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3(3),LEVEL|2A,NESA|T5.5.4,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,PCI-DSSv3.2.1|7.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "/usr/bin/docker ps -q | xargs /usr/bin/docker inspect --format \\'{{ .Id }}: SecurityOpt={{json .HostConfig.SecurityOpt }}\\'",
        "expect": ""
    },
    "custom_item_9": {
        "description": "5.29 Do not use Docker's default bridge docker0",
        "info": "Do not use Docker's default bridge docker0. Use docker's user-defined networks for container networking.\n\nRationale:\n\nDocker connects virtual interfaces created in the bridge mode to a common bridge called docker0. This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there is no filtering applied.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow Docker documentation and setup a user-defined network. Run all the containers in the defined network.\n\nImpact:\n\nYou have to manage the user-defined networks.\n\nDefault Value:\n\nBy default, docker runs containers on its docker0 bridge.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1476",
        "cmd": "for net_id in $(docker network ls|awk {\\'print $1\\'}); do docker network inspect $net_id;done",
        "expect": ""
    }
}