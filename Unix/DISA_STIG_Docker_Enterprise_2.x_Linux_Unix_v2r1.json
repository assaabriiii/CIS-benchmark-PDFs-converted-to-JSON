{
    "custom_item_1": {
        "description": "Check if this is a Docker Host",
        "cmd": "/usr/bin/docker version --format '{{.Server.Platform.Name}}'",
        "expect": "^Docker Engine - Enterprise.*$"
    },
    "custom_item_2": {
        "system": "Linux",
        "description": "DKER-EE-001050 - TCP socket binding for all Docker Engine - Enterprise nodes in a Universal Control Plane (UCP) cluster must be disabled.",
        "info": "The UCP component of Docker Enterprise configures and leverages Swarm Mode for node-to-node cluster communication. Swarm Mode is built in to Docker Engine - Enterprise and uses TLS 1.2 at a minimum for encrypting communications. Under the hood, Swarm Mode includes an embedded public key infrastructure (PKI) system. When a UCP cluster is initialized, the first node in the cluster designates itself as a manager node. That node subsequently generates a new root Certificate Authority (CA) along with a key pair, which are used to secure communications with other UCP nodes that join the swarm. One can also specify his/her own externally-generated root CA upon initialization of a UCP cluster. The manager node also generates two tokens to use when joining additional nodes to the cluster: one worker token and one manager token. Each token includes the digest of the root CA's certificate and a randomly generated secret. When a node joins the cluster, the joining node uses the digest to validate the root CA certificate from the remote manager. The remote manager uses the secret to ensure the joining node is an approved node. Each time a new node joins the cluster, the manager issues a certificate to the node. The certificate contains a randomly generated node ID to identify the node under the certificate common name (CN) and the role under the organizational unit (OU). The node ID serves as the cryptographically secure node identity for the lifetime of the node in the current swarm. In this mutual TLS architecture, all nodes encrypt communications using a minimum of TLS 1.2, thereby satisfying the requirements of this control. This information can also be referenced at https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/ and https://docs.docker.com/ee/ucp/ucp-architecture/.\n\nBy itself, Docker Engine - Enterprise is configured by default to listen for API requests via a UNIX domain socket (or IPC socket) created at /var/run/docker.sock on supported Linux distributions and via a named pipe at npipe:////./pipe/docker_engine on Windows Server 2016 and newer. Docker Engine - Enterprise can also be configured to listen for API requests via additional socket types, including both TCP and FD (only on supported systemd-based Linux distributions). If configured to listen for API requests via the TCP socket type over TCP port 2376 and with the daemon flags and SSL certificates, then, at a minimum, TLS 1.2 is used for encryption; therefore this control is applicable and is inherently met in this configuration. If configured to listen for API requests via the TCP socket type, but without TLS verification and certifications, then the instance remains vulnerable and is not properly configured to meet the requirements of this control. If configured to listen for API requests via the FD socket type, then this control is not applicable. More information can be found at https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option. The TCP socket binding should be disabled when running Engine as part of a UCP cluster.\n\nSatisfies: SRG-APP-000014, SRG-APP-000141, SRG-APP-000219, SRG-APP-000383, SRG-APP-000439, SRG-APP-000440, SRG-APP-000441, SRG-APP-000442, SRG-APP-000142",
        "solution": "This fix only applies to Docker Engine - Enterprise nodes that are part of a UCP cluster.\n\nApply this fix to every node in the cluster.\n\n(Linux) Execute the following command to open an override file for docker.service:\n\nsudo systemctl edit docker.service\n\nRemove any '-H' host daemon flags from the 'ExecStart=/usr/bin/dockerd' line in the override file.\n\nSave the file and reload the config with the following command:\n\nsudo systemctl daemon-reload\n\nRestart Docker with the following command:\n\nsudo systemctl restart docker.service",
        "reference": "800-171|3.1.13,800-171|3.4.6,800-171|3.4.7,800-171|3.13.8,800-171|3.13.15,800-53|AC-17(2),800-53|CM-7a.,800-53|CM-7b.,800-53|CM-7(1)(b),800-53|SC-8,800-53|SC-8(1),800-53|SC-8(2),800-53|SC-23,800-53r5|AC-17(2),800-53r5|CM-7a.,800-53r5|CM-7b.,800-53r5|CM-7(1)(b),800-53r5|SC-8,800-53r5|SC-8(1),800-53r5|SC-8(2),800-53r5|SC-23,CAT|II,CCI|CCI-000068,CCI|CCI-000381,CCI|CCI-000382,CCI|CCI-001184,CCI|CCI-001762,CCI|CCI-002418,CCI|CCI-002420,CCI|CCI-002421,CCI|CCI-002422,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.4(a),CN-L3|8.1.4.4(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.IP-1,CSF|PR.PT-3,CSF|PR.PT-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|CM-7a.,ITSG-33|CM-7(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),ITSG-33|SC-8(2),ITSG-33|SC-9(2),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,NIAv2|SS24,PCI-DSSv3.2.1|2.2.1,PCI-DSSv3.2.1|2.2.2,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.3,PCI-DSSv4.0|2.2.4,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-235776r627455_rule,STIG-ID|DKER-EE-001050,STIG-Legacy|SV-104695,STIG-Legacy|V-94865,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.3,SWIFT-CSCv1|2.6,TBA-FIISB|29.1,Vuln-ID|V-235776",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/ps -ef | /usr/bin/grep dockerd | /usr/bin/egrep -i 'tcp://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | /usr/bin/awk '{print} END {if (NR == 0) print \"TCP socket bindings not found\"}'",
        "expect": "^TCP socket bindings not found$"
    },
    "custom_item_3": {
        "system": "Linux",
        "description": "DKER-EE-001070 - FIPS mode must be enabled on all Docker Engine - Enterprise nodes - docker info .SecurityOptions",
        "info": "When FIPS mode is enabled on a Docker Engine - Enterprise node, it uses FIPS-validated cryptography to protect the confidentiality of remote access sessions to any bound TCP sockets with TLS enabled and configured. FIPS mode in Docker Engine - Enterprise is automatically enabled when FIPS mode is also enabled on the underlying host operating system.\n\nThis control is only configurable for the Docker Engine - Enterprise component of Docker Enterprise as only the Engine includes FIPS-validated cryptography. Neither Universal Control Plane (UCP) nor Docker Trusted Registry (DTR) include FIPS-validated cryptography at this time. However, both UCP and DTR will include FIPS-validated cryptography in a future release. Therefore, for UCP/DTR this control is applicable but not yet met.\n\nSatisfies: SRG-APP-000015, SRG-APP-000231, SRG-APP-000014, SRG-APP-000570, SRG-APP-000395, SRG-APP-000514, SRG-APP-000416, SRG-APP-000156, SRG-APP-000172, SRG-APP-000179, SRG-APP-000224, SRG-APP-000411, SRG-APP-000412, SRG-APP-000555, SRG-APP-000635",
        "solution": "Enable FIPS mode on the host operating system. Start the Engine after FIPS mode is enabled on the host to automatically enable FIPS mode on the Engine.\n\nFIPS mode can also be enabled by explicitly setting the DOCKER_FIPS=1 environment variable in an active terminal session prior to the execution of any Docker commands.",
        "reference": "800-171|3.1.13,800-171|3.5.4,800-171|3.5.10,800-171|3.7.5,800-171|3.13.11,800-171|3.13.15,800-171|3.13.16,800-53|AC-17(2),800-53|IA-2(8),800-53|IA-3(1),800-53|IA-5(1)(c),800-53|IA-7,800-53|MA-4(6),800-53|SC-13,800-53|SC-23(3),800-53|SC-28,800-53r5|AC-17(2),800-53r5|IA-2(8),800-53r5|IA-3(1),800-53r5|IA-5(1)(c),800-53r5|IA-7,800-53r5|MA-4(6),800-53r5|SC-13,800-53r5|SC-23(3),800-53r5|SC-28,CAT|I,CCI|CCI-000068,CCI|CCI-000197,CCI|CCI-000803,CCI|CCI-001188,CCI|CCI-001199,CCI|CCI-001453,CCI|CCI-001941,CCI|CCI-001967,CCI|CCI-002450,CCI|CCI-002890,CCI|CCI-003123,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(d),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.1(c),CN-L3|8.1.4.2(a),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CN-L3|8.5.4.1(a),CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-1,CSF|PR.DS-5,CSF|PR.MA-2,CSF|PR.PT-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ITSG-33|AC-17(2),ITSG-33|IA-2(8),ITSG-33|IA-3(1),ITSG-33|IA-5(1)(c),ITSG-33|IA-7,ITSG-33|IA-7a.,ITSG-33|MA-4(6),ITSG-33|SC-13,ITSG-33|SC-13a.,ITSG-33|SC-23(3),ITSG-33|SC-28,ITSG-33|SC-28a.,NESA|M5.2.1,NESA|M5.2.6,NESA|M5.3.1,NESA|T2.3.4,NESA|T2.3.8,NESA|T4.5.1,NESA|T5.2.3,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.4.3,NESA|T5.4.4,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NESA|T7.4.1,NIAv2|AM18,NIAv2|AM37,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY6,NIAv2|CY7,NIAv2|NS5e,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,Rule-ID|SV-235777r627458_rule,STIG-ID|DKER-EE-001070,STIG-Legacy|SV-104697,STIG-Legacy|V-94867,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,SWIFT-CSCv1|4.2,TBA-FIISB|26.1,TBA-FIISB|27.1,TBA-FIISB|35.1,TBA-FIISB|36.1,TBA-FIISB|45.2.3,Vuln-ID|V-235777",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker info --format {{.SecurityOptions}}",
        "expect": "name=.*fips.*"
    },
    "custom_item_4": {
        "system": "Linux",
        "description": "DKER-EE-001090 - The host operating systems auditing policies for the Docker Engine - Enterprise component of Docker Enterprise must be set - docker paths",
        "info": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where '*' designates a wildcard of exclusions): '/_ping', '/ca', '/auth', '/trustedregistryca', '/kubeauth', '/metrics', '/info', '/version*', '/debug', '/openid_keys', '/apidocs', 'kubernetesdocs' and '/manage'. Audit log verbosity can be set to one of the following levels: 'none', 'metadata', or 'request'. To meet the requirements of this control, the 'request' verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n'none': audit logging is disabled\n\n'metadata':\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n'request': includes all fields from the 'metadata' level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000016, SRG-APP-000090, SRG-APP-000091, SRG-APP-000097, SRG-APP-000098, SRG-APP-000496, SRG-APP-000504, SRG-APP-000510, SRG-APP-000509, SRG-APP-000508, SRG-APP-000507, SRG-APP-000506, SRG-APP-000505, SRG-APP-000503, SRG-APP-000502, SRG-APP-000500, SRG-APP-000499, SRG-APP-000498, SRG-APP-000497, SRG-APP-000495, SRG-APP-000494, SRG-APP-000493, SRG-APP-000492, SRG-APP-000485, SRG-APP-000484, SRG-APP-000381, SRG-APP-000343, SRG-APP-000115, SRG-APP-000111, SRG-APP-000101, SRG-APP-000100, SRG-APP-000099, SRG-APP-000096, SRG-APP-000095, SRG-APP-000092, SRG-APP-000089, SRG-APP-000501, SRG-APP-000447",
        "solution": "This fix applies to the underlying host operating system on which the Docker Engine - Enterprise instance is running.\n\nEnable and configure audit policies for Docker Engine - Enterprise on the host operating system:\n\n(Linux) Check that auditd has been installed, and add the following rules to /etc/audit/audit.rules:\n\nauditctl -w /usr/bin/docker -k\nauditctl -w /var/lib/docker -k docker\nauditctl -w /etc/docker -k docker\nauditctl -w [docker.service-path] -k docker (where [docker.service-path] is the result of systemctl show -p FragmentPath docker.service)\nauditctl -w [docker.socket-path] -k docker (where [docker.socket-path] is the result of systemctl show -p FragmentPath docker.socket)\nauditctl -w /etc/default/docker -k docker\nauditctl -w /etc/docker/daemon.json\nauditctl -w /usr/bin/docker-containerd -k docker\nauditctl -w /usr/bin/docker-runc -k docker",
        "reference": "800-171|3.1.7,800-171|3.1.12,800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-171|3.4.5,800-53|AC-6(9),800-53|AC-17(1),800-53|AU-3,800-53|AU-3(1),800-53|AU-6(4),800-53|AU-7(1),800-53|AU-12a.,800-53|AU-12b.,800-53|AU-12c.,800-53|AU-14(1),800-53|CM-5(1),800-53|SI-7(8),800-53|SI-10(3),800-53r5|AC-6(9),800-53r5|AC-17(1),800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-6(4),800-53r5|AU-7(1),800-53r5|AU-12a.,800-53r5|AU-12b.,800-53r5|AU-12c.,800-53r5|AU-14(1),800-53r5|CM-5(1),800-53r5|SI-7(8),800-53r5|SI-10(3),CAT|II,CCI|CCI-000067,CCI|CCI-000130,CCI|CCI-000131,CCI|CCI-000132,CCI|CCI-000133,CCI|CCI-000134,CCI|CCI-000135,CCI|CCI-000154,CCI|CCI-000158,CCI|CCI-000169,CCI|CCI-000171,CCI|CCI-000172,CCI|CCI-001464,CCI|CCI-001487,CCI|CCI-001814,CCI|CCI-002234,CCI|CCI-002723,CCI|CCI-002724,CCI|CCI-002754,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|7.1.3.3(d),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.2(d),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CN-L3|8.1.4.4(c),CN-L3|8.1.4.4(d),CN-L3|8.1.10.6(a),CN-L3|8.1.10.6(i),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-4,CSF|PR.AC-3,CSF|PR.AC-4,CSF|PR.DS-6,CSF|PR.IP-1,CSF|PR.PT-1,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.AN-3,CSF|RS.CO-2,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.12.4.1,ISO/IEC-27001|A.12.4.3,ITSG-33|AC-6,ITSG-33|AC-17(1),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-6(4),ITSG-33|AU-7(1),ITSG-33|AU-12a.,ITSG-33|AU-12b.,ITSG-33|AU-12c.,ITSG-33|AU-14,ITSG-33|CM-5(1),ITSG-33|SI-7,ITSG-33|SI-7a.,ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|M5.2.5,NESA|T3.4.1,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.3.1,NESA|T7.3.2,NESA|T7.3.3,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SM8,NIAv2|SS6e,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv3.2.1|10.5.5,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,Rule-ID|SV-235779r627464_rule,STIG-ID|DKER-EE-001090,STIG-Legacy|SV-104701,STIG-Legacy|V-95111,SWIFT-CSCv1|2.6,SWIFT-CSCv1|5.1,SWIFT-CSCv1|6.4,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,TBA-FIISB|45.1.1,Vuln-ID|V-235779",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/sbin/auditctl -l | /usr/bin/grep -e /usr/bin/docker -e /var/lib/docker -e /etc/docker -e /etc/default/docker -e /etc/docker/daemon.json -e /usr/bin/docker-containerd -e /usr/bin/docker-runc | /usr/bin/awk '{print} END { if (NR == 7) print \"All Docker path audit rules are set\"}'",
        "expect": "^All Docker path audit rules are set$"
    },
    "custom_item_5": {
        "system": "Linux",
        "description": "DKER-EE-001090 - The host operating systems auditing policies for the Docker Engine - Enterprise component of Docker Enterprise must be set - docker services",
        "info": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where '*' designates a wildcard of exclusions): '/_ping', '/ca', '/auth', '/trustedregistryca', '/kubeauth', '/metrics', '/info', '/version*', '/debug', '/openid_keys', '/apidocs', 'kubernetesdocs' and '/manage'. Audit log verbosity can be set to one of the following levels: 'none', 'metadata', or 'request'. To meet the requirements of this control, the 'request' verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n'none': audit logging is disabled\n\n'metadata':\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n'request': includes all fields from the 'metadata' level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000016, SRG-APP-000090, SRG-APP-000091, SRG-APP-000097, SRG-APP-000098, SRG-APP-000496, SRG-APP-000504, SRG-APP-000510, SRG-APP-000509, SRG-APP-000508, SRG-APP-000507, SRG-APP-000506, SRG-APP-000505, SRG-APP-000503, SRG-APP-000502, SRG-APP-000500, SRG-APP-000499, SRG-APP-000498, SRG-APP-000497, SRG-APP-000495, SRG-APP-000494, SRG-APP-000493, SRG-APP-000492, SRG-APP-000485, SRG-APP-000484, SRG-APP-000381, SRG-APP-000343, SRG-APP-000115, SRG-APP-000111, SRG-APP-000101, SRG-APP-000100, SRG-APP-000099, SRG-APP-000096, SRG-APP-000095, SRG-APP-000092, SRG-APP-000089, SRG-APP-000501, SRG-APP-000447",
        "solution": "This fix applies to the underlying host operating system on which the Docker Engine - Enterprise instance is running.\n\nEnable and configure audit policies for Docker Engine - Enterprise on the host operating system:\n\n(Linux) Check that auditd has been installed, and add the following rules to /etc/audit/audit.rules:\n\nauditctl -w /usr/bin/docker -k\nauditctl -w /var/lib/docker -k docker\nauditctl -w /etc/docker -k docker\nauditctl -w [docker.service-path] -k docker (where [docker.service-path] is the result of systemctl show -p FragmentPath docker.service)\nauditctl -w [docker.socket-path] -k docker (where [docker.socket-path] is the result of systemctl show -p FragmentPath docker.socket)\nauditctl -w /etc/default/docker -k docker\nauditctl -w /etc/docker/daemon.json\nauditctl -w /usr/bin/docker-containerd -k docker\nauditctl -w /usr/bin/docker-runc -k docker",
        "reference": "800-171|3.1.7,800-171|3.1.12,800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-171|3.4.5,800-53|AC-6(9),800-53|AC-17(1),800-53|AU-3,800-53|AU-3(1),800-53|AU-6(4),800-53|AU-7(1),800-53|AU-12a.,800-53|AU-12b.,800-53|AU-12c.,800-53|AU-14(1),800-53|CM-5(1),800-53|SI-7(8),800-53|SI-10(3),800-53r5|AC-6(9),800-53r5|AC-17(1),800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-6(4),800-53r5|AU-7(1),800-53r5|AU-12a.,800-53r5|AU-12b.,800-53r5|AU-12c.,800-53r5|AU-14(1),800-53r5|CM-5(1),800-53r5|SI-7(8),800-53r5|SI-10(3),CAT|II,CCI|CCI-000067,CCI|CCI-000130,CCI|CCI-000131,CCI|CCI-000132,CCI|CCI-000133,CCI|CCI-000134,CCI|CCI-000135,CCI|CCI-000154,CCI|CCI-000158,CCI|CCI-000169,CCI|CCI-000171,CCI|CCI-000172,CCI|CCI-001464,CCI|CCI-001487,CCI|CCI-001814,CCI|CCI-002234,CCI|CCI-002723,CCI|CCI-002724,CCI|CCI-002754,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|7.1.3.3(d),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.2(d),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CN-L3|8.1.4.4(c),CN-L3|8.1.4.4(d),CN-L3|8.1.10.6(a),CN-L3|8.1.10.6(i),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-4,CSF|PR.AC-3,CSF|PR.AC-4,CSF|PR.DS-6,CSF|PR.IP-1,CSF|PR.PT-1,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.AN-3,CSF|RS.CO-2,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.12.4.1,ISO/IEC-27001|A.12.4.3,ITSG-33|AC-6,ITSG-33|AC-17(1),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-6(4),ITSG-33|AU-7(1),ITSG-33|AU-12a.,ITSG-33|AU-12b.,ITSG-33|AU-12c.,ITSG-33|AU-14,ITSG-33|CM-5(1),ITSG-33|SI-7,ITSG-33|SI-7a.,ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|M5.2.5,NESA|T3.4.1,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.3.1,NESA|T7.3.2,NESA|T7.3.3,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SM8,NIAv2|SS6e,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv3.2.1|10.5.5,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,Rule-ID|SV-235779r627464_rule,STIG-ID|DKER-EE-001090,STIG-Legacy|SV-104701,STIG-Legacy|V-95111,SWIFT-CSCv1|2.6,SWIFT-CSCv1|5.1,SWIFT-CSCv1|6.4,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,TBA-FIISB|45.1.1,Vuln-ID|V-235779",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/sbin/auditctl -l | /usr/bin/egrep 'docker.(service|socket)' | /usr/bin/awk '{print} END { if (NR == 2) {print \"All Docker service audit rules are set\"}'",
        "expect": "^All Docker service audit rules are set$"
    },
    "custom_item_6": {
        "system": "Linux",
        "description": "DKER-EE-001190 - Docker Enterprise sensitive host system directories must not be mounted on containers.",
        "info": "Sensitive host system directories such as below should not be allowed to be mounted as container volumes especially in read-write mode.\n\nLinux:\n\n/\n/boot\n/dev\n/etc\n/lib\n/proc\n/sys\n/usr\n\nWindows:\n\n%windir% (C:\\Windows)\n%windir%\\system32 (C:\\Windows\\system32)\n%programdata%\n%programData%\\docker\nC:\\Program Files\nC:\\Program Files (x86)\nC:\\Users\n\nIf sensitive directories are mounted in read-write mode, it would be possible to make changes to files within those sensitive directories. The changes might bring down security implications or unwarranted changes that could put the Docker host in compromised state.\n\nDocker defaults to a read-write volume but the user can also mount a directory read-only. By default, no sensitive host directories are mounted on containers.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise.\n\nDo not mount host sensitive directories on containers especially in read-write mode.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-235783r627476_rule,STIG-ID|DKER-EE-001190,STIG-Legacy|SV-104737,STIG-Legacy|V-95599,TBA-FIISB|31.1,Vuln-ID|V-235783",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' | /usr/bin/grep -iv \"ucp\\|kubelet\\|dtr\"",
        "expect": "Manual_Review"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "DKER-EE-001240 - The Docker Enterprise hosts process namespace must not be shared.",
        "info": "Process ID (PID) namespaces isolate the PID number space, meaning that processes in different PID namespaces can have the same PID. This is process level isolation between containers and the host.\n\nPID namespace provides separation of processes. The PID Namespace removes the view of the system processes, and allows process IDs to be reused including PID 1. If the host's PID namespace is shared with the container, it would allow processes within the container to see all of the processes on the host system. This breaks the benefit of process level isolation between the host and the containers. Someone having access to the container can eventually know all the processes running on the host system and can even kill the host system processes from within the container. Hence, do not share the host's process namespace with the containers.\n\nContainer processes cannot see the processes on the host system. In certain cases, the container should share the host's process namespace. For example, the user could build a container with debugging tools like strace or gdb, but want to use these tools when debugging processes within the container. If this is desired, then share only one (or needed) host process by using the -p switch.\n\nExample:\ndocker run --pid=host rhel7 strace -p 1234\n\nBy default, all containers have the PID namespace enabled and the host's process namespace is not shared with the containers.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not start a container with --pid=host argument.\n\nFor example, do not start a container as below:\n\ndocker run --interactive --tty --pid=host centos /bin/bash",
        "reference": "800-171|3.1.3,800-53|AC-4,800-53r5|AC-4,CAT|II,CCI|CCI-001414,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,Rule-ID|SV-235784r627479_rule,STIG-ID|DKER-EE-001240,STIG-Legacy|SV-104739,STIG-Legacy|V-95601,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-235784",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep -v CONTAINER | /usr/bin/xargs docker inspect --format '{{ .Id }}: PidMode={{ .HostConfig.PidMode }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /PidMode=host/ {print; m+=1} END { if (m == 0) { print \"hosts process namespace not shared\"}'",
        "expect": "^hosts process namespace not shared$"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "DKER-EE-001250 - The Docker Enterprise hosts IPC namespace must not be shared.",
        "info": "IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores, and message queues. IPC namespace on the host thus should not be shared with the containers and should remain isolated.\n\nIPC namespace provides separation of IPC between the host and containers. If the host's IPC namespace is shared with the container, it would allow processes within the container to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between the host and the containers. Someone having access to the container can eventually manipulate the host IPC. Hence, do not share the host's IPC namespace with the containers.\n\nShared memory segments are used to accelerate inter-process communication. It is commonly used by high-performance applications. If such applications are containerized into multiple containers, the user might need to share the IPC namespace of the containers to achieve high performance. In such cases, the user should still be sharing container specific IPC namespaces only and not the host IPC namespace. The user may share the container's IPC namespace with another container as below:\n\nExample:\ndocker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash\n\nBy default, all containers have the IPC namespace enabled and host IPC namespace is not shared with any container.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not start a container with --ipc=host argument.\n\nFor example, do not start a container as below:\n\ndocker run --interactive --tty --ipc=host centos /bin/bash",
        "reference": "800-171|3.1.3,800-53|AC-4,800-53r5|AC-4,CAT|II,CCI|CCI-001414,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,Rule-ID|SV-235785r627482_rule,STIG-ID|DKER-EE-001250,STIG-Legacy|SV-104741,STIG-Legacy|V-95603,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-235785",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep -v CONTAINER | /usr/bin/xargs docker inspect --format '{{ .Id }}: IpcMode={{ .HostConfig.IpcMode }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /IpcMode=shareable/ {print; m+=1} END { if (m == 0) { print \"hosts IPC namespace not shared\"}'",
        "expect": "^hosts IPC namespace not shared$"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "DKER-EE-001590 - Docker Enterprise must alert the ISSO and SA (at a minimum) in the event of an audit processing failure.",
        "info": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where '*' designates a wildcard of exclusions): '/_ping', '/ca', '/auth', '/trustedregistryca', '/kubeauth', '/metrics', '/info', '/version*', '/debug', '/openid_keys', '/apidocs', 'kubernetesdocs' and '/manage'. Audit log verbosity can be set to one of the following levels: 'none', 'metadata', or 'request'. To meet the requirements of this control, the 'request' verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n'none': audit logging is disabled\n\n'metadata':\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n'request': includes all fields from the 'metadata' level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
        "solution": "via CLI:\n\nLinux: As a trusted user on the host operating system, open the /etc/docker/daemon.json file for editing. If the file doesn't exist, it must be created.\n\nSet the 'log-driver' property to one of the following: 'syslog', 'awslogs', 'splunk', 'gcplogs', 'logentries' or '' (whereis the naming of a third-party Docker logging driver plugin). Configure the 'log-opts' object as required by the selected 'log-driver'.\n\nSave the file. Restart the docker daemon.\n\nWork with the SIEM administrator to configure an alert when no audit data is received from Docker.",
        "reference": "800-171|3.3.4,800-53|AU-5a.,800-53r5|AU-5a.,CAT|III,CCI|CCI-000139,CN-L3|7.1.3.3(e),CSF|PR.PT-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-5a.,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-235787r627488_rule,STIG-ID|DKER-EE-001590,STIG-Legacy|SV-104745,STIG-Legacy|V-95607,Vuln-ID|V-235787",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "regex": "^[\\\\s]*\"log-driver\"[\\\\s]*:",
        "expect": "\"(syslog|awslogs|splunk|gcplogs|logentries|@LOGGING_DRIVER_PLUGIN@)\""
    },
    "custom_item_10": {
        "system": "Linux",
        "description": "DKER-EE-001770 - Docker Incs official GPG key must be added to the host using the users operating systems respective package repository management tooling.",
        "info": "All packaged components of Docker Enterprise are digitally signed using GPG keys maintained by Docker, Inc. The Docker Engine - Enterprise daemon, itself, is digitally signed. Furthermore, all Docker, Inc-managed Linux repositories are themselves signed using GPG keys. On Windows, if Docker is installed via the PowerShell PackageManagement (aka OneGet) provider, the provider is managed by Microsoft, and provider artifacts are signed by Microsoft. The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) installation images are digitally signed by Docker, Inc using Docker Content Trust.",
        "solution": "For Linux systems, add Docker Inc's official GPG key to the host using the operating system's respective package repository management tooling. If not using a package repository to install/update Docker Engine - Enterprise, verify that the Engine's package signature matches that as published by Docker, Inc.\n\nWhen retrieving the UCP and DTR installation images, use Docker, Inc's officially managed image repositories as follows:\n\ndocker.io/docker/ucp:[ucp_version]\ndocker.io/docker/dtr:[dtr_version]\n\nIf downloading the UCP and DTR images for offline installation, use only Docker, Inc's officially managed package links as follows:\n\nhttps://docs.docker.com/ee/ucp/admin/install/install-offline/\nhttps://docs.docker.com/ee/dtr/admin/install/install-offline/",
        "reference": "800-171|3.4.5,800-53|CM-5(3),800-53r5|CM-14,CAT|III,CCI|CCI-001749,CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(3),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-235788r627491_rule,STIG-ID|DKER-EE-001770,STIG-Legacy|SV-104747,STIG-Legacy|V-95609,Vuln-ID|V-235788",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker trust inspect docker/ucp:@UCP_VERSION@ docker/dtr:@DTR_VERSION@ 2>1 | /usr/bin/jq -r .[].SignedTags[].Digest | /usr/bin/awk '{print} END {if (NR==2) { print \"GPG key found\"}'",
        "expect": "^GPG key found$"
    },
    "custom_item_11": {
        "system": "Linux",
        "description": "DKER-EE-001800 - The insecure registry capability in the Docker Engine - Enterprise component of Docker Enterprise must be disabled.",
        "info": "Docker considers a private registry either secure or insecure. By default, registries are considered secure.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
        "solution": "This fix only applies to the Docker Engine - Enterprise component of Docker Enterprise.\n\nvia CLI:\n\nLinux: As a trusted user on the underlying host operating system, edit the '/etc/docker/daemon.json' file and set the 'insecure-registries' property to an empty array. If the daemon.json file doesn't exist, it must be created.\n\nRestart the Docker daemon.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235789r627494_rule,STIG-ID|DKER-EE-001800,STIG-Legacy|SV-104749,STIG-Legacy|V-95611,SWIFT-CSCv1|2.3,Vuln-ID|V-235789",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/ps -ef | /usr/bin/grep dockerd | /usr/bin/grep -i insecure-registry | /usr/bin/awk '{print} END {if (NR == 0) print \"insecure-registry is disabled\"}'",
        "expect": "^insecure-registry is disabled$"
    },
    "custom_item_12": {
        "system": "Linux",
        "description": "DKER-EE-001810 - On Linux, a non-AUFS storage driver in the Docker Engine - Enterprise component of Docker Enterprise must be used.",
        "info": "The aufs storage driver is the oldest storage driver. It is based on a Linux kernel patch-set that is unlikely to be merged into the main Linux kernel. aufs driver is also known to cause some serious kernel crashes. aufs just has legacy support from Docker. Most importantly, aufs is not a supported driver in many Linux distributions using latest Linux kernels.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
        "solution": "This fix only applies to the Docker Engine - Enterprise component of Docker Enterprise and only when it is used on a Linux host operating system.\n\nvia CLI:\n\nLinux: As a trusted user on the underlying host operating system, edit the '/etc/docker/daemon.json' file and set the 'storage-driver' property to a value that is not 'aufs'. If the daemon.json file does not exist, it must be created.\n\nRestart the Docker daemon.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235790r627497_rule,STIG-ID|DKER-EE-001810,STIG-Legacy|SV-104751,STIG-Legacy|V-95613,SWIFT-CSCv1|2.3,Vuln-ID|V-235790",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker info --format 'Storage Driver: {{ .Driver }}'",
        "expect": "Storage Driver: ((?!aufs).)*$"
    },
    "custom_item_13": {
        "description": "Ensure Userland Proxy is Disabled - dockerd",
        "cmd": "/usr/bin/ps -ef | /usr/bin/grep dockerd | /usr/bin/grep -v grep",
        "expect": "--userland-proxy=false"
    },
    "custom_item_14": {
        "description": "Ensure Userland Proxy is Disabled - daemon.json",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"userland-proxy\"]",
        "regex": ".*",
        "expect": "false"
    },
    "custom_item_15": {
        "system": "Linux",
        "description": "DKER-EE-001840 - Experimental features in the Docker Engine - Enterprise component of Docker Enterprise must be disabled.",
        "info": "Avoid experimental features in production.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
        "solution": "This fix only applies to the Docker Engine - Enterprise component of Docker Enterprise.\n\nvia CLI:\n\nLinux: As a trusted user on the underlying host operating system, edit the '/etc/docker/daemon.json' file and set the 'experimental' property to a value of 'false'. If the daemon.json file doesn't exist, it must be created.\n\nRestart the Docker daemon.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235792r627503_rule,STIG-ID|DKER-EE-001840,STIG-Legacy|SV-104755,STIG-Legacy|V-95617,SWIFT-CSCv1|2.3,Vuln-ID|V-235792",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker version --format '{{ .Server.Experimental }}'",
        "expect": "^false$"
    },
    "custom_item_16": {
        "description": "Check to see if we are using Ubuntu.",
        "file": "/etc/lsb-release",
        "regex": "^DISTRIB_ID=",
        "expect": "^DISTRIB_ID=\"Ubuntu\"$"
    },
    "custom_item_17": {
        "system": "Linux",
        "description": "DKER-EE-001930 - An appropriate AppArmor profile must be enabled on Ubuntu systems for Docker Enterprise.",
        "info": "AppArmor protects the Ubuntu OS and applications from various threats by enforcing security policy which is also known as AppArmor profile. The user can create their own AppArmor profile for containers or use the Docker's default AppArmor profile. This would enforce security policies on the containers as defined in the profile.\n\nBy default, docker-default AppArmor profile is applied for running containers and this profile can be found at /etc/apparmor.d/docker.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on the Ubuntu host operating system where AppArmor is in use and should be executed on all nodes in a Docker Enterprise cluster.\n\nRun all containers using an AppArmor profile:\n\nvia CLI:\n\nLinux: Install AppArmor (if not already installed).\n\nCreate/import an AppArmor profile (if not using the 'docker-default' profile). Put the profile in 'enforcing' model. Execute the following command as a trusted user on the host operating system to run the container using the customized AppArmor profile:\n\ndocker run [options] --security-opt='apparmor:[PROFILENAME]' [image] [command]\n\nIf using the 'docker-default' default profile, run the container using the following command instead:\n\ndocker run [options] --security-opt apparmor=docker-default [image] [command]",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235799r627524_rule,STIG-ID|DKER-EE-001930,STIG-Legacy|SV-104769,STIG-Legacy|V-95631,SWIFT-CSCv1|2.3,Vuln-ID|V-235799",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker ps --quiet --all | /usr/bin/xargs docker inspect --format '{{ .Id }}: AppArmorProfile={{ .AppArmorProfile }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ !/AppArmorProfile=@APPARMOR_PROFILE@/ {print; m+=1} END { if (m != 0) print \"AppArmor profile found\" }'",
        "expect": "^AppArmor profile found$"
    },
    "custom_item_18": {
        "description": "Check to see if we are using CentOS.",
        "file": "/etc/os-release",
        "regex": "^ID=",
        "expect": "^ID=\"centos\"$"
    },
    "custom_item_19": {
        "description": "Check to see if we are using CentOS.",
        "file": "/etc/os-release",
        "regex": "^ID=",
        "expect": "^ID=\"rhel\"$"
    },
    "custom_item_20": {
        "system": "Linux",
        "description": "DKER-EE-001940 - SELinux security options must be set on Red Hat or CentOS systems for Docker Enterprise.",
        "info": "SELinux provides a Mandatory Access Control (MAC) system on RHEL and CentOS that greatly augments the default Discretionary Access Control (DAC) model. The user can thus add an extra layer of safety by enabling SELinux on the RHEL or CentOS host.\n\nBy default, no SELinux security options are applied on containers.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on either the Red Hat Enterprise Linux or CentOS host operating systems where SELinux is in use and should be executed on all nodes in a Docker Enterprise cluster.\n\nStart the Docker daemon with SELinux mode enabled. Run Docker containers using appropriate security options.\n\nvia CLI:\n\nLinux: Set the SE Linux state. Set the SELinux policy. Create or import a SELinux policy template for Docker containers. Start the Docker daemon with SELinux mode enabled by either adding the '--selinux-enabled' flag to the systemd drop-in file or by setting the 'selinux-enabled' property to 'true' in the '/etc/docker/daemon.json' daemon configuration file. Restart the Docker daemon.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235800r627527_rule,STIG-ID|DKER-EE-001940,STIG-Legacy|SV-104773,STIG-Legacy|V-95635,SWIFT-CSCv1|2.3,Vuln-ID|V-235800",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs docker inspect --format '{{ .Name }}: SecurityOpt={{ .HostConfig.SecurityOpt }}' | /usr/bin/grep -iv \"\\ucp\\|kube\\|dtr\"",
        "expect": "SecurityOpt=\\\\[.*selinux=enable.*\\\\]"
    },
    "custom_item_21": {
        "system": "Linux",
        "description": "DKER-EE-001960 - Privileged Linux containers must not be used for Docker Enterprise.",
        "info": "Using the --privileged flag gives all Linux Kernel Capabilities to the container thus overwriting the --cap-add and --cap-drop flags. Ensure that it is not used. The --privileged flag gives all capabilities to the container, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system and should be executed on all nodes in a Docker Enterprise cluster.\n\nDo not run containers with the --privileged flag.\n\nFor example, do not start a container as below:\n\ndocker run --interactive --tty --privileged centos /bin/bash",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235802r672378_rule,STIG-ID|DKER-EE-001960,STIG-Legacy|SV-104777,STIG-Legacy|V-95639,SWIFT-CSCv1|2.3,Vuln-ID|V-235802",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Privileged={{ .HostConfig.Privileged }}' |  /usr/bin/grep -iv \"\\ucp\\|kube\\|dtr\" | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /Privileged=true/ {print; m+=1} END {if (m == 0) print \"No privileged containers found\"}'",
        "expect": "^No privileged containers found$"
    },
    "custom_item_22": {
        "system": "Linux",
        "description": "DKER-EE-001970 - SSH must not run within Linux containers for Docker Enterprise.",
        "info": "SSH server should not be running within the container. The user should instead use Universal Control Plane (UCP) to console in to running containers.\n\nRunning SSH within the container increases the complexity of security management by making it:\n\n- Difficult to manage access policies and security compliance for SSH server\n- Difficult to manage keys and passwords across various containers\n- Difficult to manage security upgrades for SSH server\n- It is possible to have shell access to a container without using SSH, the needlessly increasing the complexity of security management should be avoided\n\nBy default, SSH server is not running inside the container. Only one process per container is allowed.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system and should be executed on all nodes in a Docker Enterprise cluster.\n\nRemove SSH packages from all Docker base images in use in the user's environment.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235803r627536_rule,STIG-ID|DKER-EE-001970,STIG-Legacy|SV-104779,STIG-Legacy|V-95641,SWIFT-CSCv1|2.3,Vuln-ID|V-235803",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "for i in $(/usr/bin/docker ps -q); do docker exec $i ps -el; done | grep sshd | awk '{ print } END { if (NR==0) print \"SSH not running\" }'",
        "expect": "^SSH not running$"
    },
    "custom_item_23": {
        "system": "Linux",
        "description": "DKER-EE-001990 - Only required ports must be open on the containers in Docker Enterprise.",
        "info": "Dockerfile for a container image defines the ports to be opened by default on a container instance. The list of ports may or may not be relevant to the application running within the container.\n\nA container can be run just with the ports defined in the Dockerfile for its image or can be arbitrarily passed run time parameters to open a list of ports. Additionally, over time, Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant to the application running within the container. Opening unneeded ports increase the attack surface of the container and the containerized application. As a recommended practice, do not open unneeded ports.\n\nBy default, all the ports that are listed in the Dockerfile under EXPOSE instruction for an image are opened when a container is run with -P or --publish-all flag.",
        "solution": "Document the ports required for each container in the SSP.\n\nFix the Dockerfile of the container image to expose only needed ports by the containerized application. Ignore the list of ports defined in the Dockerfile by NOT using -P (UPPERCASE) or --publish-all flag when starting the container. Use the -p (lowercase) or --publish flag to explicitly define the ports needed for a particular container instance.\n\nExample:\ndocker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235804r627539_rule,STIG-ID|DKER-EE-001990,STIG-Legacy|SV-104781,STIG-Legacy|V-95643,SWIFT-CSCv1|2.3,Vuln-ID|V-235804",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}' | /usr/bin/egrep 'HostPort:[0-9]+' | /usr/bin/awk '{ print } END { if (NR==0) print \"No HostPort entries found\" }'",
        "expect": "^No HostPort entries found$"
    },
    "custom_item_24": {
        "system": "Linux",
        "description": "DKER-EE-002000 - Docker Enterprise hosts network namespace must not be shared.",
        "info": "The networking mode on a container when set to --net=host, skips placing the container inside separate network stack. In essence, this choice tells Docker to not containerize the container's networking. This would network-wise mean that the container lives 'outside' in the main Docker host and has full access to its network interfaces.\n\nThis is potentially dangerous. It allows the container process to open low-numbered ports like any other root process. It also allows the container to access network services like D-bus on the Docker host. Thus, a container process can potentially do unexpected things such as shutting down the Docker host. Do not use this option.\n\nBy default, container connects to Docker bridge.",
        "solution": "Do not pass --net=host or --network=host options when starting the container.\n\nFor example, when executing docker run, do not use the --net=host nor --network=host arguments.\n\nA more detailed reference for the docker run command can be found at https://docs.docker.com/engine/reference/run/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235805r627542_rule,STIG-ID|DKER-EE-002000,STIG-Legacy|SV-104783,STIG-Legacy|V-95645,SWIFT-CSCv1|2.3,Vuln-ID|V-235805",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep -v CONTAINER | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /NetworkMode=host/ {print; m+=1} END {if (m == 0) print \"hosts network namespace not shared\"}'",
        "expect": "^hosts network namespace not shared$"
    },
    "custom_item_25": {
        "system": "Linux",
        "description": "DKER-EE-002010 - Memory usage for all containers must be limited in Docker Enterprise.",
        "info": "By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as memory limit, the amount of memory that a container may consume can be controlled.\n\nBy default, container can use all of the memory on the host. The user can use memory limit mechanism to prevent a denial of service arising from one container consuming all of the host's resources such that other containers on the same host cannot perform their intended functions. Having no limit on memory can lead to issues where one container can easily make the whole system unstable, and as a result, unusable.\n\nBy default, all containers on a Docker host share the resources equally. No memory limits are enforced.",
        "solution": "Document container memory requirements in the System Security Plan (SSP).\n\nRun the container with only as much memory as required. Always run the container using the --memory argument.\n\nFor example, run a container as below:\n\ndocker run --interactive --tty --memory 256m centos /bin/bash\n\nIn the above example, the container is started with a memory limit of 256 MB.\n\nNote: The output of the below command would return values in scientific notation if memory limits are in place.\n\ndocker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0\n\nFor example, if the memory limit is set to 256 MB for the above container instance, the output of the above command would be 2.68435456e+08 and NOT 256m. Convert this value using a scientific calculator or programmatic methods.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235806r627545_rule,STIG-ID|DKER-EE-002010,STIG-Legacy|SV-104785,STIG-Legacy|V-95647,SWIFT-CSCv1|2.3,Vuln-ID|V-235806",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Memory={{ .HostConfig.Memory }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /Memory=0/ {print; m+=1} END {if (m == 0) print \"Memory limits are configured\"}'",
        "expect": "^Memory limits are configured$"
    },
    "custom_item_26": {
        "system": "Linux",
        "description": "DKER-EE-002020 - Docker Enterprise CPU priority must be set appropriately on all containers.",
        "info": "By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as CPU shares, the user control the host CPU resources that a container may consume.\n\nBy default, CPU time is divided between containers equally. If it is desired, to control the CPU time amongst the container instances, use CPU sharing feature. CPU sharing allows to prioritize one container over the other and forbids the lower priority container to claim CPU resources more often. This ensures that the high priority containers are served better.\n\nIf CPU shares are not properly set, the container process may have to starve if the resources on the host are not available. If the CPU resources on the host are free, CPU shares do not place any restrictions on the CPU that the container may use.\n\nBy default, all containers on a Docker host share the resources equally. No CPU shares are enforced.",
        "solution": "Document container CPU requirements in the System Security Plan (SSP).\n\nManage the CPU shares between containers. To do so, start the container using the --cpu-shares argument.\n\nFor example, run a container as below:\n\ndocker run --interactive --tty --cpu-shares 512 [image] [command]\n\nIn the above example, the container is started with CPU shares of 50% of what the other containers use. So, if the other container has CPU shares of 80%, this container will have CPU shares of 40%.\n\nNote: Every new container will have 1024 shares of CPU by default. However, this value is shown as 0 if running the command mentioned in the audit section.\n\nAlternatively,\n\n1. Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.\n2. Check the container instance ID using docker ps.\n3. Now, inside the above directory (in step 1), there will be a directory by name docker-.scope. For example, docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this directory.\n4. Find a file named cpu.shares. Execute cat cpu.shares. This will always show the CPU share value based on the system. So, even if there is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this file will have a value of 1024.\n\nBy setting one container's CPU shares to 512, it will receive half of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to derive the number that set for respective CPU shares. For example, use 512 to set 50% and 256 to set 25%.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|III,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235807r627548_rule,STIG-ID|DKER-EE-002020,STIG-Legacy|SV-104787,STIG-Legacy|V-95649,SWIFT-CSCv1|2.3,Vuln-ID|V-235807",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: CpuShares={{ .HostConfig.CpuShares }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /CpuShares=(0|1024)/ {print; m+=1} END {if (m == 0) print \"CPU shares are configured\"}'",
        "expect": "^CPU shares are configured$"
    },
    "custom_item_27": {
        "system": "Linux",
        "description": "DKER-EE-002030 - All Docker Enterprise containers root filesystem must be mounted as read only.",
        "info": "The container's root filesystem should be treated as a 'golden image' by using Docker run's --read-only option. This prevents any writes to the container's root filesystem at container runtime and enforces the principle of immutable infrastructure.\n\nEnabling this option forces containers at runtime to explicitly define their data writing strategy to persist or not persist their data. This also reduces security attack vectors since the container instance's filesystem cannot be tampered with or written to unless it has explicit read-write permissions on its filesystem folder and directories.\n\nEnabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. Define what the container's data should and should not persist at runtime to determine which recommendation procedure to utilize.\n\nExample:\n\n- Enable use --tmpfs for temporary file writes to /tmp\n- Use Docker shared data volumes for persistent data writes\n\nBy default, a container will have its root filesystem writable allowing all container processes to write files owned by the container's runtime user.",
        "solution": "Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be mounted as read only.\n\ndocker run--read-onlyEnabling the --read-only option at a container's runtime should be used by administrators to force a container's executable processes to only write container data to explicit storage locations during the container's runtime.\n\nExamples of explicit storage locations during a container's runtime include, but are not limited to:\n\n1. Use the --tmpfs option to mount a temporary file system for non-persistent data writes.\n\nExample:\ndocker run --interactive --tty --read-only --tmpfs '/run' --tmpfs '/tmp' [image] [command]\n\n2. Enabling Docker rw mounts at a container's runtime to persist container data directly on the Docker host filesystem.\n\nExample:\ndocker run --interactive --tty --read-only -v /opt/app/data:/run/app/data:rw [image] [command]\n\n3. Utilizing Docker shared-storage volume plugins for Docker data volume to persist container data.\n\ndocker volume create -d convoy --opt o=size=20GB my-named-volume\n\ndocker run --interactive --tty --read-only -v my-named-volume:/run/app/data [image] [command]",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235808r627551_rule,STIG-ID|DKER-EE-002030,STIG-Legacy|SV-104789,STIG-Legacy|V-95651,SWIFT-CSCv1|2.3,Vuln-ID|V-235808",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs -L 1 /usr/bin/docker inspect --format '{{ .Id }}: ReadonlyRootfs={{ .HostConfig.ReadonlyRootfs }}' |  /usr/bin/awk 'BEGIN { m=0 } $2 ~ /ReadonlyRootfs=false/ {print; m+=1} END {if (m == 0) print \"All container root filesystems are mounted as read-only\"}'",
        "expect": "^All container root filesystems are mounted as read-only$"
    },
    "custom_item_28": {
        "system": "Linux",
        "description": "DKER-EE-002040 - Docker Enterprise host devices must not be directly exposed to containers.",
        "info": "Host devices can be directly exposed to containers at runtime. Do not directly expose host devices to containers especially for containers that are not trusted.\n\nThe --device option exposes the host devices to the containers and consequently, the containers can directly access such host devices. Do not require the container to run in privileged mode to access and manipulate the host devices. By default, the container will be able to read, write and mknod these devices. Additionally, it is possible for containers to remove block devices from the host. Hence, do not expose host devices to containers directly.\n\nIf at all, expose the host device to a container, use the sharing permissions appropriately:\n\nr - read only\nw - writable\nm - mknod allowed\n\nThe user would not be able to use the host devices directly within the containers.\n\nBy default, no host devices are exposed to containers. If the user does not provide sharing permissions and choose to expose a host device to a container, the host device would be exposed with read, write, and mknod permissions.",
        "solution": "Do not directly expose the host devices to containers. If at all, expose the host devices to containers, use the correct set of permissions:\n\nFor example, do not start a container as below:\n\ndocker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash\n\nFor example, share the host device with correct permissions:\n\ndocker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw --device=/dev/temp_sda:/dev/temp_sda:r centos bash",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235809r627554_rule,STIG-ID|DKER-EE-002040,STIG-Legacy|SV-104791,STIG-Legacy|V-95653,SWIFT-CSCv1|2.3,Vuln-ID|V-235809",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Devices={{ .HostConfig.Devices }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /Devices=\\[.+\\]/ {print; m+=1} END {if (m == 0) print \"No devices directly exposed to containers\"}'",
        "expect": "^No devices directly exposed to containers$"
    },
    "custom_item_29": {
        "system": "Linux",
        "description": "DKER-EE-002050 - Mount propagation mode must not set to shared in Docker Enterprise.",
        "info": "Mount propagation mode allows mounting volumes in shared, slave or private mode on a container. Do not use shared mount propagation mode until needed.\n\nA shared mount is replicated at all mounts and the changes made at any mount point are propagated to all mounts. Mounting a volume in shared mode does not restrict any other container to mount and make changes to that volume. This unintended volume changes could potentially impact data hosted on the mounted volume. Do not set mount propagation mode to shared until needed.\n\nBy default, the container mounts are private.",
        "solution": "Do not mount volumes in shared mode propagation.\n\nFor example, do not start container as below:\n\ndocker run--volume=/hostPath:/containerPath:shared",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235810r627557_rule,STIG-ID|DKER-EE-002050,STIG-Legacy|SV-104793,STIG-Legacy|V-95655,SWIFT-CSCv1|2.3,Vuln-ID|V-235810",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep -v CONTAINER | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Propagation={{range $mnt := .Mounts}} {{json $mnt.Propagation}} {{end}}' |  /usr/bin/awk 'BEGIN { m=0 } $2 ~ /Propagation=(shared|rshared)/ {print; m+=1} END {if (m == 0) print \"propagation mode not set to shared\"}'",
        "expect": "^propagation mode not set to shared$"
    },
    "custom_item_30": {
        "system": "Linux",
        "description": "DKER-EE-002060 - The Docker Enterprise hosts UTS namespace must not be shared.",
        "info": "UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. It is used for setting the hostname and the domain that is visible to running processes in that namespace. Processes running within containers do not typically require to know hostname and domain name. Hence, the namespace should not be shared with the host.\n\nSharing the UTS namespace with the host provides full permission to the container to change the hostname of the host. This must not be allowed.\n\nBy default, all containers have the UTS namespace enabled and host UTS namespace is not shared with any container.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not start a container with --uts=host argument.\n\nFor example, do not start a container as below:\n\ndocker run --rm --interactive --tty --uts=host rhel7.2",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235811r627560_rule,STIG-ID|DKER-EE-002060,STIG-Legacy|SV-104795,STIG-Legacy|V-95657,SWIFT-CSCv1|2.3,Vuln-ID|V-235811",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: UTSMode={{ .HostConfig.UTSMode }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /UTSMode=host/ {print; m+=1} END {if (m == 0) print \"hosts UTS namespace not shared\"}'",
        "expect": "^hosts UTS namespace not shared$"
    },
    "custom_item_31": {
        "system": "Linux",
        "description": "DKER-EE-002070 - The Docker Enterprise default seccomp profile must not be disabled.",
        "info": "Seccomp filtering provides a means for a process to specify a filter for incoming system calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls blocking all others. It should not be disabled unless it hinders the container application usage.\n\nA large number of system calls are exposed to every userland process with many of them going unused for the entire lifetime of the process. Most of the applications do not need all the system calls and thus benefit by having a reduced set of available system calls. The reduced set of system calls reduces the total kernel surface exposed to the application and thus improvises application security.\n\nThe default seccomp profile blocks syscalls, regardless of --cap-add passed to the container. Create a custom seccomp profile in such cases. Disable the default seccomp profile by passing --security-opt=seccomp:unconfined on docker run.\n\nWhen running a container, it uses the default profile unless it is overridden with the --security-opt option.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nBy default, seccomp profiles are enabled. It is not necessary to do anything unless the user wants to modify the seccomp profile. Do not pass unconfined flags to run a container without the default seccomp profile. Refer to seccomp documentation for details.\nhttps://docs.docker.com/engine/security/seccomp/",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235812r627563_rule,STIG-ID|DKER-EE-002070,STIG-Legacy|SV-104797,STIG-Legacy|V-95659,SWIFT-CSCv1|2.3,Vuln-ID|V-235812",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep -v CONTAINER | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /SecurityOpt=\\[.*seccomp:=unconfined.*\\]/ {print; m+=1} END {if (m == 0) print \"seccomp profile is enabled\"}'",
        "expect": "^seccomp profile is enabled$"
    },
    "custom_item_32": {
        "system": "Linux",
        "description": "DKER-EE-002080 - Docker Enterprise exec commands must not be used with privileged option.",
        "info": "Do not use docker exec with --privileged option.\n\nUsing --privileged option in docker exec gives extended Linux capabilities to the command. Do not run docker exec with the --privileged option, especially when running containers with dropped capabilities or with enhanced restrictions. By default, docker exec command runs without --privileged option.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not use --privileged option in docker exec command.\n\nA reference for the docker exec command can be found at https://docs.docker.com/engine/reference/commandline/exec/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235813r627566_rule,STIG-ID|DKER-EE-002080,STIG-Legacy|SV-104799,STIG-Legacy|V-95661,SWIFT-CSCv1|2.3,Vuln-ID|V-235813",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/grep -e 'key=\"docker\"' @AUDIT_LOG_FILES@\\* | /usr/bin/grep exec | /usr/bin/grep privileged | /usr/bin/awk '{ print } END { if (NR==0) print \"exec commands not used with --privileged option\"}'",
        "expect": "^exec commands not used with --privileged option$"
    },
    "custom_item_33": {
        "system": "Linux",
        "description": "DKER-EE-002090 - Docker Enterprise exec commands must not be used with the user option.",
        "info": "Do not docker exec with --user option.\n\nUsing --user option in docker exec executes the command within the container as that user. Do not run docker exec with the --user option , especially when running containers with dropped capabilities or with enhanced restrictions. For example, suppose the container is running as tomcat user (or any other non-root user), it would be possible to run a command through docker exec as rootwith --user=root option.\n\nBy default, docker exec command runs without --user option.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not use --user option in docker exec command.\n\nA reference for the docker exec command can be found at https://docs.docker.com/engine/reference/commandline/exec/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235814r627569_rule,STIG-ID|DKER-EE-002090,STIG-Legacy|SV-104801,STIG-Legacy|V-95663,SWIFT-CSCv1|2.3,Vuln-ID|V-235814",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/grep -e 'key=\"docker\"' @AUDIT_LOG_FILES@\\* | /usr/bin/grep exec | /usr/bin/grep user | /usr/bin/awk '{ print } END { if (NR==0) print \"exec commands not used with --user option\"}'",
        "expect": "^exec commands not used with --user option$"
    },
    "custom_item_34": {
        "system": "Linux",
        "description": "DKER-EE-002100 - cgroup usage must be confirmed in Docker Enterprise.",
        "info": "It is possible to attach to a particular cgroup on container run. Confirming cgroup usage would ensure that containers are running under defined cgroups.\n\nSystem administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default. At run-time, it is possible to attach to a different cgroup other than the one that was expected to be used. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is expected, excess permissions and resources might be granted to the container and thus, can prove to be unsafe.\n\nBy default, containers run under docker cgroup.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not use --cgroup-parent option in docker run command unless needed.\nIf required, document cgroup usage in the SSP.\n\nA reference for the docker run command can be found at https://docs.docker.com/engine/reference/run/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235815r627572_rule,STIG-ID|DKER-EE-002100,STIG-Legacy|SV-104803,STIG-Legacy|V-95665,SWIFT-CSCv1|2.3,Vuln-ID|V-235815",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: CgroupParent={{ .HostConfig.CgroupParent }}' | /usr/bin/awk 'BEGIN { m=0 } /CgroupParent=.+$/ { print; m+=1 } END {if (m == 0) print \"cgroup usage is confirmed\"}'",
        "expect": "^cgroup usage is confirmed$"
    },
    "custom_item_35": {
        "system": "Linux",
        "description": "DKER-EE-002110 - All Docker Enterprise containers must be restricted from acquiring additional privileges.",
        "info": "Restrict the container from acquiring additional privileges via suid or sgid bits.\n\nA process can set the no_new_priv bit in the kernel. It persists across fork, clone, and execve. The no_new_priv bit ensures that the process or its children processes do not gain any additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot less dangerous because there is no possibility of subverting privileged binaries.\n\nno_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not allowed to the current process.\n\nBy default, new privileges are not restricted.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nStart the containers as below:\n\ndocker run --rm -it --security-opt=no-new-privilegesA reference for the docker run command can be found at https://docs.docker.com/engine/reference/run/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235816r672380_rule,STIG-ID|DKER-EE-002110,STIG-Legacy|SV-104805,STIG-Legacy|V-95667,SWIFT-CSCv1|2.3,Vuln-ID|V-235816",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs -L 1 /usr/bin/docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}' | /usr/bin/awk 'BEGIN { m=0 } $2 !~ /SecurityOpt=\\\\[.*no-new-privileges.*\\\\]/ {print; m+=1} END {if (m == 0) print \"all containers are restricted from acquiring additional privileges\"}'",
        "expect": "^all containers are restricted from acquiring additional privileges$"
    },
    "custom_item_36": {
        "system": "Linux",
        "description": "DKER-EE-002120 - The Docker Enterprise hosts user namespace must not be shared.",
        "info": "Do not share the host's user namespaces with the containers.\n\nUser namespaces ensure that a root process inside the container will be mapped to a non-root process outside the container. Sharing the user namespaces of the host with the container thus does not isolate users on the host with users on the containers.\n\nBy default, the host user namespace is shared with the containers until user namespace support is enabled.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nDo not share user namespaces between host and containers.\n\nFor example, do not run a container as below:\n\ndocker run --rm -it --userns=host",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235817r627578_rule,STIG-ID|DKER-EE-002120,STIG-Legacy|SV-104807,STIG-Legacy|V-95669,SWIFT-CSCv1|2.3,Vuln-ID|V-235817",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: UsernsMode={{ .HostConfig.UsernsMode }}' | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /UsernsMode=host/ {print; m+=1} END {if (m == 0) print \"hosts user namespace not shared\"}'",
        "expect": "^hosts user namespace not shared$"
    },
    "custom_item_37": {
        "system": "Linux",
        "description": "DKER-EE-002130 - The Docker Enterprise socket must not be mounted inside any containers.",
        "info": "The docker socket docker.sock (Linux) and \\\\.\\pipe\\docker_engine (Windows) should not be mounted inside a container, with the exception case being during the installation of Universal Control Plane (UCP) component of Docker Enterprise as it is required for install.\n\nIf the docker socket is mounted inside a container it would allow processes running within the container to execute docker commands which effectively allows for full control of the host.\n\nBy default, docker.sock (linux) and \\\\.\\pipe\\docker_engine (windows) is not mounted inside containers.",
        "solution": "When using the -v/--volume flags to mount volumes to containers in a docker run command, do not use docker.sock as a volume.\n\nA reference for the docker run command can be found at https://docs.docker.com/engine/reference/run/.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|I,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-235818r627581_rule,STIG-ID|DKER-EE-002130,STIG-Legacy|SV-104809,STIG-Legacy|V-95671,SWIFT-CSCv1|2.3,Vuln-ID|V-235818",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/awk '{print $1}' | /usr/bin/grep CONTAINER | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' | /usr/bin/grep -i \"docker.sock\\|docker_engine\" | /usr/bin/awk 'BEGIN { m=0 } $2 ~ /UsernsMode=host/ {print; m+=1} END {if (m == 0) print \"no sockets mounted inside containers\"}'",
        "expect": "^no sockets mounted inside containers$"
    },
    "custom_item_38": {
        "system": "Linux",
        "description": "DKER-EE-002150 - Docker Enterprise privileged ports must not be mapped within containers.",
        "info": "The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes are not allowed to use them for various security reasons. Docker allows a container port to be mapped to a privileged port.\n\nBy default, if the user does not specifically declare the container port to host port mapping, Docker automatically and correctly maps the container port to one available in 49153-65535 block on the host. But, Docker allows a container port to be mapped to a privileged port on the host if the user explicitly declared it. This is so because containers are executed with NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The privileged ports receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise.\n\nDo not map the container ports to privileged host ports when starting a container. Also, ensure that there is no such container to host privileged port mapping declarations in the Dockerfile.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CAT|I,CCI|CCI-000382,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,Rule-ID|SV-235819r627584_rule,STIG-ID|DKER-EE-002150,STIG-Legacy|SV-104811,STIG-Legacy|V-95673,SWIFT-CSCv1|2.3,Vuln-ID|V-235819",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}' | /usr/bin/awk 'BEGIN { m=0 } /HostPort:(102[0-3]|10[0-1][0-9]|[1-9][0-9]\\{0,2\\}|0)\\]]/ { print; m+=1 } END { if (m == 0) print \"no container ports mapped to host port numbers < 1024\"}'",
        "expect": "^no container ports mapped to host port numbers < 1024$"
    },
    "custom_item_39": {
        "system": "Linux",
        "description": "DKER-EE-002160 - Docker Enterprise incoming container traffic must be bound to a specific host interface.",
        "info": "By default, Docker containers can make connections to the outside world, but the outside world cannot connect to containers. Each outgoing connection will appear to originate from one of the host machine's own IP addresses. Only allow container services to be contacted through a specific external interface on the host machine.\n\nIf there are multiple network interfaces on the host machine, the container can accept connections on the exposed ports on any network interface. This might not be desired and may not be secured. Many times, a particular interface is exposed externally and services such as intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those interfaces to screen incoming public traffic. Hence, do not accept incoming connections on any interface. Only allow incoming connections from a particular external interface.\n\nBy default, Docker exposes the container ports on 0.0.0.0, the wildcard IP address that will match any possible incoming network interface on the host machine.",
        "solution": "Bind the container port to a specific host interface on the desired host port.\n\nExample:\ndocker run --detach --publish 10.2.3.4:49153:80 nginx\n\nIn the example above, the container port 80 is bound to the host port on 49153 and would accept incoming connection only from 10.2.3.4 external interface.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CAT|II,CCI|CCI-000382,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,Rule-ID|SV-235820r627587_rule,STIG-ID|DKER-EE-002160,STIG-Legacy|SV-104813,STIG-Legacy|V-95675,SWIFT-CSCv1|2.3,Vuln-ID|V-235820",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}' | /usr/bin/awk 'BEGIN { m=0 } /HostIp:0.0.0.0/ { print; m+=1 } END { if (m == 0) print \"container traffic is bound to specific interface\"}'",
        "expect": "^container traffic is bound to specific interface$"
    },
    "custom_item_40": {
        "system": "Linux",
        "description": "DKER-EE-002770 - Docker Enterprise container health must be checked at runtime.",
        "info": "If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd parameter at container runtime for checking container health.\n\nOne of the important security triads is availability. If the container image being used does not have a pre-defined HEALTHCHECK instruction, use the --health-cmd parameter to check container health at runtime. Based on the reported health status, take necessary actions.\n\nBy default, health checks are not done at container runtime.",
        "solution": "Run the container using --health-cmd and the other parameters, or include the HEALTHCHECK instruction in the Dockerfiles.\n\nExample:\ndocker run -d --health-cmd='stat /etc/passwd || exit 1' nginx",
        "reference": "800-53|SC-5(2),800-53r5|SC-5(2),CAT|II,CCI|CCI-001095,CSF|PR.DS-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5(2),NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1,Rule-ID|SV-235827r627608_rule,STIG-ID|DKER-EE-002770,STIG-Legacy|SV-104825,STIG-Legacy|V-95687,SWIFT-CSCv1|6.4,Vuln-ID|V-235827",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Health={{ .State.Health.Status }}' 2>/dev/null | /usr/bin/awk 'BEGIN { m=0 } !/Health=healthy/ { print; m+=1 } END { if (m == 0) print \"all containers reporting as healthy\"}'",
        "expect": "^all containers reporting as healthy$"
    },
    "custom_item_41": {
        "system": "Linux",
        "description": "DKER-EE-002780 - PIDs cgroup limits must be used in Docker Enterprise.",
        "info": "Use --pids-limit flag at container runtime.\n\nAttackers could launch a fork bomb with a single command inside the container. This fork bomb can crash the entire system and requires a restart of the host to make the system functional again. PIDs cgroup --pids-limit will prevent this kind of attacks by restricting the number of forks that can happen inside a container at a given time.\n\nThe Default value for --pids-limit is 0 which means there is no restriction on the number of forks. Also, note that PIDs cgroup limit works only for the kernel versions 4.3+.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nUse --pids-limit flag while launching the container with an appropriate value.\n\nExample:\ndocker run -it --pids-limit 100In the above example, the number of processes allowed to run at any given time is set to 100. After a limit of 100 concurrently running processes is reached, docker would restrict any new process creation.",
        "reference": "800-53|SC-5(2),800-53r5|SC-5(2),CAT|II,CCI|CCI-001095,CSF|PR.DS-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5(2),NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1,Rule-ID|SV-235828r627611_rule,STIG-ID|DKER-EE-002780,STIG-Legacy|SV-104827,STIG-Legacy|V-95689,SWIFT-CSCv1|6.4,Vuln-ID|V-235828",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: PidsLimit={{ .HostConfig.PidsLimit }}' | /usr/bin/awk 'BEGIN { m=0 } /PidsLimit=(0|-1)/ { print; m+=1 } END { if (m == 0) print \"cgroup limits are used\"}'",
        "expect": "^cgroup limits are used$"
    },
    "custom_item_42": {
        "system": "Linux",
        "description": "DKER-EE-003200 - Docker Enterprise images must be built with the USER instruction to prevent containers from running as root.",
        "info": "Both the Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. To meet the requirements of this control, configure LDAP integration. Apply an applicable set of role-based access control (RBAC) policies using the built-in capabilities provided by UCP in order to prevent organization-defined software from executing at higher privilege levels than users executing the software.\n\nBy default, Docker images that are built without the USER instruction will be run as containers as root. Therefore, it is imperative that container images include the USER instruction and that the referenced UID/GID has been defined in the base image or previous instruction set.",
        "solution": "Set a non-root user for all container images.\n\nInclude the following line in all Dockerfiles where username or ID refers to the user that can be found in the container base image or one that is created as part of that same Dockerfile:\n\nUSER [username/ID]",
        "reference": "800-171|3.1.5,800-53|AC-6(8),800-53r5|AC-6(8),CAT|II,CCI|CCI-002233,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-235830r627617_rule,STIG-ID|DKER-EE-003200,STIG-Legacy|SV-104831,STIG-Legacy|V-95693,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-235830",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps -q -a | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: User={{ .Config.User }}' | /usr/bin/awk 'BEGIN { m=0 } /User=(0|root|\\s*$)/ { print; m+=1 } END { if (m == 0) print \"all containers are running as non-root users\"}'",
        "expect": "^all containers are running as non-root users$"
    },
    "custom_item_43": {
        "system": "Linux",
        "description": "DKER-EE-003230 - An appropriate Docker Engine - Enterprise log driver plugin must be configured to collect audit events from Universal Control Plane (UCP) and Docker Trusted Registry (DTR).",
        "info": "The UCP and DTR components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where '*' designates a wildcard of exclusions): '/_ping', '/ca', '/auth', '/trustedregistryca', '/kubeauth', '/metrics', '/info', '/version*', '/debug', '/openid_keys', '/apidocs', 'kubernetesdocs' and '/manage'. Audit log verbosity can be set to one of the following levels: 'none', 'metadata', or 'request'. To meet the requirements of this control, the 'request' verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n'none': audit logging is disabled\n\n'metadata':\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n'request': includes all fields from the 'metadata' level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000343, SRG-APP-000381, SRG-APP-000492, SRG-APP-000493, SRG-APP-000494, SRG-APP-000495, SRG-APP-000496, SRG-APP-000497, SRG-APP-000498, SRG-APP-000499, SRG-APP-000501, SRG-APP-000502, SRG-APP-000503, SRG-APP-000504, SRG-APP-000505, SRG-APP-000506, SRG-APP-000507, SRG-APP-000508, SRG-APP-000509, SRG-APP-000510, SRG-APP-000500",
        "solution": "via CLI:\n\nLinux: As a trusted user on the host operating system, open the /etc/docker/daemon.json file for editing. If the file doesn't exist, it must be created.\n\nSet the 'log-driver' property to one of the following: 'syslog', 'awslogs', 'splunk', 'gcplogs', 'logentries' or '' (whereis the naming of a third-party Docker logging driver plugin). Configure the 'log-opts' object as required by the selected 'log-driver'.\n\nSave the file. Restart the docker daemon.",
        "reference": "800-171|3.1.7,800-171|3.3.1,800-171|3.3.2,800-171|3.4.5,800-53|AC-6(9),800-53|AU-12c.,800-53|CM-5(1),800-53r5|AC-6(9),800-53r5|AU-12c.,800-53r5|CM-5(1),CAT|II,CCI|CCI-000172,CCI|CCI-001814,CCI|CCI-002234,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.2(d),CN-L3|8.1.4.3(a),CN-L3|8.1.10.6(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.AC-4,CSF|PR.IP-1,CSF|PR.PT-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ISO/IEC-27001|A.12.4.3,ITSG-33|AC-6,ITSG-33|AU-12c.,ITSG-33|CM-5(1),NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SM8,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.1,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-235831r627620_rule,STIG-ID|DKER-EE-003230,STIG-Legacy|SV-104833,STIG-Legacy|V-95695,SWIFT-CSCv1|5.1,SWIFT-CSCv1|6.4,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,TBA-FIISB|45.1.1,Vuln-ID|V-235831",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"log-driver\"]",
        "regex": ".*",
        "expect": "(syslog|awslogs|splunk|gcplogs|logentries|@LOGGING_DRIVER_PLUGIN@)"
    },
    "custom_item_44": {
        "system": "Linux",
        "description": "DKER-EE-003310 - The Docker Enterprise max-size and max-file json-file drivers logging options in the daemon.json configuration file must be configured to allocate audit record storage capacity for Universal Control Plane (UCP) and Docker Trusted Registry (DTR) per the requirements set forth by the System Security Plan (SSP) - max-size",
        "info": "By default, the UCP and DTR components of Docker Enterprise leverage the 'json-file' Engine logging driver. This driver has configurable 'max-size' and 'max-file' options which are applicable in the context of this control. The 'max-size' option defines the maximum size of the log before it is rolled. By default it is set to 'unlimited' and is never rolled. The 'max-file' option defines the maximum number of log files that can be present whereby if rolling the logs creates excess files, the oldest file is removed. This setting is only effective when 'max-size' is also set. By default, 'max-file' is set to '1'.\n\nThe Docker Engine - Enterprise audit logs are stored in default locations according to the chart on this site https://docs.docker.com/config/daemon/#read-the-logs. For the Engine's daemon logs, allocate sufficient storage for the default log locations on the underlying host operating system per the requirements set forth by the SSP.",
        "solution": "This fix only applies to the Docker Engine - Enterprise component of Docker Enterprise.\n\nvia CLI:\n\nLinux: Execute the following commands as a trusted user on the host operating system:\n\nOpen '/etc/docker/daemon.json' for editing. If the file doesn't exist, it must be created.\n\nSet the 'log-opts' object and its 'max-size' and 'max-file' properties according to values defined in the SSP.\n\nSave the file. Restart the Docker daemon.",
        "reference": "800-53|AU-4,800-53r5|AU-4,CAT|II,CCI|CCI-001849,CSF|PR.DS-4,CSF|PR.PT-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-235832r695335_rule,STIG-ID|DKER-EE-003310,STIG-Legacy|SV-104835,STIG-Legacy|V-95697,Vuln-ID|V-235832",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"log-opts\"].[\"max-size\"].",
        "regex": ".*",
        "expect": "(-1|\\\\d+[mkg])"
    },
    "custom_item_45": {
        "description": "Check that log-opts:max-size is set since max-file is only effective if max-size is also set.",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"log-opts\"].[\"max-size\"].",
        "regex": ".*",
        "expect": "(-1|\\\\d+[mkg])"
    },
    "custom_item_46": {
        "system": "Linux",
        "description": "DKER-EE-003310 - The Docker Enterprise max-size and max-file json-file drivers logging options in the daemon.json configuration file must be configured to allocate audit record storage capacity for Universal Control Plane (UCP) and Docker Trusted Registry (DTR) per the requirements set forth by the System Security Plan (SSP) - max-file",
        "info": "By default, the UCP and DTR components of Docker Enterprise leverage the 'json-file' Engine logging driver. This driver has configurable 'max-size' and 'max-file' options which are applicable in the context of this control. The 'max-size' option defines the maximum size of the log before it is rolled. By default it is set to 'unlimited' and is never rolled. The 'max-file' option defines the maximum number of log files that can be present whereby if rolling the logs creates excess files, the oldest file is removed. This setting is only effective when 'max-size' is also set. By default, 'max-file' is set to '1'.\n\nThe Docker Engine - Enterprise audit logs are stored in default locations according to the chart on this site https://docs.docker.com/config/daemon/#read-the-logs. For the Engine's daemon logs, allocate sufficient storage for the default log locations on the underlying host operating system per the requirements set forth by the SSP.",
        "solution": "This fix only applies to the Docker Engine - Enterprise component of Docker Enterprise.\n\nvia CLI:\n\nLinux: Execute the following commands as a trusted user on the host operating system:\n\nOpen '/etc/docker/daemon.json' for editing. If the file doesn't exist, it must be created.\n\nSet the 'log-opts' object and its 'max-size' and 'max-file' properties according to values defined in the SSP.\n\nSave the file. Restart the Docker daemon.",
        "reference": "800-53|AU-4,800-53r5|AU-4,CAT|II,CCI|CCI-001849,CSF|PR.DS-4,CSF|PR.PT-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-235832r695335_rule,STIG-ID|DKER-EE-003310,STIG-Legacy|SV-104835,STIG-Legacy|V-95697,Vuln-ID|V-235832",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"log-opts\"].[\"max-file\"].",
        "regex": ".*",
        "expect": "\\\\d+"
    },
    "custom_item_47": {
        "system": "Linux",
        "description": "DKER-EE-003320 - All Docker Engine - Enterprise nodes must be configured with a log driver plugin that sends logs to a remote log aggregation system (SIEM).",
        "info": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where '*' designates a wildcard of exclusions): '/_ping', '/ca', '/auth', '/trustedregistryca', '/kubeauth', '/metrics', '/info', '/version*', '/debug', '/openid_keys', '/apidocs', 'kubernetesdocs' and '/manage'. Audit log verbosity can be set to one of the following levels: 'none', 'metadata', or 'request'. To meet the requirements of this control, the 'request' verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n'none': audit logging is disabled\n\n'metadata':\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n'request': includes all fields from the 'metadata' level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
        "solution": "via CLI:\n\nLinux: As a trusted user on the host operating system, open the /etc/docker/daemon.json file for editing. If the file doesn't exist, it must be created.\n\nSet the 'log-driver' property to one of the following: 'syslog', 'awslogs', 'splunk', 'gcplogs', 'logentries' or '' (whereis the naming of a third-party Docker logging driver plugin). Configure the 'log-opts' object as required by the selected 'log-driver' to ensure log aggregation is configured.\n\nSave the file. Restart the docker daemon.\n\nConfigure the selected log system to send Docker events to a log aggregation server or SIEM.",
        "reference": "800-53|AU-4(1),800-53r5|AU-4(1),CAT|II,CCI|CCI-001851,CSF|PR.DS-4,CSF|PR.PT-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-235833r627626_rule,STIG-ID|DKER-EE-003320,STIG-Legacy|SV-104837,STIG-Legacy|V-95699,Vuln-ID|V-235833",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "json_transform": ".[\"log-driver\"]",
        "regex": ".*",
        "expect": "(syslog|awslogs|splunk|gcplogs|logentries|@LOGGING_DRIVER_PLUGIN@)"
    },
    "custom_item_48": {
        "system": "Linux",
        "description": "DKER-EE-003560 - Docker Enterprise network ports on all running containers must be limited to what is needed.",
        "info": "By itself, Docker Engine - Enterprise is configured by default to listen for API requests via a UNIX domain socket (or IPC socket) created at /var/run/docker.sock on supported Linux distributions and via a named pipe at npipe:////./pipe/docker_engine on Windows Server 2016 and newer. In this configuration, this control is not applicable. Docker Engine - Enterprise can also be configured to listen for API requests via additional socket types, including both TCP and FD (only on supported systemd-based Linux distributions). If configured to listen for API requests via the TCP socket type over TCP port 2376 and with the daemon flags and SSL certificates, then, at a minimum, TLS 1.2 is used for encryption; therefore this control is applicable and is inherently met in this configuration. If configured to listen for API requests via the TCP socket type, but without TLS verification and certifications, then the instance remains vulnerable and is not properly configured to meet the requirements of this control. If configured to listen for API requests via the fd socket type, then this control is not applicable. More information can be found at https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option. The TCP socket binding should be disabled when running Engine as part of a UCP cluster.\n\nA container can be run just with the ports defined in the Dockerfile for its image or can be arbitrarily passed run time parameters to open a list of ports. Additionally, over time, Dockerfiles may undergo various changes and the list of exposed ports may or may not be relevant to the application running within the container. Opening unneeded ports increase the attack surface of the container and the containerized application. Per the requirements set forth by the System Security Plan (SSP), ensure only needed ports are open on all running containers.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Publish only needed ports for all container images and running containers per the requirements set forth by the SSP.\n\nUpdate Dockerfiles and set or remove any EXPOSE lines accordingly.\n\nTo ignore exposed ports as defined by a Dockerfile during container start, do not pass the '-P/--publish-all' flag to the Docker commands.\n\nWhen publishing needed ports at container start, use the '-p/--publish' flag to explicitly define the ports that are needed.",
        "reference": "800-171|3.4.7,800-53|CM-7(1)(b),800-53r5|CM-7(1)(b),CAT|II,CCI|CCI-001762,CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7(1),NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,Rule-ID|SV-235837r627638_rule,STIG-ID|DKER-EE-003560,STIG-Legacy|SV-104845,STIG-Legacy|V-95707,SWIFT-CSCv1|2.3,Vuln-ID|V-235837",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps -q | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}'",
        "expect": "Manual_Review"
    },
    "custom_item_49": {
        "system": "Linux",
        "description": "DKER-EE-003610 - Only trusted, signed images must be on Universal Control Plane (UCP) in Docker Enterprise.",
        "info": "The UCP and Docker Trusted Registry (DTR) components of Docker Enterprise can be used in concert to perform an integrity check of organization-defined software at startup. In the context of Docker Enterprise, software would be analogous to Docker images that have been pulled from trusted or untrusted sources. Docker Hub is the most common upstream endpoint for retrieving Docker images. However, only 'Docker Certified' images on Docker Hub are considered trusted and come with SLAs and trusted signatures from their respective vendors. All other images from Docker Hub or other external registries must be carefully inspected and triaged prior to use. Docker Content Trust (DCT) provides for content integrity checking mechanisms on Docker images. DCT can be combined with LDAP, DTR and UCP to enforce image signatures from users/accounts in LDAP. Therefore, to meet the requirements of this control, it is imperative that UCP has LDAP integration enabled and that content trust enforcement is enabled and properly configured.\n\nAn operational requirement of this control is that of the required use of an established continuous integration and deployment workflow that effectively dictates exactly what software is allowed to run on UCP.\n\nSatisfies: SRG-APP-000386, SRG-APP-000480, SRG-APP-000484, SRG-APP-000485, SRG-APP-000475\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "This fix only applies to the UCP component of Docker Enterprise.\n\nPull and run only signed images on a UCP cluster.\n\nvia CLI:\n\nLinux: When using a client bundle, set the 'DOCKER_CONTENT_TRUST' environment variable to a value of '1' prior the execution of any of the following commands: docker push, docker build, docker create, docker pull and docker run.",
        "reference": "800-171|3.4.8,800-53|CM-7(5)(b),800-53|SI-7(1),800-53|SI-7(5),800-53|SI-7(8),800-53r5|CM-7(5)(b),800-53r5|SI-7(1),800-53r5|SI-7(5),800-53r5|SI-7(8),CAT|II,CCI|CCI-001774,CCI|CCI-002710,CCI|CCI-002715,CCI|CCI-002723,CCI|CCI-002724,CN-L3|7.1.3.5(b),CSF|PR.DS-6,CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,ITSG-33|SI-7,ITSG-33|SI-7a.,ITSG-33|SI-7(1),NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,PCI-DSSv3.2.1|10.5.5,QCSC-v1|3.2,Rule-ID|SV-235839r627644_rule,STIG-ID|DKER-EE-003610,STIG-Legacy|SV-104849,STIG-Legacy|V-95711,SWIFT-CSCv1|2.3,SWIFT-CSCv1|6.2,SWIFT-CSCv1|6.4,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-235839",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker trust inspect $(/usr/bin/docker images | /usr/bin/awk '{print $1 \":\" $2}') 2>1",
        "expect": "Manual_Review"
    },
    "custom_item_50": {
        "system": "Linux",
        "description": "DKER-EE-004030 - The on-failure container restart policy must be is set to 5 in Docker Enterprise.",
        "info": "Using the --restart flag in docker run command, specify a restart policy for how a container should or should not be restarted on exit. Choose the on-failure restart policy and limit the restart attempts to 5.\n\nIf indefinitely trying to start the container, it could possibly lead to a denial of service on the host. It could be an easy way to do a distributed denial of service attack especially if there are many containers on the same host. Additionally, ignoring the exit status of the container and always attempting to restart the container leads to non-investigation of the root cause behind containers getting terminated. If a container gets terminated, investigate on the reason behind it instead of just attempting to restart it indefinitely. Thus, it is recommended to use on-failure restart policy and limit it to maximum of 5 restart attempts.\n\nThe container would attempt to restart only for 5 times.\n\nBy default, containers are not configured with restart policies. Hence, containers do not attempt to restart of their own.",
        "solution": "If a container is desired to be restarted on its own, then, for example, start the container as below:\n\ndocker run --detach --restart=on-failure:5 nginx",
        "reference": "800-53|SC-5,800-53r5|SC-5,CAT|II,CCI|CCI-002385,CSF|DE.CM-1,CSF|PR.DS-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5,ITSG-33|SC-5a.,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1,Rule-ID|SV-235843r627656_rule,STIG-ID|DKER-EE-004030,STIG-Legacy|SV-104859,STIG-Legacy|V-95721,Vuln-ID|V-235843",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --all | /usr/bin/grep -iv \"ucp\\|kube\\|dtr\" | /usr/bin/grep -v CONTAINER | /usr/bin/awk '{print $1}' | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: RestartPolicyName={{ .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{ .HostConfig.RestartPolicy.MaximumRetryCount }}' | /usr/bin/awk 'BEGIN { m=0 } { if ( $2 ~ /RestartPolicyName=on-failure/ && $3 ~ /MaximumRetryCount=[0-5]/ ) {print; m+=1} else if ( $2 ~ /RestartPolicyName=failure/ && $3 ~ /MaximumRetryCount=[^0-5]/ ) {print; m+=1} if  ( $2 ~ /RestartPolicyName=always/ ) {print; m+=1} } END { if (m == 0) print \"on-failure container restart policy is set\"}'",
        "expect": "^on-failure container restart policy is set$"
    },
    "custom_item_51": {
        "system": "Linux",
        "description": "DKER-EE-004040 - The Docker Enterprise default ulimit must not be overwritten at runtime unless approved in the System Security Plan (SSP).",
        "info": "The default ulimit is set at the Docker daemon level. However, override the default ulimit setting, if needed, during container runtime.\n\nulimit provides control over the resources available to the shell and to processes started by it. Setting system resource limits judiciously prevents many disasters such as a fork bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and in-turn can make the system unusable.\n\nThe default ulimit set at the Docker daemon level should be honored. If the default ulimit settings are not appropriate for a particular container instance, override them as an exception. But, do not make this a practice. If most of the container instances are overriding default ulimit settings, consider changing the default ulimit settings to something that is appropriate for your needs.\n\nIf the ulimits are not set properly, the desired resource control might not be achieved and might even make the system unusable.\n\nContainer instances inherit the default ulimit settings set at the Docker daemon level.",
        "solution": "This fix only applies to the use of Docker Engine - Enterprise on a Linux host operating system.\n\nOnly override the default ulimit settings if needed and if so, document these settings in the SSP.\n\nFor example, to override default ulimit settings start a container as below:\n\ndocker run --ulimit nofile=1024:1024 --interactive --tty [image] [command]",
        "reference": "800-53|SC-5,800-53r5|SC-5,CAT|II,CCI|CCI-002385,CSF|DE.CM-1,CSF|PR.DS-4,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5,ITSG-33|SC-5a.,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1,Rule-ID|SV-235844r627659_rule,STIG-ID|DKER-EE-004040,STIG-Legacy|SV-104861,STIG-Legacy|V-95723,Vuln-ID|V-235844",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker ps --quiet --all | /usr/bin/xargs /usr/bin/docker inspect --format '{{ .Id }}: Ulimits={{ .HostConfig.Ulimits }}' /usr/bin/awk -F: 'BEGIN { m=0 } $2 !~ /Ulimits=@DEFAULT_ULIMIT@/ {print; m+=1} END { if (m == 0) print \"ulimits are properly set\"}'",
        "expect": "^ulimits are properly set$"
    },
    "custom_item_52": {
        "system": "Linux",
        "description": "DKER-EE-004130 - Docker Enterprise older Universal Control Plane (UCP) and Docker Trusted Registry (DTR) images must be removed from all cluster nodes upon upgrading.",
        "info": "When upgrading either the UCP or DTR components of Docker Enterprise, the newer images are pulled (or unpacked if offline) onto Engine nodes in a cluster. Once the upgrade is complete, one must manually remove all old image version from the cluster nodes to meet the requirements of this control.\n\nWhen upgrading the Docker Engine - Enterprise component of Docker Enterprise, the old package version is automatically replaced.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Remove all outdated UCP and DTR container images from all nodes in the cluster:\n\nvia CLI: As a Docker EE admin, execute the following commands using a client bundle:\n\ndocker rmi -f $(docker images --filter reference='docker/ucp*:[outdated_tags]' -q)\ndocker rmi -f $(docker images --filter reference='docker/dtr*:[outdated_tags]' -q)",
        "reference": "800-171|3.14.1,800-53|SI-2(6),800-53r5|SI-2(6),CAT|II,CCI|CCI-002617,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-2,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,PCI-DSSv3.2.1|6.2,PCI-DSSv4.0|6.3,PCI-DSSv4.0|6.3.3,QCSC-v1|11.2,Rule-ID|SV-235845r627662_rule,STIG-ID|DKER-EE-004130,STIG-Legacy|SV-104863,STIG-Legacy|V-95725,SWIFT-CSCv1|2.2,Vuln-ID|V-235845",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker images --filter reference='docker/[ucp|dtr]*'",
        "expect": "Manual_Review"
    },
    "custom_item_53": {
        "system": "Linux",
        "description": "DKER-EE-005060 - Docker Swarm must have the minimum number of manager nodes.",
        "info": "Ensure that the minimum number of required manager nodes is created in a swarm.\n\nManager nodes within a swarm have control over the swarm and change its configuration modifying security parameters. Having excessive manager nodes could render the swarm more susceptible to compromise. If fault tolerance is not required in the manager nodes, a single node should be elected as a manger. If fault tolerance is required then the smallest practical odd number to achieve the appropriate level of tolerance should be configured.",
        "solution": "If an excessive number of managers is configured, the excess can be demoted to worker using the following command:\n\ndocker node demoteWhere is the node ID value of the manager to be demoted.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235848r627671_rule,STIG-ID|DKER-EE-005060,STIG-Legacy|SV-104869,STIG-Legacy|V-95731,SWIFT-CSCv1|2.3,Vuln-ID|V-235848",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker info --format '{{ .Swarm.Managers }}'",
        "expect": "[123]"
    },
    "custom_item_54": {
        "description": "Check to see if docker.service file exist. It is NOT a finding if it does not exist.",
        "cmd": "/usr/bin/systemctl show -p FragmentPath docker.service | /usr/bin/awk -F= '{print $2}' | /usr/bin/awk '{print} END {if (NF > 0) print \"docker.service file exist\"}'",
        "expect": "^docker.service file exist$"
    },
    "custom_item_55": {
        "system": "Linux",
        "description": "DKER-EE-005170 - Docker Enterprise docker.service file ownership must be set to root:root.",
        "info": "Verify that the docker.service file ownership and group-ownership are correctly set to root.\n\ndocker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the ownership and group-ownership for this file is correctly set to root.",
        "solution": "Step 1: Find out the file location:\n\nsystemctl show -p FragmentPath docker.service\n\nStep 2: If the file exists, execute the below command with the correct file path to set the ownership and group ownership for the file to root.\n\nExample:\nchown root:root /usr/lib/systemd/system/docker.service",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235851r627680_rule,STIG-ID|DKER-EE-005170,STIG-Legacy|SV-104877,STIG-Legacy|V-95739,SWIFT-CSCv1|2.3,Vuln-ID|V-235851",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker_service=`/usr/bin/systemctl show -p FragmentPath docker.service | /usr/bin/awk -F= '{print $2}'`; /usr/bin/stat -c %U:%G $docker_service | /usr/bin/grep -v root:root | /usr/bin/awk '{print} END {if (NR == 0) print \"file ownership is properly set\"}'",
        "expect": "^file ownership is properly set$"
    },
    "custom_item_56": {
        "system": "Linux",
        "description": "DKER-EE-005180 - Docker Enterprise docker.service file permissions must be set to 644 or more restrictive.",
        "info": "Verify that the docker.service file permissions are correctly set to 644 or more restrictive.\n\ndocker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should not be writable by any other user other than root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the file permissions are correctly set to 644.",
        "solution": "Step 1: Find out the file location:\n\nsystemctl show -p FragmentPath docker.service\n\nStep 2: If the file exists, execute the below command with the correct file path to set the file permissions to 644.\n\nExample:\nchmod 644 /usr/lib/systemd/system/docker.service",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235852r627683_rule,STIG-ID|DKER-EE-005180,STIG-Legacy|SV-104879,STIG-Legacy|V-95741,SWIFT-CSCv1|2.3,Vuln-ID|V-235852",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker_service=`/usr/bin/systemctl show -p FragmentPath docker.service | /usr/bin/awk -F= '{print $2}'`; /usr/bin/stat -c %a $docker_service | /usr/bin/awk '{if ($1 ~ /6[04][04]/) print \"docker.service file permissions are properly set\"}'",
        "expect": "^docker.service file permissions are properly set$"
    },
    "custom_item_57": {
        "description": "Check to see if docker.socket file exist. It is NOT a finding if it does not exist.",
        "cmd": "/usr/bin/systemctl show -p FragmentPath docker.socket | /usr/bin/awk -F= '{print $2}' | /usr/bin/awk '{print} END {if (NF > 0) print \"docker.socket file exist\"}'",
        "expect": "^docker.socket file exist$"
    },
    "custom_item_58": {
        "system": "Linux",
        "description": "DKER-EE-005190 - Docker Enterprise docker.socket file ownership must be set to root:root.",
        "info": "Verify that the docker.socket file ownership and group ownership is correctly set to root.\n\ndocker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the ownership and group-ownership for this file is correctly set to root.",
        "solution": "Step 1: Find out the file location:\n\nsystemctl show -p FragmentPath docker.socket\n\nStep 2: If the file exists, execute the below command with the correct file path to set the ownership and group ownership for the file to root.\n\nExample:\nchown root:root /usr/lib/systemd/system/docker.socket",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235853r627686_rule,STIG-ID|DKER-EE-005190,STIG-Legacy|SV-104881,STIG-Legacy|V-95743,SWIFT-CSCv1|2.3,Vuln-ID|V-235853",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker_socket=`/usr/bin/systemctl show -p FragmentPath docker.socket | /usr/bin/awk -F= '{print $2}'`; /usr/bin/stat -c %U:%G $docker_socket | /usr/bin/grep -v root:root | /usr/bin/awk '{print} END {if (NR == 0) print \"docker.socket file ownership properly set\"}'",
        "expect": "^docker.socket file ownership properly set$"
    },
    "custom_item_59": {
        "system": "Linux",
        "description": "DKER-EE-005200 - Docker Enterprise docker.socket file permissions must be set to 644 or more restrictive.",
        "info": "Verify that the docker.socket file permissions are correctly set to 644 or more restrictive.\n\ndocker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the file permissions for this file are correctly set to 644.",
        "solution": "Step 1: Find out the file location:\n\nsystemctl show -p FragmentPath docker.socket\n\nStep 2: If the file exists, execute the below command with the correct file path to set the file permissions to 644.\n\nExample:\nchmod 644 /usr/lib/systemd/system/docker.socket",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235854r627689_rule,STIG-ID|DKER-EE-005200,STIG-Legacy|SV-104883,STIG-Legacy|V-95745,SWIFT-CSCv1|2.3,Vuln-ID|V-235854",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "docker_socket=`/usr/bin/systemctl show -p FragmentPath docker.socket | /usr/bin/awk -F= '{print $2}'`; /usr/bin/stat -c %a $docker_socket | /usr/bin/awk '{if ($1 ~ /6[04][04]/) print \"docker.socket file permissions properly set\"; else print \"fail\"}'",
        "expect": "^docker.socket file permissions properly set$"
    },
    "custom_item_60": {
        "description": "Check to see if we are using CentOS.",
        "file": "/etc/os-release",
        "regex": "^ID=",
        "expect": "^ID=\"centos\"$"
    },
    "custom_item_61": {
        "description": "Check to see if we are using CentOS.",
        "file": "/etc/os-release",
        "regex": "^ID=",
        "expect": "^ID=\"rhel\"$"
    },
    "custom_item_62": {
        "system": "Linux",
        "description": "DKER-EE-005210 - Docker Enterprise /etc/docker directory ownership must be set to root:root - CentOS/RHEL",
        "info": "Verify that the /etc/docker directory ownership and group-ownership is correctly set to root.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should be owned and group-owned by root to maintain the integrity of the directory.\n\nBy default, the ownership and group-ownership for this directory is correctly set to root.",
        "solution": "Set the ownership and group-ownership for the directory to root.\n\nOn CentOS host OS's, execute the following command:\nchown root:root /etc/docker\n\nOn Ubuntu host OS's, execute the following command:\nchown root:root /etc/default/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235855r627692_rule,STIG-ID|DKER-EE-005210,STIG-Legacy|SV-104885,STIG-Legacy|V-95747,SWIFT-CSCv1|2.3,Vuln-ID|V-235855",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker",
        "owner": "root",
        "group": "root"
    },
    "custom_item_63": {
        "system": "Linux",
        "description": "DKER-EE-005220 - Docker Enterprise /etc/docker directory permissions must be set to 755 or more restrictive - CentOS/RHEL",
        "info": "Verify that the /etc/docker directory permissions are correctly set to 755 or more restrictive.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should only be writable by root to maintain the integrity of the directory.\n\nBy default, the permissions for this directory are correctly set to 755.",
        "solution": "set the permissions for the directory to 755.\n\nExecute the following command:\nchmod 755 /etc/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235856r627695_rule,STIG-ID|DKER-EE-005220,STIG-Legacy|SV-104887,STIG-Legacy|V-95749,SWIFT-CSCv1|2.3,Vuln-ID|V-235856",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker",
        "mask": "022"
    },
    "custom_item_64": {
        "description": "Check to see if we are using Ubuntu.",
        "file": "/etc/lsb-release",
        "regex": "^DISTRIB_ID=",
        "expect": "^DISTRIB_ID=\"Ubuntu\"$"
    },
    "custom_item_65": {
        "system": "Linux",
        "description": "DKER-EE-005210 - Docker Enterprise /etc/docker directory ownership must be set to root:root - Ubuntu",
        "info": "Verify that the /etc/docker directory ownership and group-ownership is correctly set to root.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should be owned and group-owned by root to maintain the integrity of the directory.\n\nBy default, the ownership and group-ownership for this directory is correctly set to root.",
        "solution": "Set the ownership and group-ownership for the directory to root.\n\nOn CentOS host OS's, execute the following command:\nchown root:root /etc/docker\n\nOn Ubuntu host OS's, execute the following command:\nchown root:root /etc/default/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235855r627692_rule,STIG-ID|DKER-EE-005210,STIG-Legacy|SV-104885,STIG-Legacy|V-95747,SWIFT-CSCv1|2.3,Vuln-ID|V-235855",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/default/docker",
        "owner": "root",
        "group": "root"
    },
    "custom_item_66": {
        "system": "Linux",
        "description": "DKER-EE-005220 - Docker Enterprise /etc/docker directory permissions must be set to 755 or more restrictive - Ubuntu",
        "info": "Verify that the /etc/docker directory permissions are correctly set to 755 or more restrictive.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should only be writable by root to maintain the integrity of the directory.\n\nBy default, the permissions for this directory are correctly set to 755.",
        "solution": "set the permissions for the directory to 755.\n\nExecute the following command:\nchmod 755 /etc/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235856r627695_rule,STIG-ID|DKER-EE-005220,STIG-Legacy|SV-104887,STIG-Legacy|V-95749,SWIFT-CSCv1|2.3,Vuln-ID|V-235856",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/default/docker",
        "mask": "022"
    },
    "custom_item_67": {
        "system": "Linux",
        "description": "DKER-EE-005230 - Docker Enterprise registry certificate file ownership must be set to root:root.",
        "info": "Verify that all the registry certificate files (usually found under /etc/docker/certs.d/directory) are owned and group-owned by root.\n\n/etc/docker/certs.d/directory contains Docker registry certificates. These certificate files must be owned and group-owned by root to maintain the integrity of the certificates.\n\nBy default, the ownership and group-ownership for registry certificate files is correctly set to root.",
        "solution": "Set the ownership and group-ownership for the registry certificate files to root.\n\nRun the following command:\nchown root:root /etc/docker/certs.d//*",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235857r627698_rule,STIG-ID|DKER-EE-005230,STIG-Legacy|SV-104889,STIG-Legacy|V-95751,SWIFT-CSCv1|2.3,Vuln-ID|V-235857",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/certs.d/@REGISTRY_NAME@/*",
        "owner": "root",
        "group": "root"
    },
    "custom_item_68": {
        "system": "Linux",
        "description": "DKER-EE-005240 - Docker Enterprise registry certificate file permissions must be set to 444 or more restrictive.",
        "info": "Verify that all the registry certificate files (usually found under /etc/docker/certs.d/directory) have permissions of 444 or more restrictive.\n\n/etc/docker/certs.d/directory contains Docker registry certificates. These certificate files must have permissions of 444 to maintain the integrity of the certificates.\n\nBy default, the permissions for registry certificate files might not be 444. The default file permissions are governed by the system or user specific umaskvalues.",
        "solution": "Set the permissions for registry certificate files to 444.\n\nRun the following command:\nchmod 444 /etc/docker/certs.d//*",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235858r627701_rule,STIG-ID|DKER-EE-005240,STIG-Legacy|SV-104891,STIG-Legacy|V-95753,SWIFT-CSCv1|2.3,Vuln-ID|V-235858",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/certs.d/@REGISTRY_NAME@/*",
        "mask": "333"
    },
    "custom_item_69": {
        "system": "Linux",
        "description": "DKER-EE-005250 - Docker Enterprise TLS certificate authority (CA) certificate file ownership must be set to root:root.",
        "info": "Verify that the TLS CA certificate file (the file that is passed along with --TLScacert parameter) is owned and group-owned by root.\n\nThe TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the CA certificate.\nBy default, the ownership and group-ownership for TLS CA certificate file is correctly set to root.",
        "solution": "Set the ownership and group-ownership for the TLS CA certificate file to root.\n\nRun the following command:\nchown root:root",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235859r627704_rule,STIG-ID|DKER-EE-005250,STIG-Legacy|SV-104893,STIG-Legacy|V-95755,SWIFT-CSCv1|2.3,Vuln-ID|V-235859",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@TLS_CA_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_70": {
        "system": "Linux",
        "description": "DKER-EE-005260 - Docker Enterprise TLS certificate authority (CA) certificate file permissions must be set to 444 or more restrictive.",
        "info": "Verify that the TLS CA certificate file (the file that is passed along with --TLScacert parameter) has permissions of 444 or more restrictive.\n\nThe TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must have permissions of 444 to maintain the integrity of the CA certificate.\n\nBy default, the permissions for TLS CA certificate file might not be 444. The default file permissions are governed by the system or user specific umask values.",
        "solution": "chmod 444This sets the file permissions of the TLS CA file to 444.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235860r627707_rule,STIG-ID|DKER-EE-005260,STIG-Legacy|SV-104895,STIG-Legacy|V-95757,SWIFT-CSCv1|2.3,Vuln-ID|V-235860",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@TLS_CA_FILE@",
        "mask": "333"
    },
    "custom_item_71": {
        "system": "Linux",
        "description": "DKER-EE-005270 - Docker Enterprise server certificate file ownership must be set to root:root.",
        "info": "Verify that the Docker server certificate file (the file that is passed along with --TLScert parameter) is owned and group-owned by root.\n\nThe Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the certificate.\n\nBy default, the ownership and group-ownership for Docker server certificate file is correctly set to root.",
        "solution": "chown root:rootThis sets the ownership and group-ownership for the Docker server certificate file to root.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235861r627710_rule,STIG-ID|DKER-EE-005270,STIG-Legacy|SV-104897,STIG-Legacy|V-95759,SWIFT-CSCv1|2.3,Vuln-ID|V-235861",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@SERVER_CERTIFICATE_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_72": {
        "system": "Linux",
        "description": "DKER-EE-005280 - Docker Enterprise server certificate file permissions must be set to 444 or more restrictive.",
        "info": "Verify that the Docker server certificate file (the file that is passed along with --TLScert parameter) has permissions of 444 or more restrictive.\n\nThe Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must have permissions of 444 to maintain the integrity of the certificate.\n\nBy default, the permissions for Docker server certificate file might not be 444. The default file permissions are governed by the system or user specific umask values.",
        "solution": "chmod 444This sets the file permissions of the Docker server file to 444.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235862r627713_rule,STIG-ID|DKER-EE-005280,STIG-Legacy|SV-104899,STIG-Legacy|V-95761,SWIFT-CSCv1|2.3,Vuln-ID|V-235862",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@SERVER_CERTIFICATE_FILE@",
        "mask": "333"
    },
    "custom_item_73": {
        "system": "Linux",
        "description": "DKER-EE-005290 - Docker Enterprise server certificate key file ownership must be set to root:root.",
        "info": "Verify that the Docker server certificate key file (the file that is passed along with --TLSkey parameter) is owned and group-owned by root.\n\nThe Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the Docker server certificate.\n\nBy default, the ownership and group-ownership for Docker server certificate key file is correctly set to root.",
        "solution": "chown root:rootThis sets the ownership and group-ownership for the Docker server certificate key file to root.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235863r627716_rule,STIG-ID|DKER-EE-005290,STIG-Legacy|SV-104901,STIG-Legacy|V-95763,SWIFT-CSCv1|2.3,Vuln-ID|V-235863",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@SERVER_CERTIFICATE_KEY_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_74": {
        "system": "Linux",
        "description": "DKER-EE-005300 - Docker Enterprise server certificate key file permissions must be set to 400.",
        "info": "Verify that the Docker server certificate key file (the file that is passed along with --TLSkey parameter) has permissions of 400.\n\nThe Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must have permissions of 400 to maintain the integrity of the Docker server certificate.\n\nBy default, the permissions for Docker server certificate key file might not be 400. The default file permissions are governed by the system or user specific umask values.",
        "solution": "Set the Docker server certificate key file permissions to 400.\n\nRun the following command:\nchmod 400",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235864r627719_rule,STIG-ID|DKER-EE-005300,STIG-Legacy|SV-104903,STIG-Legacy|V-95765,SWIFT-CSCv1|2.3,Vuln-ID|V-235864",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "@SERVER_CERTIFICATE_KEY_FILE@",
        "mask": "377"
    },
    "custom_item_75": {
        "system": "Linux",
        "description": "DKER-EE-005310 - Docker Enterprise socket file ownership must be set to root:docker.",
        "info": "Verify that the Docker socket file is owned by root and group-owned by docker.\n\nDocker daemon runs as root. The default UNIX socket hence must be owned by root. If any other user or process owns this socket, then it might be possible for that non-privileged user or process to interact with Docker daemon. Also, such a non-privileged user or process might interact with containers. This is neither secure nor desired behavior.\n\nAdditionally, the Docker installer creates a UNIX group called docker. Users can be added to this group, and then those users would be able to read and write to default Docker UNIX socket. The membership to the docker group is tightly controlled by the system administrator. If any other group owns this socket, then it might be possible for members of that group to interact with Docker daemon. Also, such a group might not be as tightly controlled as the docker group. This is neither secure nor desired behavior.\n\nHence, the default Docker UNIX socket file must be owned by root and group-owned by docker to maintain the integrity of the socket file.\n\nBy default, the ownership and group-ownership for Docker socket file is correctly set to root:docker.",
        "solution": "chown root:docker /var/run/docker.sock\n\nThis sets the ownership to root and group-ownership to docker for default Docker socket file.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235865r627722_rule,STIG-ID|DKER-EE-005310,STIG-Legacy|SV-104905,STIG-Legacy|V-95767,SWIFT-CSCv1|2.3,Vuln-ID|V-235865",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/var/run/docker.sock",
        "owner": "root",
        "group": "docker"
    },
    "custom_item_76": {
        "system": "Linux",
        "description": "DKER-EE-005320 - Docker Enterprise socket file permissions must be set to 660 or more restrictive.",
        "info": "Verify that the Docker socket file has permissions of 660 or more restrictive.\n\nOnly root and members of docker group should be allowed to read and write to default Docker UNIX socket. Hence, the Docket socket file must have permissions of 660 or more restrictive.\n\nBy default, the permissions for Docker socket file is correctly set to 660.",
        "solution": "chmod 660 /var/run/docker.sock\n\nThis sets the file permissions of the Docker socket file to 660.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235866r627725_rule,STIG-ID|DKER-EE-005320,STIG-Legacy|SV-104907,STIG-Legacy|V-95769,SWIFT-CSCv1|2.3,Vuln-ID|V-235866",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/var/run/docker.sock",
        "mask": "117"
    },
    "custom_item_77": {
        "system": "Linux",
        "description": "DKER-EE-005330 - Docker Enterprise daemon.json file ownership must be set to root:root.",
        "info": "Verify that the daemon.json file ownership and group-ownership is correctly set to root.\n\ndaemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
        "solution": "If docker.daemon does not exist, create the file and set the ownership and group-ownership for the file to root.\n\nRun the following command:\nchown root:root /etc/docker/daemon.json",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235867r627728_rule,STIG-ID|DKER-EE-005330,STIG-Legacy|SV-104909,STIG-Legacy|V-95771,SWIFT-CSCv1|2.3,Vuln-ID|V-235867",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "owner": "root",
        "group": "root"
    },
    "custom_item_78": {
        "system": "Linux",
        "description": "DKER-EE-005340 - Docker Enterprise daemon.json file permissions must be set to 644 or more restrictive.",
        "info": "Verify that the daemon.json file permissions are correctly set to 644 or more restrictive.\n\ndaemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
        "solution": "If docker.daemon does not exist, create the file and set the file permissions for this file to 644.\n\nRun the following command;\nchmod 644 /etc/docker/daemon.json",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235868r627731_rule,STIG-ID|DKER-EE-005340,STIG-Legacy|SV-104911,STIG-Legacy|V-95773,SWIFT-CSCv1|2.3,Vuln-ID|V-235868",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/docker/daemon.json",
        "mask": "133"
    },
    "custom_item_79": {
        "system": "Linux",
        "description": "DKER-EE-005350 - Docker Enterprise /etc/default/docker file ownership must be set to root:root.",
        "info": "Verify that the /etc/default/docker file ownership and group-ownership is correctly set to root.\n\n/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
        "solution": "Set the ownership and group-ownership for the file to root.\n\nRun the following command:\nchown root:root /etc/default/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235869r627734_rule,STIG-ID|DKER-EE-005350,STIG-Legacy|SV-104913,STIG-Legacy|V-95775,SWIFT-CSCv1|2.3,Vuln-ID|V-235869",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/default/docker",
        "owner": "root",
        "group": "root"
    },
    "custom_item_80": {
        "system": "Linux",
        "description": "DKER-EE-005360 - Docker Enterprise /etc/default/docker file permissions must be set to 644 or more restrictive.",
        "info": "Verify that the /etc/default/docker file permissions are correctly set to 644 or more restrictive.\n\n/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
        "solution": "Set the file permissions for this file to 644.\n\nRun the following command:\nchmod 644 /etc/default/docker",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|I,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-235870r627737_rule,STIG-ID|DKER-EE-005360,STIG-Legacy|SV-104915,STIG-Legacy|V-95777,SWIFT-CSCv1|2.3,Vuln-ID|V-235870",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "file": "/etc/default/docker",
        "mask": "133"
    },
    "custom_item_81": {
        "system": "Linux",
        "description": "DKER-EE-006240 - Docker Enterprise data exchanged between Linux containers on different nodes must be encrypted on the overlay network.",
        "info": "Encrypt data exchanged between containers on different nodes on the overlay network.\n\nBy default, data exchanged between containers on different nodes on the overlay network is not encrypted. This could potentially expose traffic between the container nodes.",
        "solution": "Create overlay network with --opt encrypted flag.\n\nExample:\ndocker network create --opt encrypted --driver overlay my-network",
        "reference": "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CAT|II,CCI|CCI-002450,CSF|PR.DS-5,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2,Rule-ID|SV-235872r627743_rule,STIG-ID|DKER-EE-006240,STIG-Legacy|SV-104919,STIG-Legacy|V-95781,Vuln-ID|V-235872",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker swarm unlock-key",
        "expect": "^SWMKEY-[0-9]+-.*$"
    },
    "custom_item_82": {
        "system": "Linux",
        "description": "DKER-EE-006270 - Docker Enterprise Swarm services must be bound to a specific host interface.",
        "info": "By default, the docker swarm services will listen to all interfaces on the host, which may not be necessary for the operation of the swarm where the host has multiple network interfaces.\n\nWhen a swarm is initialized the default value for the --listen-addr flag is 0.0.0.0:2377 which means that the swarm services will listen on all interfaces on the host. If a host has multiple network interfaces this may be undesirable as it may expose the docker swarm services to networks which are not involved in the operation of the swarm.\n\nBy passing a specific IP address to the --listen-addr, a specific network interface can be specified limiting this exposure.",
        "solution": "Rebuild the cluster and utilize the --listen-addr parameter.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CAT|II,CCI|CCI-000382,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,Rule-ID|SV-235873r627746_rule,STIG-ID|DKER-EE-006270,STIG-Legacy|SV-104921,STIG-Legacy|V-95783,SWIFT-CSCv1|2.3,Vuln-ID|V-235873",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/netstat -lt | /usr/bin/grep -i 2377",
        "expect": "^((?!0.0.0.0:2377*).)*$"
    },
    "custom_item_83": {
        "system": "Linux",
        "description": "DKER-EE-002400 - Docker Enterprise Swarm manager must be run in auto-lock mode.",
        "info": "Run Docker swarm manager in auto-lock mode.\n\nWhen Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node's memory. Protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest. This protection could be enabled by initializing swarm with --autolock flag.\n\nWith --autolock enabled, when Docker restarts, unlock the swarm first, using a key encryption key generated by Docker when the swarm was initialized.",
        "solution": "If initializing swarm, use the below command.\n\ndocker swarm init --autolock\nIf setting --autolock on an existing swarm manager node, use the below command.\n\ndocker swarm update --autolock",
        "reference": "800-171|3.5.2,800-53|IA-5(2)(b),800-53r5|IA-5(2)(b),CAT|II,CCI|CCI-000186,CSF|PR.AC-1,DISA_Benchmark|Docker_Enterprise_2-x_Linux-UNIX_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2)(b),NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-235823r627596_rule,STIG-ID|DKER-EE-002400,STIG-Legacy|SV-105141,STIG-Legacy|V-96003,Vuln-ID|V-235823",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Docker_Enterprise_2-x_Linux-UNIX_V2R1_STIG.zip",
        "cmd": "/usr/bin/docker swarm unlock-key",
        "expect": "^SWMKEY-[0-9]+-.*$"
    }
}