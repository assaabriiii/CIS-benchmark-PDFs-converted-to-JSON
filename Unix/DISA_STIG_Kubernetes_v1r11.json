{
    "custom_item_1": {
        "description": "Check if kubelet is running",
        "name": "kubelet"
    },
    "custom_item_2": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_3": {
        "system": "Linux",
        "description": "CNTR-K8-000150 - The Kubernetes Controller Manager must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.",
        "info": "The Kubernetes Controller Manager will prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and key store. To enable the minimum version of TLS to be used by the Kubernetes Controller Manager, the setting 'tls-min-version' must be set.",
        "solution": "Edit the Kubernetes Controller Manager manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--tls-min-version' to 'VersionTLS12' or higher.",
        "reference": "800-171|3.1.13,800-53|AC-17(2),800-53r5|AC-17(2),CAT|II,CCI|CCI-000068,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSF|PR.AC-3,CSF|PR.PT-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17(2),NESA|T5.4.2,NIAv2|AM37,PCI-DSSv3.2.1|2.3,PCI-DSSv4.0|2.2.7,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,Rule-ID|SV-242376r879519_rule,STIG-ID|CNTR-K8-000150,SWIFT-CSCv1|2.6,Vuln-ID|V-242376",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-controller-manager.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*((?!VersionTLS1[0-1]).)*$"
    },
    "custom_item_4": {
        "system": "Linux",
        "description": "CNTR-K8-000160 - The Kubernetes Scheduler must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.",
        "info": "The Kubernetes Scheduler will prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and keystore. To enable the minimum version of TLS to be used by the Kubernetes API Server, the setting 'tls-min-version' must be set.",
        "solution": "Edit the Kubernetes Scheduler manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--tls-min-version' to 'VersionTLS12' or higher.",
        "reference": "800-171|3.1.13,800-53|AC-17(2),800-53r5|AC-17(2),CAT|II,CCI|CCI-000068,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSF|PR.AC-3,CSF|PR.PT-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17(2),NESA|T5.4.2,NIAv2|AM37,PCI-DSSv3.2.1|2.3,PCI-DSSv4.0|2.2.7,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,Rule-ID|SV-242377r879519_rule,STIG-ID|CNTR-K8-000160,SWIFT-CSCv1|2.6,Vuln-ID|V-242377",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-scheduler.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*((?!VersionTLS1[0-1]).)*$"
    },
    "custom_item_5": {
        "system": "Linux",
        "description": "CNTR-K8-000170 - The Kubernetes API Server must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.",
        "info": "The Kubernetes API Server will prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and keystore. To enable the minimum version of TLS to be used by the Kubernetes API Server, the setting 'tls-min-version' must be set.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--tls-min-version' to 'VersionTLS12' or higher.",
        "reference": "800-171|3.1.13,800-53|AC-17(2),800-53r5|AC-17(2),CAT|II,CCI|CCI-000068,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSF|PR.AC-3,CSF|PR.PT-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17(2),NESA|T5.4.2,NIAv2|AM37,PCI-DSSv3.2.1|2.3,PCI-DSSv4.0|2.2.7,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,Rule-ID|SV-242378r879519_rule,STIG-ID|CNTR-K8-000170,SWIFT-CSCv1|2.6,Vuln-ID|V-242378",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-min-version[\\\\s]*=[\\\\s]*((?!VersionTLS1[0-1]).)*$",
        "min_occurrences": "1"
    },
    "custom_item_6": {
        "system": "Linux",
        "description": "CNTR-K8-000180 - The Kubernetes etcd must use TLS to protect the confidentiality of sensitive data during electronic dissemination.",
        "info": "Kubernetes etcd will prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and keystore. To enable the minimum version of TLS to be used by the Kubernetes API Server, the setting '--auto-tls' must be set.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--auto-tls' to 'false'.",
        "reference": "800-171|3.1.13,800-53|AC-17(2),800-53r5|AC-17(2),CAT|II,CCI|CCI-000068,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSF|PR.AC-3,CSF|PR.PT-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17(2),NESA|T5.4.2,NIAv2|AM37,PCI-DSSv3.2.1|2.3,PCI-DSSv4.0|2.2.7,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,Rule-ID|SV-242379r927237_rule,STIG-ID|CNTR-K8-000180,SWIFT-CSCv1|2.6,Vuln-ID|V-242379",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--auto-tls[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--auto-tls[\\\\s]*=[\\\\s]*((?!true).)*$"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "CNTR-K8-000190 - The Kubernetes etcd must use TLS to protect the confidentiality of sensitive data during electronic dissemination.",
        "info": "The Kubernetes API Server will prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and keystore. To enable the minimum version of TLS to be used by the Kubernetes API Server, the setting '--peer-auto-tls' must be set.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--peer-auto-tls' to 'false'.",
        "reference": "800-171|3.1.13,800-53|AC-17(2),800-53r5|AC-17(2),CAT|II,CCI|CCI-000068,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSF|PR.AC-3,CSF|PR.PT-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17(2),NESA|T5.4.2,NIAv2|AM37,PCI-DSSv3.2.1|2.3,PCI-DSSv4.0|2.2.7,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,Rule-ID|SV-242380r927238_rule,STIG-ID|CNTR-K8-000190,SWIFT-CSCv1|2.6,Vuln-ID|V-242380",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--peer-auto-tls[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--peer-auto-tls[\\\\s]*=[\\\\s]*((?!true).)*$"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "CNTR-K8-000220 - The Kubernetes Controller Manager must create unique service accounts for each work payload.",
        "info": "The Kubernetes Controller Manager is a background process that embeds core control loops regulating cluster system state through the API Server. Every process executed in a pod has an associated service account. By default, service accounts use the same credentials for authentication. Implementing the default settings poses a High risk to the Kubernetes Controller Manager. Setting the '--use-service-account-credential' value lowers the attack surface by generating unique service accounts settings for each controller instance.",
        "solution": "Edit the Kubernetes Controller Manager manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--use-service-account-credentials' to 'true'.",
        "reference": "800-171|3.1.1,800-53|AC-2(1),800-53r5|AC-2(1),CAT|I,CCI|CCI-000015,CN-L3|7.1.3.2(d),CSF|PR.AC-1,CSF|PR.AC-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2(1),NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,Rule-ID|SV-242381r927239_rule,STIG-ID|CNTR-K8-000220,Vuln-ID|V-242381",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-controller-manager.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--use-service-account-credentials[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--use-service-account-credentials[\\\\s]*=[\\\\s]*((?!false).)*$"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "CNTR-K8-000270 - The Kubernetes API Server must enable Node,RBAC as the authorization mode.",
        "info": "To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DOD-approved PKIs, all DOD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset.\n\nNode,RBAC is the method within Kubernetes to control access of users and applications. Kubernetes uses roles to grant authorization API requests made by kubelets.\n\nSatisfies: SRG-APP-000340-CTR-000770, SRG-APP-000033-CTR-000095, SRG-APP-000378-CTR-000880, SRG-APP-000033-CTR-000090",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--authorization-mode' to 'Node,RBAC'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242382r927240_rule,STIG-ID|CNTR-K8-000270,TBA-FIISB|31.1,Vuln-ID|V-242382",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--authorization-mode[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--authorization-mode[\\\\s]*=[\\\\s]*Node,RBAC[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_10": {
        "system": "Linux",
        "description": "CNTR-K8-000300 - The Kubernetes Scheduler must have secure binding.",
        "info": "Limiting the number of attack vectors and implementing authentication and encryption on the endpoints available to external sources is paramount when securing the overall Kubernetes cluster. The Scheduler API service exposes port 10251/TCP by default for health and metrics information use. This port does not encrypt or authenticate connections. If this port is exposed externally, an attacker can use this port to attack the entire Kubernetes cluster. By setting the bind address to localhost (i.e., 127.0.0.1), only those internal services that require health and metrics information can access the Scheduler API.",
        "solution": "Edit the Kubernetes Scheduler manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the argument '--bind-address' to '127.0.0.1'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242384r879530_rule,STIG-ID|CNTR-K8-000300,TBA-FIISB|31.1,Vuln-ID|V-242384",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-scheduler.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--bind-address[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--bind-address[\\\\s]*=[\\\\s]*127\\\\.0\\\\.0\\\\.1[\\\\s]*$"
    },
    "custom_item_11": {
        "system": "Linux",
        "description": "CNTR-K8-000310 - The Kubernetes Controller Manager must have secure binding.",
        "info": "Limiting the number of attack vectors and implementing authentication and encryption on the endpoints available to external sources is paramount when securing the overall Kubernetes cluster. The Controller Manager API service exposes port 10252/TCP by default for health and metrics information use. This port does not encrypt or authenticate connections. If this port is exposed externally, an attacker can use this port to attack the entire Kubernetes cluster. By setting the bind address to only localhost (i.e., 127.0.0.1), only those internal services that require health and metrics information can access the Control Manager API.",
        "solution": "Edit the Kubernetes Controller Manager manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the argument '--bind-address' to '127.0.0.1'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242385r879530_rule,STIG-ID|CNTR-K8-000310,TBA-FIISB|31.1,Vuln-ID|V-242385",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-controller-manager.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--bind-address[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--bind-address[\\\\s]*=[\\\\s]*127\\\\.0\\\\.0\\\\.1[\\\\s]*$"
    },
    "custom_item_12": {
        "system": "Linux",
        "description": "CNTR-K8-000320 - The Kubernetes API server must have the insecure port flag disabled.",
        "info": "By default, the API server will listen on two ports. One port is the secure port and the other port is called the 'localhost port'. This port is also called the 'insecure port', port 8080. Any requests to this port bypass authentication and authorization checks. If this port is left open, anyone who gains access to the host on which the Control Plane is running can bypass all authorization and authentication mechanisms put in place, and have full control over the entire cluster.\n\nClose the insecure port by setting the API server's '--insecure-port' flag to '0', ensuring that the '--insecure-bind-address' is not set.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--insecure-port' to '0'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242386r927241_rule,STIG-ID|CNTR-K8-000320,TBA-FIISB|31.1,Vuln-ID|V-242386",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--insecure-port[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--insecure-port[\\\\s]*=[\\\\s]*0[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_13": {
        "system": "Linux",
        "description": "Config readOnlyPort",
        "file": "@CONFIG_FILE@",
        "regex": "^[\\\\s]*readOnlyPort[\\\\s]*[:=][\\\\s]*",
        "expect": "^[\\\\s]*readOnlyPort[\\\\s]*[:=][\\\\s]([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])*[\\\\s]*$"
    },
    "custom_item_14": {
        "system": "Linux",
        "description": "Process readOnlyPort",
        "cmd": "ps -ef | grep [k]ubelet | grep read-only-port | awk '{print} END {if (NR==0) print \"Pass\"; else print \"Fail\"}'",
        "expect": "Pass"
    },
    "custom_item_15": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_16": {
        "system": "Linux",
        "description": "CNTR-K8-000340 - The Kubernetes API server must have the insecure bind address not set.",
        "info": "By default, the API server will listen on two ports and addresses. One address is the secure address and the other address is called the 'insecure bind' address and is set by default to localhost. Any requests to this address bypass authentication and authorization checks. If this insecure bind address is set to localhost, anyone who gains access to the host on which the Control Plane is running can bypass all authorization and authentication mechanisms put in place and have full control over the entire cluster.\n\nClose or set the insecure bind address by setting the API server's '--insecure-bind-address' flag to an IP or leave it unset and ensure that the '--insecure-bind-port' is not set.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nRemove the value of '--insecure-bind-address' setting.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242388r927242_rule,STIG-ID|CNTR-K8-000340,TBA-FIISB|31.1,Vuln-ID|V-242388",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--insecure-bind-address[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--insecure-bind-address[\\\\s]*=[\\\\s]*",
        "min_occurrences": "1"
    },
    "custom_item_17": {
        "system": "Linux",
        "description": "CNTR-K8-000350 - The Kubernetes API server must have the secure port set.",
        "info": "By default, the API server will listen on what is rightfully called the secure port, port 6443. Any requests to this port will perform authentication and authorization checks. If this port is disabled, anyone who gains access to the host on which the Control Plane is running has full control of the entire cluster over encrypted traffic.\n\nOpen the secure port by setting the API server's '--secure-port' flag to a value other than '0'.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--secure-port' to a value greater than '0'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242389r927243_rule,STIG-ID|CNTR-K8-000350,TBA-FIISB|31.1,Vuln-ID|V-242389",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--secure-port[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--secure-port[\\\\s]*=[\\\\s]*[1-9][0-9]*[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_18": {
        "system": "Linux",
        "description": "CNTR-K8-000360 - The Kubernetes API server must have anonymous authentication disabled.",
        "info": "The Kubernetes API Server controls Kubernetes via an API interface. A user who has access to the API essentially has root access to the entire Kubernetes cluster. To control access, users must be authenticated and authorized. By allowing anonymous connections, the controls put in place to secure the API can be bypassed.\n\nSetting '--anonymous-auth' to 'false' also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBACs) are in place to limit the anonymous access, this access should be disabled, and only enabled when necessary.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of  '--anonymous-auth' to 'false'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242390r927244_rule,STIG-ID|CNTR-K8-000360,TBA-FIISB|31.1,Vuln-ID|V-242390",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--anonymous-auth[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--anonymous-auth[\\\\s]*=[\\\\s]*true",
        "min_occurrences": "1"
    },
    "custom_item_19": {
        "system": "Linux",
        "description": "CNTR-K8-000370 - The Kubernetes Kubelet must have anonymous authentication disabled.",
        "info": "A user who has access to the Kubelet essentially has root access to the nodes contained within the Kubernetes Control Plane. To control access, users must be authenticated and authorized. By allowing anonymous connections, the controls put in place to secure the Kubelet can be bypassed.\n\nSetting anonymous authentication to 'false' also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access must be disabled and only enabled when necessary.",
        "solution": "On each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the 'anonymous-auth' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the config file:\nLocate the 'authentication' section and the 'anonymous' subsection. Within the 'anonymous' subsection, set 'enabled' to 'false'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242391r918152_rule,STIG-ID|CNTR-K8-000370,TBA-FIISB|31.1,Vuln-ID|V-242391",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "ps -ef | grep [k]ubelet | grep anonymous-auth | awk '{print} END {if (NR==0) print \"Pass\"; else print \"Fail\"}'",
        "expect": "Pass"
    },
    "custom_item_20": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_21": {
        "system": "Linux",
        "description": "CNTR-K8-000380 - The Kubernetes kubelet must enable explicit authorization.",
        "info": "Kubelet is the primary agent on each node. The API server communicates with each kubelet to perform tasks such as starting/stopping pods. By default, kubelets allow all authenticated requests, even anonymous ones, without requiring any authorization checks from the API server. This default behavior bypasses any authorization controls put in place to limit what users may perform within the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow for the authorization mode must be set to 'Webhook'.",
        "solution": "On each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the '--authorization-mode' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the config file:\nIn the 'authorization' section, set 'mode' to 'Webhook'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242392r918155_rule,STIG-ID|CNTR-K8-000380,TBA-FIISB|31.1,Vuln-ID|V-242392",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[\\\\s]*mode[\\\\s]*[:=][\\\\s]*",
        "expect": "^[\\\\s]*mode[\\\\s]*[:=][\\\\s]*(?i)Webhook(?-i)[\\\\s]*$"
    },
    "custom_item_22": {
        "system": "Linux",
        "description": "CNTR-K8-000380 - The Kubernetes kubelet must enable explicit authorization.",
        "info": "Kubelet is the primary agent on each node. The API server communicates with each kubelet to perform tasks such as starting/stopping pods. By default, kubelets allow all authenticated requests, even anonymous ones, without requiring any authorization checks from the API server. This default behavior bypasses any authorization controls put in place to limit what users may perform within the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow for the authorization mode must be set to 'Webhook'.",
        "solution": "On each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the '--authorization-mode' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the config file:\nIn the 'authorization' section, set 'mode' to 'Webhook'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242392r918155_rule,STIG-ID|CNTR-K8-000380,TBA-FIISB|31.1,Vuln-ID|V-242392",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
        "regex": "^[^#]*--authorization-mode[\\\\s]*=[\\\\s]*",
        "expect": "^[^#]*--authorization-mode[\\\\s]*=[\\\\s]*(?i)Webhook(?-i)[\\\\s]*$"
    },
    "custom_item_23": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_24": {
        "system": "Linux",
        "description": "CNTR-K8-000400 - Kubernetes Worker Nodes must not have sshd service running.",
        "info": "Worker Nodes are maintained and monitored by the Control Plane. Direct access and manipulation of the nodes should not take place by administrators. Worker nodes should be treated as immutable and updated via replacement rather than in-place upgrades.",
        "solution": "To stop the sshd service, run the command:\n\nsystemctl stop sshd\n\nNote: If access to the worker node is through an SSH session, it is important to realize there are two requirements for disabling and stopping the sshd service and they should be done during the same SSH session. Disabling the service must be performed first and then the service stopped to guarantee both settings can be made if the session is interrupted.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242393r879530_rule,STIG-ID|CNTR-K8-000400,TBA-FIISB|31.1,Vuln-ID|V-242393",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "name": "sshd"
    },
    "custom_item_25": {
        "system": "Linux",
        "description": "CNTR-K8-000410 - Kubernetes Worker Nodes must not have the sshd service enabled.",
        "info": "Worker Nodes are maintained and monitored by the Control Plane. Direct access and manipulation of the nodes must not take place by administrators. Worker nodes must be treated as immutable and updated via replacement rather than in-place upgrades.",
        "solution": "To disable the sshd service, run the command:\n\nchkconfig sshd off\n\nNote: If access to the worker node is through an SSH session, it is important to realize there are two requirements for disabling and stopping the sshd service that must be done during the same SSH session. Disabling the service must be performed first and then the service stopped to guarantee both settings can be made if the session is interrupted.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242394r879530_rule,STIG-ID|CNTR-K8-000410,TBA-FIISB|31.1,Vuln-ID|V-242394",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "name": "sshd"
    },
    "custom_item_26": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_27": {
        "system": "Linux",
        "description": "CNTR-K8-000420 - Kubernetes dashboard must not be enabled.",
        "info": "While the Kubernetes dashboard is not inherently insecure on its own, it is often coupled with a misconfiguration of Role-Based Access control (RBAC) permissions that can unintentionally over-grant access. It is not commonly protected with 'NetworkPolicies', preventing all pods from being able to reach it. In increasingly rare circumstances, the Kubernetes dashboard is exposed publicly to the internet.",
        "solution": "Delete the Kubernetes dashboard deployment with the following command:\n\nkubectl delete deployment kubernetes-dashboard --namespace=kube-system",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242395r879530_rule,STIG-ID|CNTR-K8-000420,TBA-FIISB|31.1,Vuln-ID|V-242395",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "kubectl get pods --all-namespaces -l k8s-app=kubernetes-dashboard --kubeconfig /etc/kubernetes/admin.conf",
        "expect": "^No resources found$"
    },
    "custom_item_28": {
        "system": "Linux",
        "description": "CNTR-K8-000430 - Kubernetes Kubectl cp command must give expected access and results.",
        "info": "One of the tools heavily used to interact with containers in the Kubernetes cluster is kubectl. The command is the tool System Administrators used to create, modify, and delete resources. One of the capabilities of the tool is to copy files to and from running containers (i.e., kubectl cp). The command uses the 'tar' command of the container to copy files from the container to the host executing the 'kubectl cp' command. If the 'tar' command on the container has been replaced by a malicious user, the command can copy files anywhere on the host machine. This flaw has been fixed in later versions of the tool. It is recommended to use kubectl versions newer than 1.12.9.",
        "solution": "Upgrade the Control Plane and Worker nodes to the latest version of kubectl.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242396r879530_rule,STIG-ID|CNTR-K8-000430,TBA-FIISB|31.1,Vuln-ID|V-242396",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "kubectl version --client",
        "expect": "GitVersion[\\\\s]*:[\\\\s]*\"v1\\\\.(12\\\\.9|12\\\\.[1-9][0-9]+|1[3-9]|2[0-9])"
    },
    "custom_item_29": {
        "system": "Linux",
        "description": "CNTR-K8-000440 - The Kubernetes kubelet staticPodPath must not enable static pods.",
        "info": "Allowing kubelet to set a staticPodPath gives containers with root access permissions to traverse the hosting filesystem. The danger comes when the container can create a manifest file within the /etc/kubernetes/manifests directory. When a manifest is created within this directory, containers are entirely governed by the Kubelet not the API Server. The container is not susceptible to admission control at all. Any containers or pods that are instantiated in this manner are called 'static pods' and are meant to be used for pods such as the API server, scheduler, controller, etc., not workload pods that need to be governed by the API Server.",
        "solution": "On each Control Plane and Worker node, run the command:\nps -ef | grep kubelet\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes kubelet file in the --config directory on the Kubernetes Control Plane and Worker nodes. Remove the setting 'staticPodPath'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242397r927245_rule,STIG-ID|CNTR-K8-000440,TBA-FIISB|31.1,Vuln-ID|V-242397",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[\\\\s]*(?i)staticPodPath(?-i)[\\\\s]*",
        "expect": "^[\\\\s]*(?i)staticPodPath(?-i)[\\\\s]*[:=]"
    },
    "custom_item_30": {
        "system": "Linux",
        "description": "CNTR-K8-000450 - Kubernetes DynamicAuditing must not be enabled - kubelet",
        "info": "Protecting the audit data from change or deletion is important when an attack occurs. One way an attacker can cover their tracks is to change or delete audit records. This will either make the attack unnoticeable or make it more difficult to investigate how the attack took place and what changes were made. The audit data can be protected through audit log file protections and user authorization.\n\nOne way for an attacker to thwart these measures is to send the audit logs to another source and filter the audited results before sending them on to the original target. This can be done in Kubernetes through the configuration of dynamic audit webhooks through the DynamicAuditing flag.",
        "solution": "On the Control Plane, change to the manifests' directory at /etc/kubernetes/manifests and run the command:\ngrep -i feature-gates *\n\nIf any '--feature-gates' setting is available and contains the 'DynamicAuditing' flag, remove the flag or set it to false.\n\nOn the each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the '--feature-gates option' if present.\n\nNote the path to the config file (identified by: --config).\n\nEdit the Kubernetes Kubelet config file:\nIf the 'featureGates' setting is present, remove the 'DynamicAuditing' flag or set the flag to false.\n\nRestart the kubelet service using the following command:\nservice kubelet restart",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242398r918161_rule,STIG-ID|CNTR-K8-000450,TBA-FIISB|31.1,Vuln-ID|V-242398",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[^#]*(?i)DynamicAuditing(?-i)[\\\\s]*:",
        "expect": "^[^#]*(?i)DynamicAuditing(?-i)[\\\\s]*:[\\\\s]*true"
    },
    "custom_item_31": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_32": {
        "system": "Linux",
        "description": "CNTR-K8-000450 - Kubernetes DynamicAuditing must not be enabled - manifest",
        "info": "Protecting the audit data from change or deletion is important when an attack occurs. One way an attacker can cover their tracks is to change or delete audit records. This will either make the attack unnoticeable or make it more difficult to investigate how the attack took place and what changes were made. The audit data can be protected through audit log file protections and user authorization.\n\nOne way for an attacker to thwart these measures is to send the audit logs to another source and filter the audited results before sending them on to the original target. This can be done in Kubernetes through the configuration of dynamic audit webhooks through the DynamicAuditing flag.",
        "solution": "On the Control Plane, change to the manifests' directory at /etc/kubernetes/manifests and run the command:\ngrep -i feature-gates *\n\nIf any '--feature-gates' setting is available and contains the 'DynamicAuditing' flag, remove the flag or set it to false.\n\nOn the each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the '--feature-gates option' if present.\n\nNote the path to the config file (identified by: --config).\n\nEdit the Kubernetes Kubelet config file:\nIf the 'featureGates' setting is present, remove the 'DynamicAuditing' flag or set the flag to false.\n\nRestart the kubelet service using the following command:\nservice kubelet restart",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242398r918161_rule,STIG-ID|CNTR-K8-000450,TBA-FIISB|31.1,Vuln-ID|V-242398",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=",
        "expect": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=.*DynamicAuditing=true"
    },
    "custom_item_33": {
        "system": "Linux",
        "description": "Check for versions less than 1.25",
        "cmd": "kubectl version",
        "expect": "Major:\"1\", Minor:\"([1-9]|1[0-9]|2[0-5])\""
    },
    "custom_item_34": {
        "system": "Linux",
        "description": "CNTR-K8-000460 - Kubernetes DynamicKubeletConfig must not be enabled - manifest",
        "info": "Kubernetes allows a user to configure kubelets with dynamic configurations. When dynamic configuration is used, the kubelet will watch for changes to the configuration file. When changes are made, the kubelet will automatically restart. Allowing this capability bypasses access restrictions and authorizations. Using this capability, an attacker can lower the security posture of the kubelet, which includes allowing the ability to run arbitrary commands in any container running on that node.",
        "solution": "This fix is only applicable to Kubernetes version 1.25 and older.\n\nOn the Control Plane, change to the manifests' directory at /etc/kubernetes/manifests and run the command:\ngrep -i feature-gates *\n\nEdit the manifest files so that every manifest has a '--feature-gates' setting with 'DynamicKubeletConfig=false'.\n\nOn each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the 'feature-gates' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the config file:\nAdd a 'featureGates' setting if one does not yet exist. Add the feature gate 'DynamicKubeletConfig=false'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242399r918164_rule,STIG-ID|CNTR-K8-000460,TBA-FIISB|31.1,Vuln-ID|V-242399",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=.*DynamicKubeletConfig",
        "expect": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=.*DynamicKubeletConfig=false"
    },
    "custom_item_35": {
        "system": "Linux",
        "description": "Check for versions less than 1.25",
        "cmd": "kubectl version",
        "expect": "Major:\"1\", Minor:\"([1-9]|1[0-9]|2[0-5])\""
    },
    "custom_item_36": {
        "system": "Linux",
        "description": "CNTR-K8-000460 - Kubernetes DynamicKubeletConfig must not be enabled - kubelet",
        "info": "Kubernetes allows a user to configure kubelets with dynamic configurations. When dynamic configuration is used, the kubelet will watch for changes to the configuration file. When changes are made, the kubelet will automatically restart. Allowing this capability bypasses access restrictions and authorizations. Using this capability, an attacker can lower the security posture of the kubelet, which includes allowing the ability to run arbitrary commands in any container running on that node.",
        "solution": "This fix is only applicable to Kubernetes version 1.25 and older.\n\nOn the Control Plane, change to the manifests' directory at /etc/kubernetes/manifests and run the command:\ngrep -i feature-gates *\n\nEdit the manifest files so that every manifest has a '--feature-gates' setting with 'DynamicKubeletConfig=false'.\n\nOn each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the 'feature-gates' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the config file:\nAdd a 'featureGates' setting if one does not yet exist. Add the feature gate 'DynamicKubeletConfig=false'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242399r918164_rule,STIG-ID|CNTR-K8-000460,TBA-FIISB|31.1,Vuln-ID|V-242399",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
        "regex": "^[^#]*--feature-gates[\\\\s]*=.*DynamicKubeletConfig",
        "expect": "^[^#]*--feature-gates[\\\\s]*=.*DynamicKubeletConfig=false"
    },
    "custom_item_37": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_38": {
        "system": "Linux",
        "description": "CNTR-K8-000470 - The Kubernetes API server must have Alpha APIs disabled.",
        "info": "Kubernetes allows alpha API calls within the API server. The alpha features are disabled by default since they are not ready for production and likely to change without notice. These features may also contain security issues that are rectified as the feature matures. To keep the Kubernetes cluster secure and stable, these alpha features must not be used.",
        "solution": "Edit any manifest file that contains the '--feature-gates' setting with 'AllAlpha' set to 'true'.\n\nSet the value of 'AllAlpha' to 'false' or remove the setting completely. (AllAlpha - default=false)",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242400r927246_rule,STIG-ID|CNTR-K8-000470,TBA-FIISB|31.1,Vuln-ID|V-242400",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=",
        "expect": "^[\\\\s]*-[\\\\s]+--feature-gates[\\\\s]*=.*AllAlpha=true"
    },
    "custom_item_39": {
        "system": "Linux",
        "description": "CNTR-K8-000610 - The Kubernetes API Server must have an audit log path set.",
        "info": "When Kubernetes is started, components and user services are started for auditing startup events, and events for components and services, it is important that auditing begin on startup. Within Kubernetes, audit data for all components is generated by the API server. To enable auditing to begin, an audit policy must be defined for the events and the information to be stored with each event. It is also necessary to give a secure location where the audit logs are to be stored. If an audit log path is not specified, all audit data is sent to studio.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--audit-log-path' to a secure location for the audit logs to be written.\n\nNote: If the API server is running as a Pod, then the manifest will also need to be updated to mount the host system filesystem where the audit log file is to be written.",
        "reference": "800-53|AU-14(1),800-53r5|AU-14(1),CAT|II,CCI|CCI-001464,CSF|PR.PT-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-14,QCSC-v1|8.2.1,QCSC-v1|13.2,Rule-ID|SV-242402r927248_rule,STIG-ID|CNTR-K8-000610,SWIFT-CSCv1|6.4,Vuln-ID|V-242402",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-log-path[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-log-path[\\\\s]*=[\\\\s]*.+",
        "min_occurrences": "1"
    },
    "custom_item_40": {
        "system": "Linux",
        "description": "CNTR-K8-000700 - Kubernetes API Server must generate audit records that identify what type of event has occurred, identify the source of the event, contain the event results, identify any users, and identify any containers associated with the event.",
        "info": "Within Kubernetes, audit data for all components is generated by the API server. This audit data is important when there are issues, to include security incidents that must be investigated. To make the audit data worthwhile for the investigation of events, it is necessary to have the appropriate and required data logged. To fully understand the event, it is important to identify any users associated with the event.\n\nThe API server policy file allows for the following levels of auditing:\n      None - Do not log events that match the rule.\n      Metadata - Log request metadata (requesting user, timestamp, resource, verb, etc.) but not request or response body.\n      Request - Log event metadata and request body but not response body.\n      RequestResponse - Log event metadata, request, and response bodies.\n\nSatisfies: SRGID:SRG-APP-000092-CTR-000165, SRG-APP-000026-CTR-000070, SRG-APP-000027-CTR-000075, SRG-APP-000028-CTR-000080, SRG-APP-000101-CTR-000205, SRG-APP-000100-CTR-000200, SRG-APP-000100-CTR-000195, SRG-APP-000099-CTR-000190, SRG-APP-000098-CTR-000185, SRG-APP-000095-CTR-000170, SRG-APP-000096-CTR-000175, SRG-APP-000097-CTR-000180, SRG-APP-000507-CTR-001295, SRG-APP-000504-CTR-001280, SRG-APP-000503-CTR-001275, SRG-APP-000501-CTR-001265, SRG-APP-000500-CTR-001260, SRG-APP-000497-CTR-001245, SRG-APP-000496-CTR-001240, SRG-APP-000493-CTR-001225, SRG-APP-000492-CTR-001220, SRG-APP-000343-CTR-000780, SRG-APP-000381-CTR-000905\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of  '--audit-policy-file' to the path of a file with the following content:\n\n    # Log all requests at the RequestResponse level.\n    apiVersion: audit.k8s.io/vX (Where X is the latest apiVersion)\n    kind: Policy\n    rules:\n    - level: RequestResponse\n\nNote: If the API server is running as a Pod, then the manifest will also need to be updated to mount the host system filesystem where the audit policy file resides.",
        "reference": "800-171|3.1.1,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(4),800-53|AC-16a.,800-53|AU-3,800-53|AU-3(1),800-53|AU-3(2),800-53|AU-12c.,800-53r5|AC-2(4),800-53r5|AC-16a.,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-12c.,800-53r5|PL-9,CAT|II,CCI|CCI-000018,CCI|CCI-000130,CCI|CCI-000131,CCI|CCI-000132,CCI|CCI-000133,CCI|CCI-000134,CCI|CCI-000135,CCI|CCI-000172,CCI|CCI-001403,CCI|CCI-001404,CCI|CCI-001487,CCI|CCI-001844,CCI|CCI-002264,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CN-L3|8.1.4.3(b),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.12.4.1,ITSG-33|AC-2(4),ITSG-33|AC-16a.,ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-3(2),ITSG-33|AU-12c.,NESA|T1.3.2,NESA|T1.3.3,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NESA|T5.2.2,NIAv2|AM9a,NIAv2|AM9b,NIAv2|AM9c,NIAv2|AM9d,NIAv2|AM9e,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|SM8,NIAv2|SS28,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,Rule-ID|SV-242403r927249_rule,STIG-ID|CNTR-K8-000700,SWIFT-CSCv1|6.4,TBA-FIISB|36.2.3,TBA-FIISB|45.1.1,Vuln-ID|V-242403",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/audit-policy.yaml",
        "regex": ".+",
        "expect": "MANUAL REVIEW REQUIRED"
    },
    "custom_item_41": {
        "system": "Linux",
        "description": "CNTR-K8-000850 - Kubernetes Kubelet must deny hostname override.",
        "info": "Kubernetes allows for the overriding of hostnames. Allowing this feature to be implemented within the kubelets may break the TLS setup between the kubelet service and the API server. This setting also can make it difficult to associate logs with nodes if security analytics needs to take place. The better practice is to setup nodes with resolvable FQDNs and avoid overriding the hostnames.",
        "solution": "Run the command:\nsystemctl status kubelet.\nNote the path to the drop-in file.\n\nDetermine the path to the environment file(s) with the command:\ngrep -i EnvironmentFile.\n\nRemove the '--hostname-override' option from any environment file where it is present.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-242404r918167_rule,STIG-ID|CNTR-K8-000850,Vuln-ID|V-242404",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "ps -ef | grep kubelet | grep hostname-override | awk '{print} END { if (NR==0) print \"Pass\"; else print \"Fail\" }'",
        "expect": "^Pass"
    },
    "custom_item_42": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_43": {
        "system": "Linux",
        "description": "CNTR-K8-000860 - The Kubernetes manifests must be owned by root.",
        "info": "The manifest files contain the runtime configuration of the API server, proxy, scheduler, controller, and etcd. If an attacker can gain access to these files, changes can be made to open vulnerabilities and bypass user authorizations inherit within Kubernetes with RBAC implemented.",
        "solution": "On the Control Plane, change to the /etc/kubernetes/manifest directory. Run the command:\nchown root:root *\n\nTo verify the change took place, run the command:\nls -l *\n\nAll the manifest files should be owned by root:root.",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-242405r879586_rule,STIG-ID|CNTR-K8-000860,Vuln-ID|V-242405",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "owner": "root",
        "group": "root"
    },
    "custom_item_44": {
        "system": "Linux",
        "description": "CNTR-K8-000880 - The Kubernetes KubeletConfiguration file must be owned by root.",
        "info": "The kubelet configuration file contains the runtime configuration of the kubelet service. If an attacker can gain access to this file, changes can be made to open vulnerabilities and bypass user authorizations inherent within Kubernetes with RBAC implemented.",
        "solution": "On the Control Plane and Worker nodes, change to the --config directory. Run the command:\nchown root:root kubelet\n\nTo verify the change took place, run the command:\nls -l kubelet\n\nThe kubelet file should now be owned by root:root.",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-242406r918168_rule,STIG-ID|CNTR-K8-000880,Vuln-ID|V-242406",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_45": {
        "system": "Linux",
        "description": "CNTR-K8-000890 - The Kubernetes KubeletConfiguration files must have file permissions set to 644 or more restrictive.",
        "info": "The kubelet configuration file contains the runtime configuration of the kubelet service. If an attacker can gain access to this file, changes can be made to open vulnerabilities and bypass user authorizations inherit within Kubernetes with RBAC implemented.",
        "solution": "On the Kubernetes Control Plane and Worker nodes, run the command:\nps -ef | grep kubelet\n\nCheck the config file (path identified by: --config):\n\nChange to the directory identified by --config (example /etc/sysconfig/) and run the command:\nchmod 644 kubelet\n\nTo verify the change took place, run the command:\nls -l kubelet\n\nThe kubelet file should now have the permissions of '644'.",
        "reference": "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-242407r918171_rule,STIG-ID|CNTR-K8-000890,Vuln-ID|V-242407",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_BASEPATH@/*",
        "mask": "133"
    },
    "custom_item_46": {
        "system": "Linux",
        "description": "CNTR-K8-000900 - The Kubernetes manifest files must have least privileges.",
        "info": "The manifest files contain the runtime configuration of the API server, scheduler, controller, and etcd. If an attacker can gain access to these files, changes can be made to open vulnerabilities and bypass user authorizations inherent within Kubernetes with RBAC implemented.\n\nSatisfies: SRG-APP-000133-CTR-000310, SRG-APP-000133-CTR-000295, SRG-APP-000516-CTR-001335",
        "solution": "On both Control Plane and Worker Nodes, change to the /etc/kubernetes/manifest directory. Run the command:\nchmod 644 *\n\nTo verify the change took place, run the command:\nls -l *\n\nAll the manifest files should now have privileges of '644'.",
        "reference": "800-171|3.4.2,800-171|3.4.5,800-53|CM-5(6),800-53|CM-6b.,800-53r5|CM-5(6),800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),ITSG-33|CM-6b.,NESA|T3.2.1,NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-242408r918174_rule,STIG-ID|CNTR-K8-000900,SWIFT-CSCv1|2.3,Vuln-ID|V-242408",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "mask": "133"
    },
    "custom_item_47": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_48": {
        "system": "Linux",
        "description": "CNTR-K8-000910 - Kubernetes Controller Manager must disable profiling.",
        "info": "Kubernetes profiling provides the ability to analyze and troubleshoot Controller Manager events over a web interface on a host port. Enabling this service can expose details about the Kubernetes architecture. This service must not be enabled unless deemed necessary.",
        "solution": "Edit the Kubernetes Controller Manager manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the argument '--profiling value' to 'false'.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7a.,800-53r5|CM-7a.,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.5(c),CN-L3|8.1.4.4(a),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.1,PCI-DSSv4.0|2.2.3,QCSC-v1|3.2,Rule-ID|SV-242409r879587_rule,STIG-ID|CNTR-K8-000910,SWIFT-CSCv1|2.3,Vuln-ID|V-242409",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-controller-manager.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--profiling[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--profiling[\\\\s]*=[\\\\s]*((?!true).)*$"
    },
    "custom_item_49": {
        "system": "Linux",
        "description": "CNTR-K8-000960 - The Kubernetes cluster must use non-privileged host ports for user pods.",
        "info": "Privileged ports are those ports below 1024 and that require system privileges for their use. If containers can use these ports, the container must be run as a privileged user. Kubernetes must stop containers that try to map to these ports directly. Allowing non-privileged ports to be mapped to the container-privileged port is the allowable method when a certain port is needed. An example is mapping port 8080 externally to port 80 in the container.",
        "solution": "For any of the pods that are using host-privileged ports, reconfigure the pod to use a service to map a host non-privileged port to the pod port or reconfigure the image to use non-privileged ports.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CAT|II,CCI|CCI-000382,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,Rule-ID|SV-242414r879588_rule,STIG-ID|CNTR-K8-000960,SWIFT-CSCv1|2.3,Vuln-ID|V-242414",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "kubectl describe pods --all-namespaces --kubeconfig /etc/kubernetes/admin.conf | grep 'Host Port' | egrep ' ([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|10[0-1][0-9]|102[0-4])/' | awk '{print} END {if (NR == 0) print \"no privileged ports\"}'",
        "expect": "no privileged ports"
    },
    "custom_item_50": {
        "system": "Linux",
        "description": "CNTR-K8-001160 - Secrets in Kubernetes must not be stored as environment variables.",
        "info": "Secrets, such as passwords, keys, tokens, and certificates should not be stored as environment variables. These environment variables are accessible inside Kubernetes by the 'Get Pod' API call, and by any system, such as CI/CD pipeline, which has access to the definition file of the container. Secrets must be mounted from files or stored within password vaults.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Any secrets stored as environment variables must be moved to the secret files with the proper protections and enforcements or placed within a password vault.",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CAT|I,CCI|CCI-000196,CSF|PR.AC-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242415r879608_rule,STIG-ID|CNTR-K8-001160,SWIFT-CSCv1|4.1,TBA-FIISB|26.1,Vuln-ID|V-242415",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\\\\n\"}{end}' --all-namespaces --kubeconfig /etc/kubernetes/admin.conf | awk '{print} END {if (NR == 0) print \"no secretKeyRefs\"}'",
        "expect": "no secretKeyRefs"
    },
    "custom_item_51": {
        "system": "Linux",
        "description": "CNTR-K8-001300 - Kubernetes Kubelet must not disable timeouts.",
        "info": "Idle connections from the Kubelet can be used by unauthorized users to perform malicious activity to the nodes, pods, containers, and cluster within the Kubernetes Control Plane. Setting the streamingConnectionIdleTimeout defines the maximum time an idle session is permitted prior to disconnect. Setting the value to '0' never disconnects any idle sessions. Idle timeouts must never be set to '0' and should be defined at '5m' (the default is 4hr).",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--streaming-connection-idle-timeout' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes Kubelet file in the --config directory on the Kubernetes Control Plane:\n\nSet the argument 'streamingConnectionIdleTimeout' to a value of '5m'.\n\nReset the kubelet service using the following command:\nservice kubelet restart",
        "reference": "800-171|3.13.9,800-53|SC-10,800-53r5|SC-10,CAT|II,CCI|CCI-001133,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-10,ITSG-33|SC-10a.,NESA|T2.3.8,NESA|T4.5.1,NESA|T5.5.1,Rule-ID|SV-245541r918210_rule,STIG-ID|CNTR-K8-001300,SWIFT-CSCv1|2.6,Vuln-ID|V-245541",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[\\\\s]*(?i)streamingConnectionIdleTimeout(?-i)[\\\\s]*:[\\\\s]*",
        "expect": "^[\\\\s]*(?i)streamingConnectionIdleTimeout(?-i)[\\\\s]*:[\\\\s]*[5-9]"
    },
    "custom_item_52": {
        "system": "Linux",
        "description": "CNTR-K8-001360 - Kubernetes must separate user functionality.",
        "info": "Separating user functionality from management functionality is a requirement for all the components within the Kubernetes Control Plane. Without the separation, users may have access to management functions that can degrade the Kubernetes architecture and the services being offered, and can offer a method to bypass testing and validation of functions before introduced into a production environment.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Move any user pods that are present in the Kubernetes system namespaces to user specific namespaces.",
        "reference": "800-171|3.13.3,800-53|SC-2,800-53r5|SC-2,CAT|II,CCI|CCI-001082,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-2,ITSG-33|SC-2a.,NESA|T3.4.1,NIAv2|SS15b,Rule-ID|SV-242417r879631_rule,STIG-ID|CNTR-K8-001360,Vuln-ID|V-242417",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "cmd": "kubectl get pods --all-namespaces --kubeconfig /etc/kubernetes/admin.conf | egrep '(kube-node-lease|kube-public|kube-system)'",
        "expect": "MANUAL REVIEW REQUIRED"
    },
    "custom_item_53": {
        "system": "Linux",
        "description": "CNTR-K8-001400 - The Kubernetes API server must use approved cipher suites.",
        "info": "The Kubernetes API server communicates to the kubelet service on the nodes to deploy, update, and delete resources. If an attacker were able to get between this communication and modify the request, the Kubernetes cluster could be compromised. Using approved cypher suites for the communication ensures the protection of the transmitted information, confidentiality, and integrity so that the attacker cannot read or alter this communication.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--tls-cipher-suites' to:\n'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242418r927250_rule,STIG-ID|CNTR-K8-001400,Vuln-ID|V-242418",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-cipher-suites[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-cipher-suites[\\\\s]*=[\\\\s]*TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_54": {
        "system": "Linux",
        "description": "CNTR-K8-001410 - Kubernetes API Server must have the SSL Certificate Authority set.",
        "info": "Kubernetes control plane and external communication are managed by API Server. The main implementation of the API Server is to manage hardware resources for pods and containers using horizontal or vertical scaling. Anyone who can access the API Server can effectively control the Kubernetes architecture. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols such as TLS. TLS provides the Kubernetes API Server with a means to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for API Server, the parameter client-ca-file must be set. This parameter gives the location of the SSL Certificate Authority file used to secure API Server communication.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--client-ca-file' to path containing Approved Organizational Certificate.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242419r918176_rule,STIG-ID|CNTR-K8-001410,Vuln-ID|V-242419",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--client-ca-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--client-ca-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_55": {
        "system": "Linux",
        "description": "CNTR-K8-001420 - Kubernetes Kubelet must have the SSL Certificate Authority set.",
        "info": "Kubernetes container and pod configuration are maintained by Kubelet. Kubelet agents register nodes with the API Server, mount volume storage, and perform health checks for containers and pods. Anyone who gains access to Kubelet agents can effectively control applications within the pods and containers. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols such as TLS. TLS provides the Kubernetes API Server with a means to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for Kubelet, the clientCAFile must be set. This parameter gives the location of the SSL Certificate Authority file used to secure Kubelet communication.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--client-ca-file' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes Kubelet config file:\nSet the value of 'clientCAFile' to a path containing an Approved Organizational Certificate.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242420r918179_rule,STIG-ID|CNTR-K8-001420,Vuln-ID|V-242420",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[\\\\s]*(?i)clientCAFile(?-i)[\\\\s]*:[\\\\s]*",
        "expect": "^[\\\\s]*(?i)clientCAFile(?-i)[\\\\s]*:[\\\\s]*.+"
    },
    "custom_item_56": {
        "system": "Linux",
        "description": "CNTR-K8-001430 - Kubernetes Controller Manager must have the SSL Certificate Authority set.",
        "info": "The Kubernetes Controller Manager is responsible for creating service accounts and tokens for the API Server, maintaining the correct number of pods for every replication controller and provides notifications when nodes are offline.\n\nAnyone who gains access to the Controller Manager can generate backdoor accounts, take possession of, or diminish system performance without detection by disabling system notification. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes Controller Manager with a means to be able to authenticate sessions and encrypt traffic.",
        "solution": "Edit the Kubernetes Controller Manager manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--root-ca-file' to path containing Approved Organizational Certificate.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242421r927251_rule,STIG-ID|CNTR-K8-001430,Vuln-ID|V-242421",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/kube-controller-manager.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--root-ca-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--root-ca-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$"
    },
    "custom_item_57": {
        "system": "Linux",
        "description": "tls-cert-file",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-cert-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-cert-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_58": {
        "system": "Linux",
        "description": "tls-private-key-file",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--tls-private-key-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--tls-private-key-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_59": {
        "system": "Linux",
        "description": "CNTR-K8-001450 - Kubernetes etcd must enable client authentication to secure service.",
        "info": "Kubernetes container and pod configuration are maintained by Kubelet. Kubelet agents register nodes with the API Server, mount volume storage, and perform health checks for containers and pods. Anyone who gains access to Kubelet agents can effectively control applications within the pods and containers. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for Kubelet, the parameter client-cert-auth must be set. This parameter gives the location of the SSL Certificate Authority file used to secure Kubelet communication.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--client-cert-auth' to 'true' for the etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242423r879636_rule,STIG-ID|CNTR-K8-001450,Vuln-ID|V-242423",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--client-cert-auth[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--client-cert-auth[\\\\s]*=[\\\\s]*((?!false).)*$"
    },
    "custom_item_60": {
        "system": "Linux",
        "description": "CNTR-K8-001460 - Kubernetes Kubelet must enable tlsPrivateKeyFile for client authentication to secure service.",
        "info": "Kubernetes container and pod configuration are maintained by Kubelet. Kubelet agents register nodes with the API Server, mount volume storage, and perform health checks for containers and pods. Anyone who gains access to Kubelet agents can effectively control applications within the pods and containers. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols such as TLS. TLS provides the Kubernetes API Server with a means to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for Kubelet, the tlsPrivateKeyFile must be set. This parameter gives the location of the SSL Certificate Authority file used to secure Kubelet communication.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--tls-private-key-file' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes Kubelet config file:\nSet 'tlsPrivateKeyFile' to  a path containing the appropriate private key.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242424r918182_rule,STIG-ID|CNTR-K8-001460,Vuln-ID|V-242424",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[^#]*(?i)tlsPrivateKeyFile(?-i)[\\\\s]*:[\\\\s]*",
        "expect": "^[^#]*(?i)tlsPrivateKeyFile(?-i)[\\\\s]*:[\\\\s]*.+"
    },
    "custom_item_61": {
        "system": "Linux",
        "description": "CNTR-K8-001470 - Kubernetes Kubelet must enable tlsCertFile for client authentication to secure service.",
        "info": "Kubernetes container and pod configuration are maintained by Kubelet. Kubelet agents register nodes with the API Server, mount volume storage, and perform health checks for containers and pods. Anyone who gains access to Kubelet agents can effectively control applications within the pods and containers. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols such as TLS. TLS provides the Kubernetes API Server with a means to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for Kubelet, the parameter tlsCertFile must be set. This parameter gives the location of the SSL Certificate Authority file used to secure Kubelet communication.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--tls-cert-file' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes Kubelet config file:\nSet 'tlsCertFile' to a path containing an Approved Organization Certificate.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242425r918185_rule,STIG-ID|CNTR-K8-001470,Vuln-ID|V-242425",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[^#]*(?i)tlsCertFile(?-i)[\\\\s]*:[\\\\s]*",
        "expect": "^[^#]*(?i)tlsCertFile(?-i)[\\\\s]*:[\\\\s]*.+"
    },
    "custom_item_62": {
        "system": "Linux",
        "description": "CNTR-K8-001480 - Kubernetes etcd must enable client authentication to secure service.",
        "info": "Kubernetes container and pod configuration are maintained by Kubelet. Kubelet agents register nodes with the API Server, mount volume storage, and perform health checks for containers and pods. Anyone who gains access to Kubelet agents can effectively control applications within the pods and containers. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server with a means to be able to authenticate sessions and encrypt traffic.\n\nEtcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive and should be accessible only by authenticated etcd peers in the etcd cluster. The parameter '--peer-client-cert-auth' must be set for etcd to check all incoming peer requests from the cluster for valid client certificates.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--peer-client-cert-auth' to 'true' for the etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242426r927252_rule,STIG-ID|CNTR-K8-001480,Vuln-ID|V-242426",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--peer-client-cert-auth[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--peer-client-cert-auth[\\\\s]*=[\\\\s]*((?!false).)*$"
    },
    "custom_item_63": {
        "system": "Linux",
        "description": "CNTR-K8-001490 - Kubernetes etcd must have a key file for secure communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control the Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter key-file must be set. This parameter gives the location of the key file used to secure etcd communication.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--key-file' to the Approved Organizational Certificate.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242427r879636_rule,STIG-ID|CNTR-K8-001490,Vuln-ID|V-242427",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
        "regex": "^[^#]*--key-file[\\\\s]*=[\\\\s]*",
        "expect": "^[^#]*--key-file[\\\\s]*=[\\\\s]*.+"
    },
    "custom_item_64": {
        "system": "Linux",
        "description": "CNTR-K8-001500 - Kubernetes etcd must have a certificate for communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control a Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter cert-file must be set. This parameter gives the location of the SSL certification file used to secure etcd communication.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--cert-file' to the Approved Organizational Certificate.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242428r879636_rule,STIG-ID|CNTR-K8-001500,Vuln-ID|V-242428",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--cert-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--cert-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$"
    },
    "custom_item_65": {
        "system": "Linux",
        "description": "CNTR-K8-001510 - Kubernetes etcd must have the SSL Certificate Authority set.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control a Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter '--etcd-cafile' must be set. This parameter gives the location of the SSL Certificate Authority file used to secure etcd communication.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--etcd-cafile' to the Certificate Authority for etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242429r927253_rule,STIG-ID|CNTR-K8-001510,Vuln-ID|V-242429",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--etcd-cafile[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--etcd-cafile[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_66": {
        "system": "Linux",
        "description": "CNTR-K8-001520 - Kubernetes etcd must have a certificate for communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control the Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter '--etcd-certfile' must be set. This parameter gives the location of the SSL certification file used to secure etcd communication.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--etcd-certfile' to the certificate to be used for communication with etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242430r927254_rule,STIG-ID|CNTR-K8-001520,Vuln-ID|V-242430",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--etcd-certfile[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--etcd-certfile[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_67": {
        "system": "Linux",
        "description": "CNTR-K8-001530 - Kubernetes etcd must have a key file for secure communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control a Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter '--etcd-keyfile' must be set. This parameter gives the location of the key file used to secure etcd communication.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--etcd-keyfile' to the certificate to be used for communication with etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242431r927255_rule,STIG-ID|CNTR-K8-001530,Vuln-ID|V-242431",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--etcd-keyfile[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--etcd-keyfile[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_68": {
        "system": "Linux",
        "description": "CNTR-K8-001540 - Kubernetes etcd must have peer-cert-file set for secure communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control the Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter peer-cert-file must be set. This parameter gives the location of the SSL certification file used to secure etcd communication.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--peer-cert-file' to the certificate to be used for communication with etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242432r879636_rule,STIG-ID|CNTR-K8-001540,Vuln-ID|V-242432",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--peer-cert-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--peer-cert-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$"
    },
    "custom_item_69": {
        "system": "Linux",
        "description": "CNTR-K8-001550 - Kubernetes etcd must have a peer-key-file set for secure communication.",
        "info": "Kubernetes stores configuration and state information in a distributed key-value store called etcd. Anyone who can write to etcd can effectively control a Kubernetes cluster. Even just reading the contents of etcd could easily provide helpful hints to a would-be attacker. Using authenticity protection, the communication can be protected against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nThe communication session is protected by utilizing transport encryption protocols, such as TLS. TLS provides the Kubernetes API Server and etcd with a means to be able to authenticate sessions and encrypt traffic.\n\nTo enable encrypted communication for etcd, the parameter peer-key-file must be set. This parameter gives the location of the SSL certification file used to secure etcd communication.",
        "solution": "Edit the Kubernetes etcd manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--peer-key-file' to the certificate to be used for communication with etcd.",
        "reference": "800-171|3.13.15,800-53|SC-23,800-53r5|SC-23,CAT|II,CCI|CCI-001184,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-23,ITSG-33|SC-23a.,NESA|T4.5.1,QCSC-v1|5.2.1,Rule-ID|SV-242433r879636_rule,STIG-ID|CNTR-K8-001550,Vuln-ID|V-242433",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/etcd.yaml",
        "regex": "^[\\\\s]*-[\\\\s]+--peer-key-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--peer-key-file[\\\\s]*=[\\\\s]*.+[\\\\s]*$"
    },
    "custom_item_70": {
        "system": "Linux",
        "description": "CNTR-K8-001620 - Kubernetes Kubelet must enable kernel protection.",
        "info": "System kernel is responsible for memory, disk, and task management. The kernel provides a gateway between the system hardware and software. Kubernetes requires kernel access to allocate resources to the Control Plane. Threat actors that penetrate the system kernel can inject malicious code or hijack the Kubernetes architecture. It is vital to implement protections through Kubernetes components to reduce the attack surface.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--protect-kernel-defaults' option if present.\n\nNote the path to the Kubernetes Kubelet config file (identified by --config).\n\nEdit the Kubernetes Kubelet config file:\nSet 'protectKernelDefaults' to 'true'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-53|SC-3,800-53r5|SC-3,CAT|I,CCI|CCI-001084,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-3,ITSG-33|SC-3a.,NESA|T3.4.1,NESA|T4.3.1,NESA|T4.3.2,Rule-ID|SV-242434r918188_rule,STIG-ID|CNTR-K8-001620,Vuln-ID|V-242434",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CONFIG_FILE@",
        "regex": "^[^#]*(?i)protectKernelDefaults(?-i)[\\\\s]*:[\\\\s]*",
        "expect": "^[^#]*(?i)protectKernelDefaults(?-i)[\\\\s]*:[\\\\s]*true[\\\\s]*$"
    },
    "custom_item_71": {
        "system": "Linux",
        "description": "CNTR-K8-002000 - The Kubernetes API server must have the ValidatingAdmissionWebhook enabled.",
        "info": "Enabling the admissions webhook allows for Kubernetes to apply policies against objects that are to be created, read, updated, or deleted. By applying a pod security policy, control can be given to not allow images to be instantiated that run as the root user. If pods run as the root user, the pod then has root privileges to the host system and all the resources it has. An attacker can use this to attack the Kubernetes cluster. By implementing a policy that does not allow root or privileged pods, the pod users are limited in what the pod can do and access.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the argument '--enable-admission-plugins' to include 'ValidatingAdmissionWebhook'.  Each enabled plugin is separated by commas.\n\nNote: It is best to implement policies first and then enable the webhook, otherwise a denial of service may occur.",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|I,CCI|CCI-002263,CSF|PR.AC-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-242436r879719_rule,STIG-ID|CNTR-K8-002000,Vuln-ID|V-242436",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--enable-admission-plugins[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--enable-admission-plugins[\\\\s]*=[\\\\s]*.*ValidatingAdmissionWebhook",
        "min_occurrences": "1"
    },
    "custom_item_72": {
        "system": "Linux",
        "description": "CNTR-K8-002001 - Kubernetes must enable PodSecurity admission controller on static pods and Kubelets.",
        "info": "PodSecurity admission controller is a component that validates and enforces security policies for pods running within a Kubernetes cluster. It is responsible for evaluating the security context and configuration of pods against defined policies.\n\nTo enable PodSecurity admission controller on Static Pods (kube-apiserver, kube-controller-manager, or kube-schedule), the argument '--feature-gates=PodSecurity=true' must be set.\n\nTo enable PodSecurity admission controller on Kubelets, the featureGates PodSecurity=true argument must be set.\n\n(Note: The PodSecurity feature gate is GA as of  v1.25.)",
        "solution": "On the Control Plane, change to the manifests' directory at /etc/kubernetes/manifests and run the command:\ngrep -i feature-gates *\n\nEnsure the argument '--feature-gates=PodSecurity=true' is present in each manifest file.\n\nOn each Control Plane and Worker Node, run the command:\nps -ef | grep kubelet\n\nRemove the '--feature-gates' option if present.\n\nNote the path to the config file (identified by --config).\n\nEdit the Kubernetes Kubelet config file:\nAdd a 'featureGates' setting if one does not yet exist. Add the feature gate 'PodSecurity=true'.\n\nRestart the kubelet service using the following command:\nsystemctl daemon-reload && systemctl restart kubelet",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|I,CCI|CCI-002263,CSF|PR.AC-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-254801r918279_rule,STIG-ID|CNTR-K8-002001,Vuln-ID|V-254801",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--feature-gates=PodSecurity[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--feature-gates=PodSecurity[\\\\s]*=[\\\\s]*(?i)true(?-i)[\\\\s]*$"
    },
    "custom_item_73": {
        "system": "Linux",
        "description": "Pod Security Admission control",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--admission-control-config-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--admission-control-config-file[\\\\s]*=[\\\\s]*.+",
        "min_occurrences": "1"
    },
    "custom_item_74": {
        "system": "Linux",
        "description": "CNTR-K8-002011 - Kubernetes must have a Pod Security Admission control file configured.",
        "info": "An admission controller intercepts and processes requests to the Kubernetes API prior to persistence of the object, but after the request is authenticated and authorized.\n\nKubernetes (> v1.23)offers a built-in Pod Security admission controller to enforce the Pod Security Standards. Pod security restrictions are applied at the namespace level when pods are created.\n\nThe Kubernetes Pod Security Standards define different isolation levels for Pods. These standards define how to restrict the behavior of pods in a clear, consistent fashion.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--admission-control-config-file' to a valid path for the file.\n\nCreate an admission controller config file:\nExample File:\nyaml\napiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\nplugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1beta1\n    kind: PodSecurityConfiguration\n    # Defaults applied when a mode label is not set.\n    defaults:\n      enforce: 'privileged'\n      enforce-version: 'latest'\n    exemptions:\n      # Don't forget to exempt namespaces or users that are responsible for deploying\n      # cluster components, because they need to run privileged containers\n      usernames: ['admin']\n      namespaces: ['kube-system']\n\nSee for more details:\nMigrate from PSP to PSA:\nhttps://kubernetes.io/docs/tasks/configure-pod-container/migrate-from-psp/\n\nBest Practice: https://kubernetes.io/docs/concepts/security/pod-security-policy/#recommended-practice.",
        "reference": "800-53|AC-16a.,800-53r5|AC-16a.,CAT|I,CCI|CCI-002263,CSF|PR.AC-4,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-254800r927257_rule,STIG-ID|CNTR-K8-002011,Vuln-ID|V-254800",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--admission-control-config-file[\\\\s]*=[\\\\s]*",
        "expect": "Manual Review Required",
        "min_occurrences": "1"
    },
    "custom_item_75": {
        "system": "Linux",
        "description": "CNTR-K8-002600 - Kubernetes API Server must configure timeouts to limit attack surface.",
        "info": "Kubernetes API Server request timeouts sets the duration a request stays open before timing out. Since the API Server is the central component in the Kubernetes Control Plane, it is vital to protect this service. If request timeouts were not set, malicious attacks or unwanted activities might affect multiple deployments across different applications or environments. This might deplete all resources from the Kubernetes infrastructure causing the information system to go offline. The '--request-timeout' value must never be set to '0'. This disables the request-timeout feature. (By default, the '--request-timeout' is set to '1 minute'.)",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--request-timeout' greater than '0'.",
        "reference": "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),800-53r5|SC-7(21),CAT|II,CCI|CCI-002415,CN-L3|8.1.10.6(j),CSF|PR.AC-5,CSF|PR.DS-5,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,NESA|T4.5.3,NIAv2|VL6,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,Rule-ID|SV-242438r927258_rule,STIG-ID|CNTR-K8-002600,TBA-FIISB|43.1,Vuln-ID|V-242438",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--request-timeout[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--request-timeout[\\\\s]*=[\\\\s]*[1-9].*$",
        "min_occurrences": "1"
    },
    "custom_item_76": {
        "system": "Linux",
        "description": "CNTR-K8-002620 - Kubernetes API Server must disable basic authentication to protect information in transit.",
        "info": "Kubernetes basic authentication sends and receives request containing username, uid, groups, and other fields over a clear text HTTP communication. Basic authentication does not provide any security mechanisms using encryption standards. PKI certificate-based authentication must be set over a secure channel to ensure confidentiality and integrity. Basic authentication must not be set in the manifest file.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Remove the setting '--basic-auth-file'.",
        "reference": "800-171|3.13.10,800-53|SC-12(3),800-53r5|SC-12(3),CAT|I,CCI|CCI-002448,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12(3),NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-245542r918141_rule,STIG-ID|CNTR-K8-002620,Vuln-ID|V-245542",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--basic-auth-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--basic-auth-file[\\\\s]*=[\\\\s]*",
        "min_occurrences": "1"
    },
    "custom_item_77": {
        "system": "Linux",
        "description": "CNTR-K8-002630 - Kubernetes API Server must disable token authentication to protect information in transit.",
        "info": "Kubernetes token authentication uses password known as secrets in a plaintext file. This file contains sensitive information such as token, username and user uid. This token is used by service accounts within pods to authenticate with the API Server. This information is very valuable for attackers with malicious intent if the service account is privileged having access to the token. With this token a threat actor can impersonate the service account gaining access to the Rest API service.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nRemove the setting '--token-auth-file'.",
        "reference": "800-171|3.13.10,800-53|SC-12(3),800-53r5|SC-12(3),CAT|I,CCI|CCI-002448,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12(3),NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-245543r927259_rule,STIG-ID|CNTR-K8-002630,Vuln-ID|V-245543",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--token-auth-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--token-auth-file[\\\\s]*=[\\\\s]*",
        "min_occurrences": "1"
    },
    "custom_item_78": {
        "system": "Linux",
        "description": "kubelet-client-certificate",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--kubelet-client-certificate[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--kubelet-client-certificate[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_79": {
        "system": "Linux",
        "description": "kubelet-client-key",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--kubelet-client-key[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--kubelet-client-key[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_80": {
        "system": "Linux",
        "description": "CNTR-K8-003110 - The Kubernetes component manifests must be owned by root.",
        "info": "The Kubernetes manifests are those files that contain the arguments and settings for the Control Plane services. These services are etcd, the api server, controller, proxy, and scheduler. If these files can be changed, the scheduler will be implementing the changes immediately. Many of the security settings within the document are implemented through these manifests.",
        "solution": "Change the ownership of the manifest files to root: root by executing the command:\n\nchown root:root /etc/kubernetes/manifests/*",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242444r879887_rule,STIG-ID|CNTR-K8-003110,SWIFT-CSCv1|2.3,Vuln-ID|V-242444",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*.yaml",
        "owner": "root",
        "group": "root"
    },
    "custom_item_81": {
        "system": "Linux",
        "description": "CNTR-K8-003120 - The Kubernetes component etcd must be owned by etcd.",
        "info": "The Kubernetes etcd key-value store provides a way to store data to the Control Plane. If these files can be changed, data to API object and the Control Plane would be compromised. The scheduler will implement the changes immediately. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the manifest files to etcd:etcd by executing the command:\n\nchown etcd:etcd /var/lib/etcd/*",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242445r879887_rule,STIG-ID|CNTR-K8-003120,SWIFT-CSCv1|2.3,Vuln-ID|V-242445",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/var/lib/etcd/*",
        "owner": "etcd",
        "group": "etcd"
    },
    "custom_item_82": {
        "system": "Linux",
        "description": "CNTR-K8-003130 - The Kubernetes conf files must be owned by root.",
        "info": "The Kubernetes conf files contain the arguments and settings for the Control Plane services. These services are controller and scheduler. If these files can be changed, the scheduler will be implementing the changes immediately. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the conf files to root: root by executing the command:\n\nchown root:root /etc/kubernetes/admin.conf\nchown root:root /etc/kubernetes/scheduler.conf\nchown root:root /etc/kubernetes/controller-manager.conf",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242446r879887_rule,STIG-ID|CNTR-K8-003130,SWIFT-CSCv1|2.3,Vuln-ID|V-242446",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/*.conf",
        "owner": "root",
        "group": "root"
    },
    "custom_item_83": {
        "description": "Check if kube-proxy is running",
        "name": "kube-proxy"
    },
    "custom_item_84": {
        "system": "Linux",
        "description": "CNTR-K8-003140 - The Kubernetes Kube Proxy kubeconfig must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes Kube Proxy kubeconfig contain the argument and setting for the Control Planes. These settings contain network rules for restricting network communication between pods, clusters, and networks. If these files can be changed, data traversing between the Kubernetes Control Panel components would be compromised. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the permissions of the Kube Proxy to '644' by executing the command:\n\nchmod 644.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242447r927260_rule,STIG-ID|CNTR-K8-003140,SWIFT-CSCv1|2.3,Vuln-ID|V-242447",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@PROXY_FILE@",
        "mask": "133"
    },
    "custom_item_85": {
        "system": "Linux",
        "description": "CNTR-K8-003150 - The Kubernetes Kube Proxy kubeconfig must be owned by root.",
        "info": "The Kubernetes Kube Proxy kubeconfig contain the argument and setting for the Control Planes. These settings contain network rules for restricting network communication between pods, clusters, and networks. If these files can be changed, data traversing between the Kubernetes Control Panel components would be compromised. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the Kube Proxy to root:root by executing the command:\n\nchown root:root.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242448r927261_rule,STIG-ID|CNTR-K8-003150,SWIFT-CSCv1|2.3,Vuln-ID|V-242448",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@PROXY_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_86": {
        "system": "Linux",
        "description": "CNTR-K8-003160 - The Kubernetes Kubelet certificate authority file must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes kubelet certificate authority file contains settings for the Kubernetes Node TLS certificate authority. Any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate. If this file can be changed, the Kubernetes architecture could be compromised. The scheduler will implement the changes immediately. Many of the security settings within the document are implemented through this file.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the '--client-ca-file' option.\n\nNote the path to the config file (identified by --config).\n\nRun the command:\ngrep -i clientCAFileNote the path to the client ca file.\n\nRun the command:\nchmod 644",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242449r919324_rule,STIG-ID|CNTR-K8-003160,SWIFT-CSCv1|2.3,Vuln-ID|V-242449",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CLIENT_CA_FILE@",
        "mask": "133"
    },
    "custom_item_87": {
        "system": "Linux",
        "description": "CNTR-K8-003170 - The Kubernetes Kubelet certificate authority must be owned by root.",
        "info": "The Kubernetes kube proxy kubeconfig contain the argument and setting for the Control Planes. These settings contain network rules for restricting network communication between pods, clusters, and networks. If these files can be changed, data traversing between the Kubernetes Control Panel components would be compromised. Many of the security settings within the document are implemented through this file.",
        "solution": "On the Control Plane, run the command:\nps -ef | grep kubelet\n\nRemove the 'client-ca-file' option.\n\nNote the path to the config file (identified by --config).\n\nRun the command:\ngrep -i clientCAFileNote the path to the client ca file.\n\nRun the command:\nchown root:root",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242450r918196_rule,STIG-ID|CNTR-K8-003170,SWIFT-CSCv1|2.3,Vuln-ID|V-242450",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "@CLIENT_CA_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_88": {
        "system": "Linux",
        "description": "CNTR-K8-003180 - The Kubernetes component PKI must be owned by root.",
        "info": "The Kubernetes PKI directory contains all certificates (.crt files) supporting secure network communications in the Kubernetes Control Plane. If these files can be modified, data traversing within the architecture components would become unsecure and compromised. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the PKI to root: root by executing the command:\n\nchown -R root:root /etc/kubernetes/pki/",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242451r879887_rule,STIG-ID|CNTR-K8-003180,SWIFT-CSCv1|2.3,Vuln-ID|V-242451",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/pki/*",
        "owner": "root",
        "group": "root"
    },
    "custom_item_89": {
        "system": "Linux",
        "description": "CNTR-K8-003190 - The Kubernetes kubelet KubeConfig must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes kubelet agent registers nodes with the API Server, mounts volume storage for pods, and performs health checks to containers within pods. If these files can be modified, the information system would be unaware of pod or container degradation. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the permissions of the Kubelet to '644' by executing the command:\n\nchmod 644 /etc/kubernetes/kubelet.conf",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242452r918197_rule,STIG-ID|CNTR-K8-003190,SWIFT-CSCv1|2.3,Vuln-ID|V-242452",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/kubelet.conf",
        "mask": "133"
    },
    "custom_item_90": {
        "system": "Linux",
        "description": "CNTR-K8-003200 - The Kubernetes kubelet KubeConfig file must be owned by root.",
        "info": "The Kubernetes kubelet agent registers nodes with the API server and performs health checks to containers within pods. If these files can be modified, the information system would be unaware of pod or container degradation. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the kubelet.conf to root: root by executing the command:\n\nchown root:root /etc/kubernetes/kubelet.conf",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242453r918204_rule,STIG-ID|CNTR-K8-003200,SWIFT-CSCv1|2.3,Vuln-ID|V-242453",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/kubelet.conf",
        "owner": "root",
        "group": "root"
    },
    "custom_item_91": {
        "system": "Linux",
        "description": "CNTR-K8-003210 - The Kubernetes kubeadm.conf must be owned by root.",
        "info": "The Kubernetes kubeeadm.conf contains sensitive information regarding the cluster nodes configuration. If this file can be modified, the Kubernetes Platform Plane would be degraded or compromised for malicious intent. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the ownership of the kubeadm.conf to root: root by executing the command:\n\nchown root:root",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242454r879887_rule,STIG-ID|CNTR-K8-003210,SWIFT-CSCv1|2.3,Vuln-ID|V-242454",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
        "owner": "root",
        "group": "root"
    },
    "custom_item_92": {
        "system": "Linux",
        "description": "CNTR-K8-003220 - The Kubernetes kubeadm.conf must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes kubeadm.conf contains sensitive information regarding the cluster nodes configuration. If this file can be modified, the Kubernetes Platform Plane would be degraded or compromised for malicious intent. Many of the security settings within the document are implemented through this file.",
        "solution": "Change the permissions of kubeadm.conf to '644' by executing the command:\n\nchmod 644",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242455r879887_rule,STIG-ID|CNTR-K8-003220,SWIFT-CSCv1|2.3,Vuln-ID|V-242455",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
        "mask": "133"
    },
    "custom_item_93": {
        "system": "Linux",
        "description": "CNTR-K8-003230 - The Kubernetes kubelet config must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes kubelet agent registers nodes with the API server and performs health checks to containers within pods. If this file can be modified, the information system would be unaware of pod or container degradation.",
        "solution": "Change the permissions of the config.yaml to '644' by executing the command:\n\nchmod 644 /var/lib/kubelet/config.yaml",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242456r879887_rule,STIG-ID|CNTR-K8-003230,SWIFT-CSCv1|2.3,Vuln-ID|V-242456",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/var/lib/kubelet/config.yaml",
        "mask": "133"
    },
    "custom_item_94": {
        "system": "Linux",
        "description": "CNTR-K8-003240 - The Kubernetes kubelet config must be owned by root.",
        "info": "The Kubernetes kubelet agent registers nodes with the API Server and performs health checks to containers within pods. If this file can be modified, the information system would be unaware of pod or container degradation.",
        "solution": "Change the ownership of the kubelet config to 'root: root' by executing the command:\n\nchown root:root /var/lib/kubelet/config.yaml",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242457r879887_rule,STIG-ID|CNTR-K8-003240,SWIFT-CSCv1|2.3,Vuln-ID|V-242457",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/var/lib/kubelet/config.yaml",
        "owner": "root",
        "group": "root"
    },
    "custom_item_95": {
        "description": "Check if kube-apiserver is running",
        "name": "kube-apiserver"
    },
    "custom_item_96": {
        "system": "Linux",
        "description": "CNTR-K8-003260 - The Kubernetes etcd must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes etcd key-value store provides a way to store data to the Control Plane. If these files can be changed, data to API object and Control Plane would be compromised.",
        "solution": "Change the permissions of the manifest files to '644' by executing the command:\n\nchmod -R 644 /var/lib/etcd/*",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242459r918200_rule,STIG-ID|CNTR-K8-003260,SWIFT-CSCv1|2.3,Vuln-ID|V-242459",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/var/lib/etcd/*",
        "mask": "133"
    },
    "custom_item_97": {
        "system": "Linux",
        "description": "CNTR-K8-003270 - The Kubernetes admin kubeconfig must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes admin kubeconfig files contain the arguments and settings for the Control Plane services. These services are controller and scheduler. If these files can be changed, the scheduler will be implementing the changes immediately.",
        "solution": "Change the permissions of the conf files to '644' by executing the command:\n\nchmod 644 /etc/kubernetes/admin.conf\nchmod 644 /etc/kubernetes/scheduler.conf\nchmod 644 /etc/kubernetes/controller-manager.conf",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242460r927262_rule,STIG-ID|CNTR-K8-003270,SWIFT-CSCv1|2.3,Vuln-ID|V-242460",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/*.conf",
        "mask": "133"
    },
    "custom_item_98": {
        "system": "Linux",
        "description": "CNTR-K8-003280 - Kubernetes API Server audit logs must be enabled.",
        "info": "Kubernetes API Server validates and configures pods and services for the API object. The REST operation provides frontend functionality to the cluster share state. Enabling audit logs provides a way to monitor and identify security risk events or misuse of information. Audit logs are necessary to provide evidence in the case the Kubernetes API Server is compromised requiring a Cyber Security Investigation.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the argument '--audit-policy-file' to 'log file directory'.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242461r879887_rule,STIG-ID|CNTR-K8-003280,SWIFT-CSCv1|2.3,Vuln-ID|V-242461",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-policy-file[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-policy-file[\\\\s]*=[\\\\s]*.+",
        "min_occurrences": "1"
    },
    "custom_item_99": {
        "system": "Linux",
        "description": "CNTR-K8-003290 - The Kubernetes API Server must be set to audit log max size.",
        "info": "The Kubernetes API Server must be set for enough storage to retain log information over the period required. When audit logs are large in size, the monitoring service for events becomes degraded. The function of the maximum log file size is to set these limits.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane.\n\nSet the value of '--audit-log-maxsize' to a minimum of '100'.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242462r927263_rule,STIG-ID|CNTR-K8-003290,SWIFT-CSCv1|2.3,Vuln-ID|V-242462",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-log-maxsize[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-log-maxsize[\\\\s]*=[\\\\s]*([1-9][0-9]{2}|[1-9][0-9]{3,})[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_100": {
        "system": "Linux",
        "description": "CNTR-K8-003300 - The Kubernetes API Server must be set to audit log maximum backup.",
        "info": "The Kubernetes API Server must set enough storage to retain logs for monitoring suspicious activity and system misconfiguration, and provide evidence for Cyber Security Investigations.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--audit-log-maxbackup' to a minimum of '10'.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242463r879887_rule,STIG-ID|CNTR-K8-003300,SWIFT-CSCv1|2.3,Vuln-ID|V-242463",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-log-maxbackup[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-log-maxbackup[\\\\s]*=[\\\\s]*([1-9][0-9]|[1-9][0-9]{2,})[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_101": {
        "system": "Linux",
        "description": "CNTR-K8-003310 - The Kubernetes API Server audit log retention must be set.",
        "info": "The Kubernetes API Server must set enough storage to retain logs for monitoring suspicious activity and system misconfiguration, and provide evidence for Cyber Security Investigations.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--audit-log-maxage' to a minimum of '30'.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242464r879887_rule,STIG-ID|CNTR-K8-003310,SWIFT-CSCv1|2.3,Vuln-ID|V-242464",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-log-maxage[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-log-maxage[\\\\s]*=[\\\\s]*([3-9][0-9]|[1-9][0-9]{2,})[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_102": {
        "system": "Linux",
        "description": "CNTR-K8-003320 - The Kubernetes API Server audit log path must be set.",
        "info": "Kubernetes API Server validates and configures pods and services for the API object. The REST operation provides frontend functionality to the cluster share state. Audit logs are necessary to provide evidence in the case the Kubernetes API Server is compromised requiring Cyber Security Investigation. To record events in the audit log the log path value must be set.",
        "solution": "Edit the Kubernetes API Server manifest file in the /etc/kubernetes/manifests directory on the Kubernetes Control Plane. Set the value of '--audit-log-path' to valid location.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242465r879887_rule,STIG-ID|CNTR-K8-003320,SWIFT-CSCv1|2.3,Vuln-ID|V-242465",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/manifests/*",
        "regex": "^[\\\\s]*-[\\\\s]+--audit-log-path[\\\\s]*=[\\\\s]*",
        "expect": "^[\\\\s]*-[\\\\s]+--audit-log-path[\\\\s]*=[\\\\s]*.+[\\\\s]*$",
        "min_occurrences": "1"
    },
    "custom_item_103": {
        "system": "Linux",
        "description": "CNTR-K8-003330 - The Kubernetes PKI CRT must have file permissions set to 644 or more restrictive.",
        "info": "The Kubernetes PKI directory contains all certificates (.crt files) supporting secure network communications in the Kubernetes Control Plane. If these files can be modified, data traversing within the architecture components would become unsecure and compromised.",
        "solution": "Change the ownership of the cert files to '644' by executing the command:\n\nfind /etc/kubernetes/pki -name '*.crt' | xargs chmod 644",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242466r927264_rule,STIG-ID|CNTR-K8-003330,SWIFT-CSCv1|2.3,Vuln-ID|V-242466",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/pki/*.crt",
        "mask": "133"
    },
    "custom_item_104": {
        "system": "Linux",
        "description": "CNTR-K8-003340 - The Kubernetes PKI keys must have file permissions set to 600 or more restrictive.",
        "info": "The Kubernetes PKI directory contains all certificate key files supporting secure network communications in the Kubernetes Control Plane. If these files can be modified, data traversing within the architecture components would become unsecure and compromised.",
        "solution": "Change the ownership of the key files to '600' by executing the command:\n\nfind /etc/kubernetes/pki -name '*.key' | xargs chmod 600",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CAT|II,CCI|CCI-000366,CN-L3|8.1.10.6(d),CSF|PR.IP-1,DISA_Benchmark|Kubernetes_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,NESA|T3.2.1,Rule-ID|SV-242467r918207_rule,STIG-ID|CNTR-K8-003340,SWIFT-CSCv1|2.3,Vuln-ID|V-242467",
        "see_also": "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_Kubernetes_V1R11_STIG.zip",
        "file": "/etc/kubernetes/pki/*.key",
        "mask": "177"
    }
}