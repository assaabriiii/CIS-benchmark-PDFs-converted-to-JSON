{
    "custom_item_1": {
        "description": "Check if kubelet is enabled",
        "service": "kubelet",
        "levels": "2345"
    },
    "custom_item_2": {
        "description": "Check if this is a Docker Vessel/Host",
        "cmd": "/usr/bin/docker info",
        "expect": "Containers"
    },
    "custom_item_3": {
        "description": "Check if Controller Manager is running",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "kube-controller-manager"
    },
    "custom_item_4": {
        "description": "Check if API Server is running",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "etcd "
    },
    "custom_item_5": {
        "description": "Check if kubectl exists",
        "file": "@KUBECTL_PATH@/kubectl"
    },
    "custom_item_6": {
        "system": "Linux",
        "description": "1.6.4 Create network segmentation using Network Policies",
        "info": "Use network policies to isolate your cluster network.\n\nRationale:\n\nRunning different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. 'NetworkPolicy' resources use labels to select pods and define whitelist rules which allow traffic to the selected pods in addition to what is allowed by the isolation policy for a given namespace.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the documentation and create 'NetworkPolicy' objects as you need them.\n\nImpact:\n\nYou need a networking solution which supports 'NetworkPolicy' - simply creating the resource without a controller to implement it will have no effect.",
        "reference": "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),800-53r5|SC-7(21),CN-L3|8.1.10.6(j),CSCv6|14.1,CSF|PR.AC-5,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2M,NESA|T4.5.3,NIAv2|VL6,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get pods --namespace=kube-system",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "1.6.9 Place compensating controls in the form of PSP and RBAC for privileged containers usage - psp",
        "info": "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.\n\nRationale:\n\nA number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster.\n\nImpact:\n\nYou need to carefully tune your PSP and RBAC authorization policy to provide minimal access to the components and various accounts.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get psp",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "1.6.9 Place compensating controls in the form of PSP and RBAC for privileged containers usage - rolebinding",
        "info": "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.\n\nRationale:\n\nA number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster.\n\nImpact:\n\nYou need to carefully tune your PSP and RBAC authorization policy to provide minimal access to the components and various accounts.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get rolebinding",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "1.6.9 Place compensating controls in the form of PSP and RBAC for privileged containers usage - clusterrolebinding",
        "info": "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.\n\nRationale:\n\nA number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster.\n\nImpact:\n\nYou need to carefully tune your PSP and RBAC authorization policy to provide minimal access to the components and various accounts.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get clusterrolebinding",
        "expect": "MANUAL_REVIEW"
    }
}