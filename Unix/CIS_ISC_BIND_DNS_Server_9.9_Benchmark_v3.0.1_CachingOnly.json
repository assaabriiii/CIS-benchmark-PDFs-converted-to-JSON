{
    "custom_item_1": {
        "description": "Check for BIND 9 installation",
        "cmd": "/usr/sbin/named -v",
        "expect": "^[\\\\s]*BIND @PLATFORM_VERSION@.*"
    },
    "custom_item_2": {
        "description": "1.2 Do Not Install a Multi-Use System - chkconfig",
        "info": "Default server configurations often expose a wide variety of services unnecessarily increasing the risk to the system. Just because a server can perform many services doesn't mean it is wise to do so. The number of services and daemons executing on the ISC BIND DNS server should be limited to those necessary, with the DNS service being the only primary function of the server.\n\n  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Disable all unnecessary services or move necessary primary services other than DNS to another server. Leverage the package or services manager for your OS to uninstall or disable unneeded services. On Red Hat systems, the following commands may be used to uninstall a package or disable a service:\n\n  # yum erase\n\n  # systemctl disable .service",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.5,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "chkconfig --list | /bin/grep \\':on\\'",
        "expect": ""
    },
    "custom_item_3": {
        "description": "1.2 Do Not Install a Multi-Use System - systemctl",
        "info": "Default server configurations often expose a wide variety of services unnecessarily increasing the risk to the system. Just because a server can perform many services doesn't mean it is wise to do so. The number of services and daemons executing on the ISC BIND DNS server should be limited to those necessary, with the DNS service being the only primary function of the server.\n\n  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Disable all unnecessary services or move necessary primary services other than DNS to another server. Leverage the package or services manager for your OS to uninstall or disable unneeded services. On Red Hat systems, the following commands may be used to uninstall a package or disable a service:\n\n  # yum erase\n\n  # systemctl disable .service",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.5,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "systemctl -t service --state enabled list-unit-files",
        "expect": ""
    },
    "custom_item_4": {
        "description": "1.3 Dedicated Name Server Role",
        "info": "A name server may be an authoritative name server for one or more domains for which it is configured to provide information. An authoritative-only name server only answers queries on the domains for which it is configured, and will reject queries for other domains. A caching name server will answer queries any domain. The caching name server gets answers by sending recursive DNS queries to other name servers and then storing the answer in its cache to provide a quicker response to the next query for that name. A caching-only name server is not authoritative for any domain. The BIND DNS names server should be configured to be either a caching-only or an authoritative-only name server, but not both.\n\nRationale:\n\nDNS name servers are a foundational part of your network architecture and the security of other network services depend on their integrity. It is important to separate the roles of caching and authoritative name servers to minimize functionality and reduce risk for each server. Each name server role faces different threats in addition to direct attacks on the server. For example, the caching name server faces unique threats of malicious replies with bogus answers or over-sized answers intended to deny service. The authoritative name server is a critical part of the infrastructure should not be exposed to these additional attacks.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Authoritative-Only Name Server:\n\nFor the authoritative-only name server add or modify the allow-recursion statement to only include the localhost to as shown below.\n\noptions {\n. . .\nallow-rescursion { local; };\n\nCaching-Only Name Server:\n\nFor the caching-only name server remove the non-local zone statements from the configuration file and restart the server.",
        "reference": "800-53|SC-22,800-53r5|SC-22,CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-22,ITSG-33|SC-22a.,LEVEL|1S,NESA|T4.5.1,NIAv2|NS17,NIAv2|NS18,NIAv2|NS19,NIAv2|NS20,NIAv2|NS21,NIAv2|NS22,NIAv2|NS23,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*zone.*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - zone Not Found\" }' @NAMED_CONF@",
        "expect": "Manual Review Required"
    },
    "custom_item_5": {
        "description": "Check for BIND via RPM",
        "rpm": "bind-9.0.0-0",
        "operator": "gt"
    },
    "custom_item_6": {
        "description": "Check for BIND via dpkg",
        "cmd": "/usr/bin/dpkg -s bind9 2>&1",
        "expect": "install[\\\\s]+ok[\\\\s]+installed"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "1.5 Installing ISC BIND 9 - named location",
        "info": "The ISC BIND Benchmark recommends using the binary packages provided by your platform vendor for most situations in order to reduce the effort and increase the effectiveness of maintenance and security patches. The Red Hat Enterprise Linux 7 has been used for testing the benchmark.\n\n  Rationale:\n\n  The benefits of using the vendor supplied binaries include:\n\n  - Ease of installation.\n  - It is customized for your OS environment.\n  - It will be tested and have gone through QA procedures.\n  - Additional software you may need is likely to be included, such as chroot setup and startup scripts.\n  - Your vendor will tell you about security issues so you have to look in less places.\n  - Updates to fix security issues will be easier to apply.\n\n  However, building from source is suitable for those that want full control of the build process, prefer to build from source, or do not have a suitable package available for their platform. Source download and build information is available on the ISC website knowledge base at the URL reference below.",
        "solution": "Installation depends on the operating system platform. The following commands were tested on RHEL7.\n\n  # yum install bind\n  . . .\n  # yum install bind-chroot\n  . . .",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|2,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/which named",
        "expect": ".*named"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "2.1 Run BIND as a non-root User - UID",
        "info": "To start BIND you must execute it as the root user. After the initial startup, BIND has the ability to change to a non-root user, allowing it to drop the root privileges.\n\nRationale:\n\nThe reason for configuring BIND to run as a non-root user is to limit the impact in case a future vulnerability is discovered and exploited. This is a common practice, which implements the principal of least privilege. This principle states that an entity, such as a service or user, should be granted only those specific privileges necessary to perform authorized actions. The server will still need to be started as root, but it should be configured to give up the root privilege after listening on port 53. The user ID under which named runs, needs to be created if it does not already exist and needs appropriate access to the DNS configuration and data files. Many systems including Red Hat Linux will come with a named user already created. Usage of the user and group id of 53 in the examples is arbitrary but is intended to be easier to recognize as it matches the listening port number.",
        "solution": "Create the named user and group if it does not already exist. Using a shell of /dev/null is best practice.\n\nif ! id named; then\n groupadd -g 53 named\n useradd -m -u 53 -g 53 -c \"BIND named\" -d /var/named -s /dev/null named\nfi 2>/dev/null\n\nAdd the -u named to the OPTIONS parameters in the /etc/sysconfig/named if not already present.\n\nDefault Value:\n\nThe default named startup parameters include the -u named value.",
        "reference": "800-171|3.1.6,800-53|AC-6(2),800-53r5|AC-6(2),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|5.1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6(2),LEVEL|1S,NESA|T5.1.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "v1=$(awk '/^UID_MIN/ {print $2}' /etc/login.defs);awk -F':' -v \"uidmin=${v1}\" '{ if ($1 == \"named\" && $3 < uidmin) print \"Pass\"; else if ($1 ==\"named\" && $3 > uidmin) print \"Fail\" }' /etc/passwd",
        "expect": "Pass"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "2.1 Run BIND as a non-root User - process -u named",
        "info": "To start BIND you must execute it as the root user. After the initial startup, BIND has the ability to change to a non-root user, allowing it to drop the root privileges.\n\nRationale:\n\nThe reason for configuring BIND to run as a non-root user is to limit the impact in case a future vulnerability is discovered and exploited. This is a common practice, which implements the principal of least privilege. This principle states that an entity, such as a service or user, should be granted only those specific privileges necessary to perform authorized actions. The server will still need to be started as root, but it should be configured to give up the root privilege after listening on port 53. The user ID under which named runs, needs to be created if it does not already exist and needs appropriate access to the DNS configuration and data files. Many systems including Red Hat Linux will come with a named user already created. Usage of the user and group id of 53 in the examples is arbitrary but is intended to be easier to recognize as it matches the listening port number.",
        "solution": "Create the named user and group if it does not already exist. Using a shell of /dev/null is best practice.\n\nif ! id named; then\n groupadd -g 53 named\n useradd -m -u 53 -g 53 -c \"BIND named\" -d /var/named -s /dev/null named\nfi 2>/dev/null\n\nAdd the -u named to the OPTIONS parameters in the /etc/sysconfig/named if not already present.\n\nDefault Value:\n\nThe default named startup parameters include the -u named value.",
        "reference": "800-171|3.1.6,800-53|AC-6(2),800-53r5|AC-6(2),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|5.1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6(2),LEVEL|1S,NESA|T5.1.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "ps axu | grep named | grep -v 'grep'",
        "expect": "named -u named"
    },
    "custom_item_10": {
        "description": "2.2 Give the BIND User Account an Invalid Shell",
        "info": "The BIND user account, named by default, must not be used as a regular login account, and should be assigned an invalid or nologin shell to ensure that the account cannot be used to login.\n\nRationale:\n\nService accounts such as the named account represent a risk if they can be used to get a login shell to the system.",
        "solution": "Change the named account to use the nologin shell as shown:\n\n# chsh -s /sbin/nologin named\n\nDefault Value:\n\n/sbin/nologin",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "grep named /etc/passwd | awk -F: '{ print $7}'",
        "expect": "(/sbin/nologin|/dev/null|/bin/false)"
    },
    "custom_item_11": {
        "description": "2.3 Lock the BIND User Account",
        "info": "The user account under which BIND runs should not have a valid password, but should be locked.\n\nRationale:\n\nAs a defense-in-depth measure the named user account should be locked to prevent logins, and to prevent a user from su'ing to named using a password. In general, there shouldn't be a need for anyone to have to su as named, and when there is a need, then sudo should be used instead, which would not require the account password.",
        "solution": "Change the named account to use the nologin shell as shown:\n\n# chsh -s /sbin/nologin named\n\nDefault Value:\nAccount is locked by default.",
        "reference": "800-171|3.1.1,800-53|AC-2f.,800-53r5|AC-2f.,CN-L3|7.1.3.2(d),CSCv6|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2f.,LEVEL|1S,NESA|M4.4.3,NESA|T5.2.1,NIAv2|SS14d,PCI-DSSv3.2.1|8.1.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "passwd -S named",
        "expect": "(LK|Password locked)"
    },
    "custom_item_12": {
        "description": "2.4 Set root Ownership of BIND Directories",
        "info": "All of the directories under which ISC BIND runs should be owned by root. Of course, any files created at run time by BIND will still be owned by named.\n\nRationale:\n\nRestricting ownership of the directories provides defense in depth and will reduce the probability of unauthorized modifications to those resources. If there was a BIND vulnerability that allowed code execution as the named user, then the code would not be able to modify permissions on the BIND directories owned by root.",
        "solution": "To correct the directory ownership, perform the following:\n\nchown -R root $BIND_HOME $RUNDIR\n\nDefault Value:\n\nThe following directories are owned by named in the default RHEL7 package install\n\n- /var/named/dynamic\n- /var/named/slaves\n- /var/named/data\n- /run/named",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ -type d \\! -user root -ls 2>/dev/null | awk '{print} END {if (NR == 0) print \"Pass\" ; else print \"Fail\"}'",
        "expect": "Pass"
    },
    "custom_item_13": {
        "description": "2.5 Set root Ownership of BIND Configuration Files",
        "info": "The configuration files in the ISC BIND directories should be owned by root. Of course, any files created at run time by BIND, such as pid files, log files and slave zone files will necessarily be owned by named.\n\nRationale:\n\nRestricting ownership of the configuration files provides defense in depth and will reduce the probability of unauthorized modifications to those important files. If there was a BIND vulnerability that allowed code execution as the named user, then the code would not be able modify the configuration files.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ -type f \\! -user root 2>/dev/null | egrep -v '^@DYNDIR@|^@SLAVEDIR@|^@DATADIR@|^@RUNDIR@|^@LOGDIR@|^@TMPDIR@' | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_14": {
        "description": "2.6 Set Group named or root for BIND Directories and Files",
        "info": "All the BIND directories and files should have a group of either named or root.\n\nRationale:\n\nIn general the BIND directories and files default to a group of named, however some system files may have a group of root. Examples of system files include chroot'ed system device files. Either group root or named is accepted, as the intent is to prevent unexpected group ids, from getting inappropriate access to BIND files. Run time directories to which BIND will need write access should have a group of named, so that write access may be granted via the group permissions.",
        "solution": "Run the command below to change all BIND directories and files to the group named.\n\nchgrp -R named $BIND_HOME $RUNDIR\n\nDefault Value:\n\nThe default rpm install has all directories and files in the BIND home and the run time directory with a group of named.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@  \\\\! \\\\( -group root -o -group named \\\\) -ls 2>/dev/null | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_15": {
        "description": "2.7 Set Group and Other Permissions Read-Only for BIND Non-Runtime Directories - 'group' permissions",
        "info": "All the BIND directories except the run-time directories into which BIND will create files should have group and other permissions set to not be writable. No directories in the BIND_HOME or the RUNDIR should have other write permissions, even a chroot'ed tmp directory only needs to be writable by the named group.\n\nRationale:\n\nRestricting permissions on the directories provides defense in depth and will reduce the probability of unauthorized modifications to important files. If there was a BIND vulnerability that allowed code execution as the named user, then the code would not be able create or modify configuration files.",
        "solution": "Perform the following:\n\n- Capture the output from the audit commands above into a file named write-dirs.txt\n- Review the purpose for the identified directories and either delete them if the directory is not needed, or change the permissions of the directory to not be writable by group or other.\n- The following command can be used to change the permissions of the directories that are appropriate.\n\nxargs -a write-dirs.txt chmod go-w\n\nDefault Value:\n\nThe default rpm install has all non-runtime directories without group or other write access.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ -type d -perm /020 | egrep -vx '^@DYNDIR@|^@SLAVEDIR@|^@DATADIR@|^@RUNDIR@|^@LOGDIR@|^@TMPDIR@' | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_16": {
        "description": "2.7 Set Group and Other Permissions Read-Only for BIND Non-Runtime Directories - 'other' permissions",
        "info": "All the BIND directories except the run-time directories into which BIND will create files should have group and other permissions set to not be writable. No directories in the BIND_HOME or the RUNDIR should have other write permissions, even a chroot'ed tmp directory only needs to be writable by the named group.\n\nRationale:\n\nRestricting permissions on the directories provides defense in depth and will reduce the probability of unauthorized modifications to important files. If there was a BIND vulnerability that allowed code execution as the named user, then the code would not be able create or modify configuration files.",
        "solution": "Perform the following:\n\n- Capture the output from the audit commands above into a file named write-dirs.txt\n- Review the purpose for the identified directories and either delete them if the directory is not needed, or change the permissions of the directory to not be writable by group or other.\n- The following command can be used to change the permissions of the directories that are appropriate.\n\nxargs -a write-dirs.txt chmod go-w\n\nDefault Value:\n\nThe default rpm install has all non-runtime directories without group or other write access.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@ -type d -perm /002 | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_17": {
        "description": "2.8 Set Group and Other Permissions Read-Only for All BIND Files",
        "info": "All the files in BIND home and run time directories should have group and other permissions set to not be writable. Configuration files should, of course, not be writable by named, and any run time files created by BIND will be owned by named and writable by the user. Therefore, there are no exceptions required for the run time files.\n\nRationale:\n\nRestricting permissions on the files provides defense in depth and will reduce the probability of unauthorized modifications to important files. If there was a BIND vulnerability that allowed code execution as the named user, then the code would not be able to modify configuration files.",
        "solution": "Perform the following:\n\n- Capture the output from the audit commands above into a file with the name $TMPDIR/write-files.txt\n- Review the purpose for the identified files and either delete them if the file is not needed, or change the permissions of the file to not be writable by group or other.\n- The following commands can be used to change the permissions of the appropriate files.\n\n# find $BIND_HOME $RUNDIR -type f -perm /022 > $TMPDIR/write-files.txt\n# xargs -a $TMPDIR/write-files.txt chmod go-w\n# rm $TMPDIR/write-files.txt\n\nDefault Value:\n\nThe default rpm install has all BIND files without group or other write access.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@ -type f -perm /022 | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_18": {
        "description": "2.9 Isolate BIND with chroot'ed Subdirectory",
        "info": "The chroot() system call causes an application to run with limited file system access so that a subdirectory becomes the root directory for the application environment. When this is done, the application is jailed and no longer has access to the entire file structure but is limited to the given subdirectory.\n\nRationale:\n\nAlthough there are ways that a chroot jail can be broken, most methods require that a process be running as root in order to escape. Since BIND should be run as a different user than root, a chroot is an effective defense, to limit access to sensitive system configuration files. In the event that BIND has a vulnerability that allows code execution, the attack will not have access to the real system files such as /etc/password, but will be limited to the files placed in the chroot subdirectory.",
        "solution": "Perform the following:\n\n- Stop the named service and install the bind-chroot package to provide the chroot directories.\n\n# systemctl stop named.service\n# yum install bind-chroot\n\n- Edit the /etc/sysconfig/named configuration file to have a line similar to the one shown below that sets the ROOTDIR environment variable.\n\nROOTDIR=\"/var/named/chroot\"\n\n- Move all the configuration files and any master zone files into their respective directions under the subdirectory /var/named/chroot/??\n- It may be helpful to create symbolic links from a couple of system /etc files such as /etc/named.conf and /etc/rndc.key to the real files in the chroot-ed subdirectory, so that utilities like rndc will work as expected. Do not create symbolic links or hard links from inside the chroot to external resources! Instead use symbolic links to point from the outside resources into the chroot.\n- Restart the named service and test the configuration.\n\n# systemctl start named.service\n\nDefault Value:\n\nThe BIND service is not chroot'ed by default.\n\n3 Restricting Queries\n\nRecommendations in this section pertain to configurable access control mechanisms that are available in ISC BIND to restrict queries.",
        "reference": "800-171|3.1.5,800-53|AC-6(8),800-53r5|AC-6(8),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "ls -ld /proc/`pidof named`/root | awk '{print} END {if (NR == 0) print \"Named process not found\" }'",
        "expect": "chroot"
    },
    "custom_item_19": {
        "description": "3.1 Ignore Erroneous or Unwanted Queries - RFC 1918 10/8; addresses",
        "info": "BIND can be configured to ignore requests originating from specified network segments. This is accomplished by implementing the blackhole option in named.conf. It is recommended that this feature be implemented to ignore requests that originate outside of expected network segments.\n\nRationale:\n\nBy ignoring traffic that originates from unexpected networks, the server's exposure to malicious entities is reduced.",
        "solution": "Add a blackhole option for multicast and link local addresses, and all private RFC 1918 addresses that are not being used.\n\nblackhole {\n// Private RFC 1918 addresses\n10/8; 192.168/16; 172.16/12;\n// Multicast\n224/8;\n// Link Local\n169.254/16;\n};\n\nDefault Value:\n\nNo networks are blackhole'd by default.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|9,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*blackhole\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - Blackhole Not Found\" }' @NAMED_CONF@",
        "expect": "10/8;"
    },
    "custom_item_20": {
        "description": "3.1 Ignore Erroneous or Unwanted Queries - RFC 1918 192.168/16; addresses",
        "info": "BIND can be configured to ignore requests originating from specified network segments. This is accomplished by implementing the blackhole option in named.conf. It is recommended that this feature be implemented to ignore requests that originate outside of expected network segments.\n\nRationale:\n\nBy ignoring traffic that originates from unexpected networks, the server's exposure to malicious entities is reduced.",
        "solution": "Add a blackhole option for multicast and link local addresses, and all private RFC 1918 addresses that are not being used.\n\nblackhole {\n// Private RFC 1918 addresses\n10/8; 192.168/16; 172.16/12;\n// Multicast\n224/8;\n// Link Local\n169.254/16;\n};\n\nDefault Value:\n\nNo networks are blackhole'd by default.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|9,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*blackhole\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - Blackhole Not Found\" }' @NAMED_CONF@",
        "expect": "192.168/16;"
    },
    "custom_item_21": {
        "description": "3.1 Ignore Erroneous or Unwanted Queries - RFC 1918 172.16/12; addresses",
        "info": "BIND can be configured to ignore requests originating from specified network segments. This is accomplished by implementing the blackhole option in named.conf. It is recommended that this feature be implemented to ignore requests that originate outside of expected network segments.\n\nRationale:\n\nBy ignoring traffic that originates from unexpected networks, the server's exposure to malicious entities is reduced.",
        "solution": "Add a blackhole option for multicast and link local addresses, and all private RFC 1918 addresses that are not being used.\n\nblackhole {\n// Private RFC 1918 addresses\n10/8; 192.168/16; 172.16/12;\n// Multicast\n224/8;\n// Link Local\n169.254/16;\n};\n\nDefault Value:\n\nNo networks are blackhole'd by default.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|9,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*blackhole\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - Blackhole Not Found\" }' @NAMED_CONF@",
        "expect": "172.16/12;"
    },
    "custom_item_22": {
        "description": "3.1 Ignore Erroneous or Unwanted Queries - Multicast addresses",
        "info": "BIND can be configured to ignore requests originating from specified network segments. This is accomplished by implementing the blackhole option in named.conf. It is recommended that this feature be implemented to ignore requests that originate outside of expected network segments.\n\nRationale:\n\nBy ignoring traffic that originates from unexpected networks, the server's exposure to malicious entities is reduced.",
        "solution": "Add a blackhole option for multicast and link local addresses, and all private RFC 1918 addresses that are not being used.\n\nblackhole {\n// Private RFC 1918 addresses\n10/8; 192.168/16; 172.16/12;\n// Multicast\n224/8;\n// Link Local\n169.254/16;\n};\n\nDefault Value:\n\nNo networks are blackhole'd by default.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|9,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*blackhole\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - Blackhole Not Found\" }' @NAMED_CONF@",
        "expect": "224/8;"
    },
    "custom_item_23": {
        "description": "3.1 Ignore Erroneous or Unwanted Queries - Link local addresses",
        "info": "BIND can be configured to ignore requests originating from specified network segments. This is accomplished by implementing the blackhole option in named.conf. It is recommended that this feature be implemented to ignore requests that originate outside of expected network segments.\n\nRationale:\n\nBy ignoring traffic that originates from unexpected networks, the server's exposure to malicious entities is reduced.",
        "solution": "Add a blackhole option for multicast and link local addresses, and all private RFC 1918 addresses that are not being used.\n\nblackhole {\n// Private RFC 1918 addresses\n10/8; 192.168/16; 172.16/12;\n// Multicast\n224/8;\n// Link Local\n169.254/16;\n};\n\nDefault Value:\n\nNo networks are blackhole'd by default.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|9,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*blackhole\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - Blackhole Not Found\" }' @NAMED_CONF@",
        "expect": "169.254/16;"
    },
    "custom_item_24": {
        "description": "3.2 Restrict Recursive Queries - Caching Name Server",
        "info": "A recursive DNS query is your typical DNS query from a client to a caching DNS server. It places the burden of finding the answer on the caching DNS server which will recursively query other DNS servers authoritative for the domains, until it gets the answer which is then returned to the client. The DNS server will then cache the answer to that query until its time-to-live expires in order to provide a quick answer to future queries for the same name. BIND can be configured to restrict fulfillment of recursive lookups to only authorized network segments and hosts. This is made possible by the allow-recursion option. Caching non-authoritative name servers should only allow recursive queries from clients on their own authorized networks. Authoritative name servers should not allow recursive queries, except to the local host.\n\nRationale:\n\nRecursive DNS queries are commonly used in malicious attacks, including DNS amplification attacks and DNS cache poisoning attacks. A DNS amplification attack is a form of a reflected distributed denial-of-service attack, where multiple publicly accessible servers are sent recursive queries with the source IP address spoofed to be that of the victim. A high volume of relatively large DNS responses then flood the victim. For a DNS cache poisoning attack, the attacker may perform a query, and then provide a bogus response for the server to store in the cache.??  The bogus response may redirect clients to a different IP address which is provided by the attacker. Once the cache is poisoned, then clients visiting web sites, connecting to mail servers or VPNs may be connected with a malicious server configured to attack the client or steal credentials.\n\nLimiting recursive queries to trusted networks does not prevent all of the DNS attacks possible, but it does make the attacks much more difficult and dramatically limits the scope of possible attacks so that detection and response are manageable.",
        "solution": "Authoritative Name Server:\n\nFor an authoritative name, insert the following either into the global options or into every zone section.\n\nallow-recursion { localhost; };\n\nCaching Name Server:\n\n- Define an ACL named trusted_clients which will identify the networks which are expected to use the DNS caching server, and will be allowed to send recursive DNS queries.\n\nacl trusted_clients { 10.19.4.0/28; . . . }\n\n- Insert the following into the global options.\n\nallow-recursion { localhost; trusted_clients };\n\nDefault Value:\n\nThe allow-recursion option is not defined by default.",
        "reference": "800-53|SC-21,800-53r5|SC-21,CSCv6|9.1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-21,ITSG-33|SC-21a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*options\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - options Not Found\" }' @NAMED_CONF@",
        "expect": "^[\\\\s]*allow-recursion[\\\\s]+{[\\\\s]*(localhost|local|127.0.0.1);[\\\\s]*@ALLOW_RECURSION_ACL@[\\\\s]*};"
    },
    "custom_item_25": {
        "system": "Linux",
        "description": "3.3 Restrict Query Origins",
        "info": "BIND can be configured to restrict access to its query services based on source IP address. It is recommended that the allow-query option be used to restrict access to only the networks authorized to use the name server. For an external authoritative only name server, the authorized networks may include all networks, however for internal authoritative or caching name servers the authorized networks should be explicitly configured.\n\nRationale:\n\nUsing allow-query in conjunction with an ACL of trusted networks will reduce the risk of unauthorized access to name services content. Additionally, the exposure of vulnerabilities present in BIND's query handlers is reduced by this configuration as requests with an untrusted source will be rejected before the request is fully parsed by named. Keep in mind however, that the source IP addresses can be easily spoofed, and the firewall and network architecture also needs to protect internal name servers from external spoofed requests.",
        "solution": "For remediation:\n\n- Create an ACL for the authorized trusted networks in the named.conf file.\nacl authorized_networks { 10.10.32.0/24; 10.10.34.0/24; . . .  };\n\n- Add the allow-query statement to the global options of the named.conf file with the localhost ACL and the authorized trusted networks ACL.\nallow-query { localhost; authorized_networks };\n\nDefault Value:\n\nThe default package install allows queries only from localhost.",
        "reference": "CSCv6|9,LEVEL|1NS",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*options\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - options Not Found\" }' @NAMED_CONF@",
        "expect": "^[\\\\s]*allow-query[\\\\s]+{[\\\\s]*@ALLOW_QUERY_ACL@[\\\\s]*};"
    },
    "custom_item_26": {
        "description": "3.4 Restrict Queries of the Cache - Caching Only",
        "info": "The BIND option allow-query-cache may be used to restrict or allow BIND to provide answers to queries from the current cache of previously resolved queries. An authoritative only name server should not allow cache queries, except from the localhost, A caching only name server should allow cache queries only from the list of authorized networks.\n\nRationale:\n\nCaching only name servers are critical to the security of all of the clients and servers using them, only the local authorized networks should be allowed to perform queries of the server's cache. In addition to malicious malformed queries, an attacker could use information about what is or is not in the name servers cache to help setup a DNS attack against the systems using the caching name server.",
        "solution": "Authoritative Only Name Server:\n\nFor an authoritative name, insert the following either into the global options or into every zone section.\n\nallow-query-cache { localhost; };\n\nCaching Only Name Server:\n\nUse the previously defined an ACL named trusted_clients which will identify the networks which are expected to use the DNS caching server, and will be allowed to send DNS cache queries.\n\nallow-query-cache { localhost; trusted_clients };\n\nDefault Value:\n\nIf the allow-query-cache option is not present in the configuration, the default value is the allow-recursion setting.??  If the allow-recursion setting is not present, then the allow-query setting is used, unless recursion is set to no. If recursion is set to no, then the default value is none. Otherwise, if allow-query is also not present then the default value is localnets and localhost.",
        "reference": "800-53|SC-21,800-53r5|SC-21,CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-21,ITSG-33|SC-21a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*options\\\\s*{/ { l=1 } /{/ { b += 1 } /}/ { b -= 1 } l == 1 { print; o=1 } b == 0 { l = 0 } END { if (o == 0) print \"fail - options Not Found\" }' @NAMED_CONF@",
        "expect": "^[\\\\s]*allow-query-cache[\\\\s]+{[\\\\s]*@ALLOW_QUERY_ACL@[\\\\s]*};"
    },
    "custom_item_27": {
        "description": "Check for failing field lengths for item 4.1",
        "cmd": "awk -F' ' '{ if ( length($7) >= 44 ) print \"pass - \" FILENAME; else print \"fail - \" FILENAME }' @DYNDIR@/*.key",
        "expect": "fail"
    },
    "custom_item_28": {
        "description": "4.1 Use TSIG Keys 256 Bits in Length",
        "info": "The TSIG secret keys used by the name server should be generated from a good source of entropy and should be at least 256 bits in length.\n\n      Rationale:\n\n      Weak cryptographic keys may allow cryptographic attacks to discover the key value, through repeated guesses. A strong HMAC key requires a good source of entropy and at least 256 bits in length.",
        "solution": "For remediation, replace any keys which are too short with a securely generated key with a length of 256 or 512.??  The dnssec-keygen command below can be used to generate a key.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org.\n      $ cat Kns1-ns2.cisecurity.org.+163+21730.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 ezoZopbE4Q73HShuFYlf3FRvLWjtNXI5fd0TeQAYOug=\n\n      Default Value:\n\n      The rndc key is generated as 128 bits during bind-utils package install, while the nsupdate session key is dynamically generated with a length of 256 bits.",
        "reference": "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSCv6|14.2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "awk -F' ' '{ if ( length($7) >= 44 ) print \"pass - \" FILENAME; else print \"fail - \" FILENAME }' @DYNDIR@/*.key",
        "expect": ""
    },
    "custom_item_29": {
        "description": "4.1 Use TSIG Keys 256 Bits in Length",
        "info": "The TSIG secret keys used by the name server should be generated from a good source of entropy and should be at least 256 bits in length.\n\n      Rationale:\n\n      Weak cryptographic keys may allow cryptographic attacks to discover the key value, through repeated guesses. A strong HMAC key requires a good source of entropy and at least 256 bits in length.",
        "solution": "For remediation, replace any keys which are too short with a securely generated key with a length of 256 or 512.??  The dnssec-keygen command below can be used to generate a key.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org.\n      $ cat Kns1-ns2.cisecurity.org.+163+21730.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 ezoZopbE4Q73HShuFYlf3FRvLWjtNXI5fd0TeQAYOug=\n\n      Default Value:\n\n      The rndc key is generated as 128 bits during bind-utils package install, while the nsupdate session key is dynamically generated with a length of 256 bits.",
        "reference": "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSCv6|14.2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "awk -F' ' '{ if ( length($7) >= 44 ) print \"pass - \" FILENAME; else print \"fail - \" FILENAME }' @DYNDIR@/*.key",
        "expect": ".*"
    },
    "custom_item_30": {
        "description": "4.2 Include Cryptographic Key Files",
        "info": "Do not place keys directly in the BIND named.conf, but use separate configuration files for the keys and include them into the named.conf file, in order to protect the keys from unintentional disclosure.\n\nRationale:\n\nAlthough the keys may be placed directly in the named.conf file, putting it in a separate file will limit the number of times it needs to be viewed, and make it independent of viewing and changes to the main configuration file.",
        "solution": "Move each key definition statement from the named.conf file into its own key file. It is recommended to name both the key and the key file after the two hosts that will be sharing the secret key, in order to avoid confusion. Then include the key files with include statements in the named.conf. An example is shown below with the key definition statement moved to a separate key file, however it is also accepted for only the secret statement to be moved to another file.\n\n# grep -C 1 include /etc/named.conf\n\n// Include the key file used for the host1 and host2 TSIG comms\ninclude \"/etc/private/host1-host2.cisecurity.org.key\";\n\n# cat /var/named/chroot/etc/private/host1-host2.cisecurity.org.key\nkey host1-host2.cisecurity.org {\n algorithm hmac-sha256;\n secret \"1R3DP9D81/yWXjqf3hlg2beRpti1883JnZ3s7RVb1HU=\";\n};\n\nDefault Value:\n\nDuring a default install an rndc key is generated in a separate file /etc/rndc.key and included in the named.conf.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*secret[\\\\s]*\".*\";",
        "expect": "^[\\\\s]*secret[\\\\s]*\".*\";"
    },
    "custom_item_31": {
        "description": "Check for failing unique secrets for item 4.3",
        "cmd": "cat @NAMED_CONF@ @CONFIG_FILES@*.key | egrep -o \"secret.*;\" | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s\\\\n\",$1,$2,$3; else printf \"fail, not unique - # found: %s, %s %s\\\\n\",$1,$2,$3 }'",
        "expect": "fail"
    },
    "custom_item_32": {
        "description": "4.3 Use Unique Keys for Each Pair of Hosts - unique secret",
        "info": "A unique TSIG key should be used for each pair of communicating hosts. For example if there is one master authoritative name server and three slave authoritative name servers that were updated by the master, then there would need to be a unique TSIG key for at least the following:\n\n      - Master <-> Slave1\n      - Master <-> Slave2\n      - Master <-> Slave3\n\n      Rationale:\n\n      Each communication channel should have a unique key, to reduce the risk of key disclosure. If one of the TSIG keys or one of the slave servers is compromised, then the remaining TSIG keys are not disclosed.",
        "solution": "Generate unique keys for host to host communication. The command below can be used to generate 2 files, and.key file and a.private file with secret keys of suitable length with base64 encoding.??  The files themselves are not needed, and should be securely deleted once the values are copied into a key file for including in the named configuration.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org\n      Kns1-ns2.cisecurity.org.+163+13013\n\n      $ cat Kns1-ns2.cisecurity.org.+163+13013.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 9FQ2dYCQ17HJwDi/uHgANh2dlb8M7eb+F4AjML8tTdA=\n\n      Default Value:\n\n      The rndc key is automatically generated during package installation.",
        "reference": "800-53|SC-20a.,800-53r5|SC-20a.,CSCv6|14,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "cat @NAMED_CONF@ @CONFIG_FILES@*.key | egrep -o \"secret.*;\" | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s\\\\n\",$1,$2,$3; else printf \"fail, not unique - # found: %s, %s %s\\\\n\",$1,$2,$3 }'",
        "expect": ""
    },
    "custom_item_33": {
        "description": "4.3 Use Unique Keys for Each Pair of Hosts - unique secret",
        "info": "A unique TSIG key should be used for each pair of communicating hosts. For example if there is one master authoritative name server and three slave authoritative name servers that were updated by the master, then there would need to be a unique TSIG key for at least the following:\n\n      - Master <-> Slave1\n      - Master <-> Slave2\n      - Master <-> Slave3\n\n      Rationale:\n\n      Each communication channel should have a unique key, to reduce the risk of key disclosure. If one of the TSIG keys or one of the slave servers is compromised, then the remaining TSIG keys are not disclosed.",
        "solution": "Generate unique keys for host to host communication. The command below can be used to generate 2 files, and.key file and a.private file with secret keys of suitable length with base64 encoding.??  The files themselves are not needed, and should be securely deleted once the values are copied into a key file for including in the named configuration.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org\n      Kns1-ns2.cisecurity.org.+163+13013\n\n      $ cat Kns1-ns2.cisecurity.org.+163+13013.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 9FQ2dYCQ17HJwDi/uHgANh2dlb8M7eb+F4AjML8tTdA=\n\n      Default Value:\n\n      The rndc key is automatically generated during package installation.",
        "reference": "800-53|SC-20a.,800-53r5|SC-20a.,CSCv6|14,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "cat @NAMED_CONF@ @CONFIG_FILES@*.key | egrep -o \"secret.*;\" | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s\\\\n\",$1,$2,$3; else printf \"fail, not unique - # found: %s, %s %s\\\\n\",$1,$2,$3 }'",
        "expect": ".*"
    },
    "custom_item_34": {
        "description": "Checking for failing unique keys for item 4.3",
        "cmd": "/usr/bin/awk '/^\\\\s*keys.*{/,/};/ { print; o=1 } END { if (o == 0) print \"fail - keys Not Found\" }' @NAMED_CONF@ @CONFIG_FILES@/*.key | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5; else printf \"fail, not unique - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5 }'",
        "expect": "fail"
    },
    "custom_item_35": {
        "description": "4.3 Use Unique Keys for Each Pair of Hosts - unique keys",
        "info": "A unique TSIG key should be used for each pair of communicating hosts. For example if there is one master authoritative name server and three slave authoritative name servers that were updated by the master, then there would need to be a unique TSIG key for at least the following:\n\n      - Master <-> Slave1\n      - Master <-> Slave2\n      - Master <-> Slave3\n\n      Rationale:\n\n      Each communication channel should have a unique key, to reduce the risk of key disclosure. If one of the TSIG keys or one of the slave servers is compromised, then the remaining TSIG keys are not disclosed.",
        "solution": "Generate unique keys for host to host communication. The command below can be used to generate 2 files, and.key file and a.private file with secret keys of suitable length with base64 encoding.??  The files themselves are not needed, and should be securely deleted once the values are copied into a key file for including in the named configuration.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org\n      Kns1-ns2.cisecurity.org.+163+13013\n\n      $ cat Kns1-ns2.cisecurity.org.+163+13013.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 9FQ2dYCQ17HJwDi/uHgANh2dlb8M7eb+F4AjML8tTdA=\n\n      Default Value:\n\n      The rndc key is automatically generated during package installation.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*keys.*{/,/};/ { print; o=1 } END { if (o == 0) print \"fail - keys Not Found\" }' @NAMED_CONF@ @CONFIG_FILES@/*.key | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5; else printf \"fail, not unique - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5 }'",
        "expect": ""
    },
    "custom_item_36": {
        "description": "4.3 Use Unique Keys for Each Pair of Hosts - unique keys",
        "info": "A unique TSIG key should be used for each pair of communicating hosts. For example if there is one master authoritative name server and three slave authoritative name servers that were updated by the master, then there would need to be a unique TSIG key for at least the following:\n\n      - Master <-> Slave1\n      - Master <-> Slave2\n      - Master <-> Slave3\n\n      Rationale:\n\n      Each communication channel should have a unique key, to reduce the risk of key disclosure. If one of the TSIG keys or one of the slave servers is compromised, then the remaining TSIG keys are not disclosed.",
        "solution": "Generate unique keys for host to host communication. The command below can be used to generate 2 files, and.key file and a.private file with secret keys of suitable length with base64 encoding.??  The files themselves are not needed, and should be securely deleted once the values are copied into a key file for including in the named configuration.\n\n      $ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST ns1-ns2.cisecurity.org\n      Kns1-ns2.cisecurity.org.+163+13013\n\n      $ cat Kns1-ns2.cisecurity.org.+163+13013.key\n      ns1-ns2.cisecurity.org. IN KEY 512 3 163 9FQ2dYCQ17HJwDi/uHgANh2dlb8M7eb+F4AjML8tTdA=\n\n      Default Value:\n\n      The rndc key is automatically generated during package installation.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*keys.*{/,/};/ { print; o=1 } END { if (o == 0) print \"fail - keys Not Found\" }' @NAMED_CONF@ @CONFIG_FILES@/*.key | sort | uniq -c | awk -F' ' '{ if ($1 == 1) printf \"pass - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5; else printf \"fail, not unique - # found: %s, %s %s %s %s\\\\n\",$1,$2,$3,$4,$5 }'",
        "expect": ".*"
    },
    "custom_item_37": {
        "description": "4.4 Restrict Access to All Key Files - user root/named",
        "info": "The TSIG keys should be readable only by the named and root accounts. No other user accounts or groups should have read access. Note that BIND often creates a session key on startup for usage by nsupdate -l. Both the $BIND_HOME and $RUNDIR are included since the session key should also have the recommended permissions.\n\nRationale:\n\nThe secret key protects the authenticity and integrity of TSIG communications and disclosure of a key would allow an attacker to perform the authenticated operations such as rndc administrative operations, zone transfers or dynamic updates.",
        "solution": "Perform the following for remediation:\n\n- Use the command below to find secret key files. Review the list of key files, and delete any unused or unnecessary key files. Recreate the file list, after deleting any unused files.\n# find $BIND_HOME $RUNDIR -type f | xargs fgrep -l secret | sort -u > $TMPDIR/key_files.txt\n\n- Change the ownership, group and permissions on the key files.\n# xargs -a $TMPDIR/key_files.txt chown -R root\n# xargs -a $TMPDIR/key_files.txt?? chgrp -R named\n# xargs -a $TMPDIR/key_files.txt chmod o-r\n\n- Remove the temporary file,\nrm $TMPDIR/key_files.txt\n\nDefault Value:\n\nOwnership, Group and Permissions are correct for any default key files.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@ -type f \\\\! \\\\( -user root -o -user named \\\\) -exec fgrep -l secret {} \\\\; 2>/dev/null | sort -u | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_38": {
        "description": "4.4 Restrict Access to All Key Files - group root/named",
        "info": "The TSIG keys should be readable only by the named and root accounts. No other user accounts or groups should have read access. Note that BIND often creates a session key on startup for usage by nsupdate -l. Both the $BIND_HOME and $RUNDIR are included since the session key should also have the recommended permissions.\n\nRationale:\n\nThe secret key protects the authenticity and integrity of TSIG communications and disclosure of a key would allow an attacker to perform the authenticated operations such as rndc administrative operations, zone transfers or dynamic updates.",
        "solution": "Perform the following for remediation:\n\n- Use the command below to find secret key files. Review the list of key files, and delete any unused or unnecessary key files. Recreate the file list, after deleting any unused files.\n# find $BIND_HOME $RUNDIR -type f | xargs fgrep -l secret | sort -u > $TMPDIR/key_files.txt\n\n- Change the ownership, group and permissions on the key files.\n# xargs -a $TMPDIR/key_files.txt chown -R root\n# xargs -a $TMPDIR/key_files.txt?? chgrp -R named\n# xargs -a $TMPDIR/key_files.txt chmod o-r\n\n- Remove the temporary file,\nrm $TMPDIR/key_files.txt\n\nDefault Value:\n\nOwnership, Group and Permissions are correct for any default key files.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@ -type f \\\\! \\\\( -group root -o -group named \\\\) -exec fgrep -l secret {} \\\\; 2>/dev/null | sort -u | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_39": {
        "description": "4.4 Restrict Access to All Key Files - permissions",
        "info": "The TSIG keys should be readable only by the named and root accounts. No other user accounts or groups should have read access. Note that BIND often creates a session key on startup for usage by nsupdate -l. Both the $BIND_HOME and $RUNDIR are included since the session key should also have the recommended permissions.\n\nRationale:\n\nThe secret key protects the authenticity and integrity of TSIG communications and disclosure of a key would allow an attacker to perform the authenticated operations such as rndc administrative operations, zone transfers or dynamic updates.",
        "solution": "Perform the following for remediation:\n\n- Use the command below to find secret key files. Review the list of key files, and delete any unused or unnecessary key files. Recreate the file list, after deleting any unused files.\n# find $BIND_HOME $RUNDIR -type f | xargs fgrep -l secret | sort -u > $TMPDIR/key_files.txt\n\n- Change the ownership, group and permissions on the key files.\n# xargs -a $TMPDIR/key_files.txt chown -R root\n# xargs -a $TMPDIR/key_files.txt?? chgrp -R named\n# xargs -a $TMPDIR/key_files.txt chmod o-r\n\n- Remove the temporary file,\nrm $TMPDIR/key_files.txt\n\nDefault Value:\n\nOwnership, Group and Permissions are correct for any default key files.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "find @BIND_HOME@ @RUNDIR@ -type f -perm /022 -exec fgrep -l secret {} \\\\; 2>/dev/null | sort -u | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'",
        "expect": "pass"
    },
    "custom_item_40": {
        "description": "5.1 Securely Authenticate Zone Transfers",
        "info": "A zone transfer is a mechanism commonly used by DNS deployments to replicate zone information from master/primary servers to slave/secondary servers. Each pair of name servers participating in zone transfers should authenticate the requests and ensure the integrity of the responses by using a unique shared secret TSIG key. BIND can be configured to respond only to authenticated transfer requests by using the allow-transfer statement with a key statement, that restricts the transfers to servers that provide a MAC using the named key.\n\nRationale:\n\nA zone transfer is a popular information disclosure attack as it provides the entire list of resource records for a zone. There should be very few systems such as the slave name servers that should be authorized to perform a zone transfer for your domains. Authentication of transfer requests should not be made using only an IP address, since IP addresses can be spoofed, but rather by using TSIG keys.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Generate TSIG keys 256 bits in length, unique for each host-to-host communication. Securely Transfer the keys and configure the keys to be required in all allow-transfer statements.\n\nDefault Value:\n\nIf the allow-transfer statement is missing, then transfers are allowed to any host.",
        "reference": "800-53|SC-20b.,800-53r5|SC-20b.,CSCv6|9.1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20,LEVEL|1S,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "/usr/bin/awk '/^\\\\s*allow-transfer\\\\s*{/,/};/ { print; o=1 } END { if (o == 0) print \"fail - transfer-query Not Found\" }' @CONFIG_FILES@/* @ZONE_FILES@/*",
        "expect": "Manual Review Required"
    },
    "custom_item_41": {
        "system": "Linux",
        "description": "6.1 Hide BIND Version String",
        "info": "BIND includes a built-in zone, version.bind which may be queried to get the version of the name server. The version may be set to a value of none, to disable reporting of the version information.\n\nRationale:\n\nMaking detailed BIND version information easy to obtain remotely helps attackers automate and target their attacks. The information is not necessary for the health of the server, and should not be disclosed.",
        "solution": "Add or modify the version option to have a value of none in the BIND global options, as shown below.\n\noptions {\nversion none;\n. . .\n}\n\nDefault Value:\n\nDefault value returns the current BIND detailed version.",
        "reference": "800-53|SC-30(5),800-53r5|SC-30(5),CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-30,ITSG-33|SC-30a.,LEVEL|1S,NIAv2|GS8f,NIAv2|NS1,NIAv2|NS28",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*version.*",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*version[\\\\s]+[\\'\"]?none[\\'\"]?[\\\\s]*;"
    },
    "custom_item_42": {
        "description": "6.2 Hide Nameserver ID",
        "info": "The server-id option provides a server identifier that will be returned in response to an NSID query. An NSID query is described in RFC-5001, and is a method to identify servers in an environment where there are multiple DNS servers sharing the same IP address. With the use of load balancing and other IP sharing mechanisms, it can become difficult to discern exactly which name server is responding to a particular query. NSID allows a name server to respond with identifying information. The server-id option should be disabled with a value of none.\n\nRationale:\n\nEnabling the NSID option may allow external parties to obtain information about the configuration and architecture of the DNS server. If it is found to be necessary to enable this service, then the identifying information should be generic. You should not use the server's geographic location, internal IP address or any other privileged information.",
        "solution": "To explicitly disable NSID support, add or modify the server-id option in the global BIND options with a value of none as shown below.\n\nserver-id none;\n\nDefault Value:\n\nNSID is disabled by default.",
        "reference": "800-53|SC-30(5),800-53r5|SC-30(5),CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-30,ITSG-33|SC-30a.,LEVEL|1S,NIAv2|GS8f,NIAv2|NS1,NIAv2|NS28",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*server-id.*",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*server-id[\\\\s]+[\\'\"]?none[\\'\"]?[\\\\s]*;"
    },
    "custom_item_43": {
        "description": "Check for query-source port *",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*query-source",
        "expect": "port[\\\\s]*\\\\*"
    },
    "custom_item_44": {
        "description": "Check for query-source not set",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*query-source",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*query-source"
    },
    "custom_item_45": {
        "description": "7.2 Enable DNSSEC Validation - dnssec-enable",
        "info": "DNS Security Extensions or DNSSEC for short provides authentication of the name servers through public key cryptography. With DNSSEC, the name server signs its responses with its private key. This allows other name servers that have the public key of the name server to verify the integrity and authenticity of the response. DNSSEC also provides for signing of public keys so that delegated sub-domains may have their keys signed by a higher-level authority. This creates a chain of trust so that any name server that trusts the public key of the higher level signing authority can trust the signed key. It is recommended that DNSSEC be enabled and be configured to validate domains that are signed. DNSSEC and validation are enabled via the options dnssec-enable and dnssec-validation, respectively.\n\nRationale:\n\nDNSSEC reliably authenticates DNS responses to prevent the DNS spoofing and cache poisoning attacks.",
        "solution": "Perform the following for remediation:\n\n- Check the BIND configuration files, and in the global options set the two options dnssec-enable and dnssec-validation to yes as shown below:\n\ndnssec-enable yes\ndnssec-validation yes\n\n- Restart the named server.\n\nDefault Value:\n\nDNSSEC and DNSSEC validation are enabled by default.",
        "reference": "800-53|SC-20a.,800-53r5|SC-20a.,CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-enable",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-enable yes"
    },
    "custom_item_46": {
        "description": "7.2 Enable DNSSEC Validation - dnssec-validation",
        "info": "DNS Security Extensions or DNSSEC for short provides authentication of the name servers through public key cryptography. With DNSSEC, the name server signs its responses with its private key. This allows other name servers that have the public key of the name server to verify the integrity and authenticity of the response. DNSSEC also provides for signing of public keys so that delegated sub-domains may have their keys signed by a higher-level authority. This creates a chain of trust so that any name server that trusts the public key of the higher level signing authority can trust the signed key. It is recommended that DNSSEC be enabled and be configured to validate domains that are signed. DNSSEC and validation are enabled via the options dnssec-enable and dnssec-validation, respectively.\n\nRationale:\n\nDNSSEC reliably authenticates DNS responses to prevent the DNS spoofing and cache poisoning attacks.",
        "solution": "Perform the following for remediation:\n\n- Check the BIND configuration files, and in the global options set the two options dnssec-enable and dnssec-validation to yes as shown below:\n\ndnssec-enable yes\ndnssec-validation yes\n\n- Restart the named server.\n\nDefault Value:\n\nDNSSEC and DNSSEC validation are enabled by default.",
        "reference": "800-53|SC-20a.,800-53r5|SC-20a.,CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20a.,LEVEL|1S,NESA|T4.5.1,QCSC-v1|5.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-validation",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-validation yes"
    },
    "custom_item_47": {
        "description": "Check for dnssec-accept-expired no",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-accept-expired",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-accept-expired[\\\\s]*no"
    },
    "custom_item_48": {
        "description": "Check for dnssec-accept-expired not set",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-accept-expired",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*dnssec-accept-expired"
    },
    "custom_item_49": {
        "description": "8.1 Apply Applicable Updates",
        "info": "Over time, patches will be released to resolve defects in BIND. It is recommended that such patches be applied soon after they are available based on risk. High risk vulnerabilities should be patched within 30 days of availability.\n\nRationale:\n\nBy ensuring that BIND remains current and patched, the probability of an attacker successfully compromising BIND is reduced.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Update BIND to the most current revision available. Institute a patch process that aims to apply security updates within 30 days of their release. Subscribe to bind-announce@lists.isc.org on the https://www.isc.org web site to receive notifications of available BIND updates.\n\nDefault Value:\n\nNot Applicable",
        "reference": "800-171|3.14.1,800-53|SI-2,800-53r5|SI-2,CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv6|4,CSF|ID.RA-1,CSF|PR.IP-12,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-2,LEVEL|1S,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,PCI-DSSv3.2.1|6.2,PCI-DSSv4.0|6.3,PCI-DSSv4.0|6.3.3,QCSC-v1|11.2,SWIFT-CSCv1|2.2",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "cmd": "named -v",
        "expect": "Manual Review Required"
    },
    "custom_item_50": {
        "description": "8.2 Configure a Logging File Channel - logging section",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*logging[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*logging[\\\\s]*{"
    },
    "custom_item_51": {
        "description": "8.2 Configure a Logging File Channel - category config",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*config[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*config[\\\\s]*{"
    },
    "custom_item_52": {
        "description": "8.2 Configure a Logging File Channel - category dnssec",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*dnssec[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*dnssec[\\\\s]*{"
    },
    "custom_item_53": {
        "description": "8.2 Configure a Logging File Channel - category network",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*network[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*network[\\\\s]*{"
    },
    "custom_item_54": {
        "description": "8.2 Configure a Logging File Channel - category security",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*security[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*security[\\\\s]*{"
    },
    "custom_item_55": {
        "description": "8.2 Configure a Logging File Channel - category update",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*update[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*update[\\\\s]*{"
    },
    "custom_item_56": {
        "description": "8.2 Configure a Logging File Channel - category xfer-in",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*xfer-in[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*xfer-in[\\\\s]*{"
    },
    "custom_item_57": {
        "description": "8.2 Configure a Logging File Channel - category xfer-out",
        "info": "To capture logs to a local file, setup a channel for the file, in the logging configuration section. It's often helpful to have one log file for security related logs, and a second one with a dynamic severity level to be used as needed for debugging.\n\nRationale:\n\nLogging security related events is critical for monitoring the security of the server in order to see any issues affecting the server, and to be able to respond to attacks.",
        "solution": "In named.conf, configure a channel for a local security log file with the categories config,\n\ndnssec, network, security, updates, xfer-in and xfer-out. The local log file will be within the chroot directory.\n\nlogging {\n. . .\n    channel local_security_log {\n        file \"/var/run/named/secure.log\" versions 10 size 20m;\n        severity debug;\n        print-time yes;\n    };\n    // Config file processing\n    category config { local_security_log; };\n    // Processing signed responses\n    category dnssec { local_security_log; };\n    // Network Operations\n    category network { local_security_log; };\n    // Approved or unapproved requests\n    category security { local_security_log; };\n    // dynamic updates\n    category update { local_security_log; };\n    // transfers to the name server\n    category xfer-in { local_security_log; };\n    // transfers from the name server\n    category xfer-out { local_security_log; };\n    // Optional debug log file, may be enabled dynamically.\n    channel local_debug_log {\n        file \"/var/run/named/debug.log\";\n        severity dynamic;\n        print-time yes;\n    };\n    category default { local_debug_log; };\n    category general { local_debug_log; };\n};\n\nDefault Value:\n\nThere is no security log by default.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*xfer-out[\\\\s]*{",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*category[\\\\s]*xfer-out[\\\\s]*{"
    },
    "custom_item_58": {
        "description": "8.3 Configure a Logging syslog Channel - syslog",
        "info": "The syslog option of the logging configuration allows specification of the syslog facility to send log events. A syslog channel should be configured with the value of daemon or other appropriate syslog facility. The default and general categories should be included and the severity level should be info or lower.\n\nRationale:\n\nConfiguring a syslog channel allows BIND to log important information via the standard system syslog facility. It is important that the BIND logs be included with the system monitoring and response that is performed on other system logs, and the syslog facility is helpful to ensure that the important log information isn't lost, or ignored.",
        "solution": "Configure a syslog channel to capture at least the default and general categories of log events. For external authoritative name servers, the category lame-servers may be redirect to null, so that it is not logged. Using lame name servers is common for the domains used for SPAM and may overload the log with information that is not very useful.\n\nlogging {\n. . .\n  // Syslog\n  channel default_syslog {\n    syslog daemon; # send to syslog's daemon facility\n    severity info; # only send priority info and higher\n  };\n\n  category default { default_syslog; };\n  category general { default_syslog; };\n  // Too many lame servers, especially from SPAM\n  category lame-servers { null; };\n\nDefault Value:\n\nThere is no syslog channel by default.",
        "reference": "800-171|3.3.8,800-53|AU-9(2),800-53r5|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv6|6.6,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9(2),LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e,PCI-DSSv3.2.1|10.5.3,PCI-DSSv3.2.1|10.5.4,PCI-DSSv4.0|10.3.3,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*syslog[\\\\s]+",
        "expect": "^[\\\\s]*[^#/]*[\\\\s]*syslog[\\\\s]+"
    },
    "custom_item_59": {
        "description": "8.4 Disable the HTTP Statistics Server",
        "info": "Starting in BIND 9.5.0 there was a new statistics web server included, that is a useful debugging tool in a non-production environment. The HTTP server provides data in XML format about the condition of a BIND 9 server. The statistics server provides the same statistics that are available to the statistics-file dump. This server should be left disabled.\n\nRationale:\n\nA production name server should not have additional, unnecessary services running, as the additional services increases the risk of vulnerabilities.",
        "solution": "Remove the statistics-channel option from the configuration file.\n\nDefault Value:\n\nThe HTTP server is disabled by default.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1735",
        "file": "@NAMED_CONF@",
        "regex": "^[\\\\s]*[^#/]*[\\\\s]*statistics-channels",
        "expect": "statistics-channels"
    }
}