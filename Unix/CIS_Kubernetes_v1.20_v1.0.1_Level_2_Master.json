{
    "custom_item_1": {
        "description": "Check if kubelet is running",
        "name": "kubelet"
    },
    "custom_item_2": {
        "description": "Check if this is a Docker Vessel/Host",
        "cmd": "/usr/bin/docker info; /usr/bin/containerd --version",
        "expect": "(Containers|containerd)"
    },
    "custom_item_3": {
        "description": "Check if Controller Manager is running",
        "name": "kube-controller"
    },
    "custom_item_4": {
        "system": "Linux",
        "description": "1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to true",
        "info": "Enable kubelet server certificate rotation on controller-manager.\n\nRationale:\n\nRotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.\n\nNote: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.\n\nImpact:\n\nNone",
        "solution": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.\n\n--feature-gates=RotateKubeletServerCertificate=true\n\nDefault Value:\n\nBy default, RotateKubeletServerCertificate is set to 'true' this recommendation verifies that it has not been disabled.",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--feature-gates=[A-z,=]*RotateKubeletServerCertificate=true[A-z,=]*([\\\\s]|$)"
    },
    "custom_item_5": {
        "description": "Check if API Server is running",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "etcd[2]?[\\\\s]"
    },
    "custom_item_6": {
        "description": "3.2.2 Ensure that the audit policy covers key security concerns",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-policy-file=@AUDIT_POLICY_FILE@([\\\\s]|$)"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "3.2.2 Ensure that the audit policy covers key security concerns",
        "info": "Ensure that the audit policy created for the cluster covers key security concerns.\n\nRationale:\n\nSecurity audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment.\n\nImpact:\n\nIncreasing audit logging will consume resources on the nodes or other log destination.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.\n\nDefault Value:\n\nBy default Kubernetes clusters do not log audit information.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|14.9,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2M,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "file": "@AUDIT_POLICY_FILE@",
        "regex": ".*",
        "expect": "$MANUAL_REVIEW^"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "3.2.2 Ensure that the audit policy covers key security concerns",
        "info": "Ensure that the audit policy created for the cluster covers key security concerns.\n\nRationale:\n\nSecurity audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment.\n\nImpact:\n\nIncreasing audit logging will consume resources on the nodes or other log destination.",
        "solution": "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.\n\nDefault Value:\n\nBy default Kubernetes clusters do not log audit information.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|14.9,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2M,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-policy-file=@AUDIT_POLICY_FILE@([\\\\s]|$)"
    },
    "custom_item_9": {
        "description": "Check if kubectl exists",
        "file": "@KUBECTL_PATH@/kubectl"
    },
    "custom_item_10": {
        "description": "Check if kubeconfig exists",
        "file": "@KUBECONFIG@"
    },
    "custom_item_11": {
        "system": "Linux",
        "description": "5.2.6 Minimize the admission of root containers",
        "info": "Do not generally permit containers to be run as the root user.\n\nRationale:\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have an escalated likelihood of container breakout.\n\nIdeally, all containers should run as a defined non-UID 0 user.\n\nThere should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.\n\nIf you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\nImpact:\n\nPods with containers which run as the root user will not be permitted.",
        "solution": "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.\n\nDefault Value:\n\nBy default, PodSecurityPolicies are not defined.",
        "reference": "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get psp --kubeconfig @KUBECONFIG@ -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min",
        "expect": "^.*[\\\\s](MustRunAs[\\\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\\\s]+)$"
    },
    "custom_item_12": {
        "system": "Linux",
        "description": "5.2.6 Minimize the admission of root containers",
        "info": "Do not generally permit containers to be run as the root user.\n\nRationale:\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have an escalated likelihood of container breakout.\n\nIdeally, all containers should run as a defined non-UID 0 user.\n\nThere should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.\n\nIf you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\nImpact:\n\nPods with containers which run as the root user will not be permitted.",
        "solution": "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.\n\nDefault Value:\n\nBy default, PodSecurityPolicies are not defined.",
        "reference": "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get psp -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min",
        "expect": "^.*[\\\\s](MustRunAs[\\\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\\\s]+)$"
    },
    "custom_item_13": {
        "description": "Check if kubeconfig exists",
        "file": "@KUBECONFIG@"
    },
    "custom_item_14": {
        "system": "Linux",
        "description": "5.2.9 Minimize the admission of containers with capabilities assigned",
        "info": "Do not generally permit containers with capabilities\n\nRationale:\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.\n\nIn many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\nImpact:\n\nPods with containers require capabilities to operate will not be permitted.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Review the use of capabilities in applications running on your cluster. Where a namespace contains applications which do not require any Linux capabilities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\nDefault Value:\n\nBy default, PodSecurityPolicies are not defined.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|5.2,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get psp --kubeconfig @KUBECONFIG@ -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_15": {
        "system": "Linux",
        "description": "5.2.9 Minimize the admission of containers with capabilities assigned",
        "info": "Do not generally permit containers with capabilities\n\nRationale:\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.\n\nIn many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\nImpact:\n\nPods with containers require capabilities to operate will not be permitted.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Review the use of capabilities in applications running on your cluster. Where a namespace contains applications which do not require any Linux capabilities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\nDefault Value:\n\nBy default, PodSecurityPolicies are not defined.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|5.2,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get psp -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_16": {
        "description": "Check if kubeconfig exists",
        "file": "@KUBECONFIG@"
    },
    "custom_item_17": {
        "system": "Linux",
        "description": "5.3.2 Ensure that all Namespaces have Network Policies defined",
        "info": "Use network policies to isolate traffic in your cluster network.\n\nRationale:\n\nRunning different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.\n\nNetwork Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.\n\nImpact:\n\nOnce network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the documentation and create NetworkPolicy objects as you need them.\n\nDefault Value:\n\nBy default, network policies are not created.",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.13.6,800-53|CA-9,800-53|SC-7,800-53|SC-7(5),800-53r5|CA-9,800-53r5|SC-7,800-53r5|SC-7(5),CN-L3|7.1.2.2(c),CN-L3|8.1.10.6(j),CSCv7|14.2,CSCv8|4.4,CSF|DE.CM-1,CSF|ID.AM-3,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SC-7(5),LEVEL|2M,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|GS7b,NIAv2|NS25,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,SWIFT-CSCv1|2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get networkpolicy --namespace=kube-system --kubeconfig @KUBECONFIG@",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_18": {
        "system": "Linux",
        "description": "5.3.2 Ensure that all Namespaces have Network Policies defined",
        "info": "Use network policies to isolate traffic in your cluster network.\n\nRationale:\n\nRunning different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.\n\nNetwork Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.\n\nImpact:\n\nOnce network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the documentation and create NetworkPolicy objects as you need them.\n\nDefault Value:\n\nBy default, network policies are not created.",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.13.6,800-53|CA-9,800-53|SC-7,800-53|SC-7(5),800-53r5|CA-9,800-53r5|SC-7,800-53r5|SC-7(5),CN-L3|7.1.2.2(c),CN-L3|8.1.10.6(j),CSCv7|14.2,CSCv8|4.4,CSF|DE.CM-1,CSF|ID.AM-3,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SC-7(5),LEVEL|2M,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|GS7b,NIAv2|NS25,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,SWIFT-CSCv1|2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get networkpolicy --namespace=kube-system",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_19": {
        "description": "Check if kubeconfig exists",
        "file": "@KUBECONFIG@"
    },
    "custom_item_20": {
        "system": "Linux",
        "description": "5.4.1 Prefer using secrets as files over secrets as environment variables",
        "info": "Kubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.\n\nRationale:\n\nIt is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.\n\nImpact:\n\nApplication code which expects to read secrets in the form of environment variables would need modification",
        "solution": "If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.\n\nDefault Value:\n\nBy default, secrets are not defined",
        "reference": "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSCv8|3,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2M,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get all --kubeconfig @KUBECONFIG@ -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\"}{end}' -A",
        "expect": "^.*[\\\\s]$"
    },
    "custom_item_21": {
        "system": "Linux",
        "description": "5.4.1 Prefer using secrets as files over secrets as environment variables",
        "info": "Kubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.\n\nRationale:\n\nIt is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.\n\nImpact:\n\nApplication code which expects to read secrets in the form of environment variables would need modification",
        "solution": "If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.\n\nDefault Value:\n\nBy default, secrets are not defined",
        "reference": "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSCv8|3,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2M,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\"}{end}' -A",
        "expect": "^.*[\\\\s]false$"
    },
    "custom_item_22": {
        "system": "Linux",
        "description": "5.7.2 Ensure that the seccomp profile is set to docker/default in your pod definitions",
        "info": "Enable docker/default seccomp profile in your pod definitions.\n\nRationale:\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\nImpact:\n\nIf the docker/default seccomp profile is too restrictive for you, you would have to create/manage your own seccomp profiles.",
        "solution": "Use security context to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n\nDefault Value:\n\nBy default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|5.2,CSCv8|16.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "grep -A1 'seccompProfile:' @APISERVER_FILE@",
        "expect": "type: @SECCOMP_PROFILE@"
    },
    "custom_item_23": {
        "description": "Check if kubectl exists",
        "file": "@KUBECTL_PATH@/kubectl"
    },
    "custom_item_24": {
        "description": "Check if kubeconfig exists",
        "file": "@KUBECONFIG@"
    },
    "custom_item_25": {
        "system": "Linux",
        "description": "5.7.4 The default namespace should not be used",
        "info": "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nRationale:\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\nImpact:\n\nNone\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.\n\nDefault Value:\n\nUnless a namespace is specific on object creation, the default namespace will be used",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-171|3.13.5,800-53|CM-7,800-53|CP-6,800-53|CP-7,800-53|PL-8,800-53|PM-7,800-53|SA-8,800-53|SC-7,800-53r5|CM-7,800-53r5|CP-6,800-53r5|CP-7,800-53r5|PL-8,800-53r5|PM-7,800-53r5|SA-8,800-53r5|SC-7,CN-L3|8.1.10.6(j),CSCv7|2.10,CSCv8|12.2,CSF|DE.CM-1,CSF|ID.AM-3,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-4,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,GDPR|32.1.c,GDPR|32.1.d,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|CM-7,ITSG-33|CP-6,ITSG-33|CP-7,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SC-7,LEVEL|2M,NESA|T2.2.4,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|SS3,NIAv2|SS15a,NIAv2|VL2,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,SWIFT-CSCv1|2.3,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get all --kubeconfig @KUBECONFIG@",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_26": {
        "system": "Linux",
        "description": "5.7.4 The default namespace should not be used",
        "info": "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nRationale:\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\nImpact:\n\nNone\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.\n\nDefault Value:\n\nUnless a namespace is specific on object creation, the default namespace will be used",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-171|3.13.5,800-53|CM-7,800-53|CP-6,800-53|CP-7,800-53|PL-8,800-53|PM-7,800-53|SA-8,800-53|SC-7,800-53r5|CM-7,800-53r5|CP-6,800-53r5|CP-7,800-53r5|PL-8,800-53r5|PM-7,800-53r5|SA-8,800-53r5|SC-7,CN-L3|8.1.10.6(j),CSCv7|2.10,CSCv8|12.2,CSF|DE.CM-1,CSF|ID.AM-3,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-4,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,GDPR|32.1.c,GDPR|32.1.d,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|CM-7,ITSG-33|CP-6,ITSG-33|CP-7,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SC-7,LEVEL|2M,NESA|T2.2.4,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|SS3,NIAv2|SS15a,NIAv2|VL2,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,SWIFT-CSCv1|2.3,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "cmd": "@KUBECTL_PATH@/kubectl get all",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_27": {
        "system": "Linux",
        "description": "CIS_Kubernetes_v1.20_v1.0.1_Level_2_Master.audit from CIS Kubernetes v1.20 Benchmark v1.0.1",
        "info": "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/3891",
        "name": "kubelet"
    }
}