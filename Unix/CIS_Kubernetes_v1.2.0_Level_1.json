{
    "custom_item_1": {
        "description": "Check if kubelet is enabled",
        "service": "kubelet",
        "levels": "2345"
    },
    "custom_item_2": {
        "description": "Check if this is a Docker Vessel/Host",
        "cmd": "/usr/bin/docker info",
        "expect": "Containers"
    },
    "custom_item_3": {
        "description": "Check if API Server is running",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "kube-apiserver"
    },
    "custom_item_4": {
        "system": "Linux",
        "description": "1.1.1 Ensure that the --anonymous-auth argument is set to false",
        "info": "Disable anonymous requests to the API server.\n\nRationale:\n\nWhen enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the API server. You should rely on authentication to authorize access and disallow anonymous requests.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the below parameter.\n\n--anonymous-auth=false\n\nImpact:\n\nAnonymous requests will be rejected.",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--anonymous-auth=false"
    },
    "custom_item_5": {
        "system": "Linux",
        "description": "1.1.2 Ensure that the --basic-auth-file argument is not set",
        "info": "Do not use basic authentication.\n\nRationale:\n\nBasic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used.",
        "solution": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and remove the '--basic-auth-file=' parameter.\n\nImpact:\n\nYou will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no longer be used.",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CSCv6|16.14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),LEVEL|1A,NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "^((?!--basic-auth-file).)*$"
    },
    "custom_item_6": {
        "system": "Linux",
        "description": "1.1.3 Ensure that the --insecure-allow-any-token argument is not set",
        "info": "Do not allow any insecure tokens\n\nRationale:\n\nAccepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and remove the '--insecure-allow-any-token' parameter.\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "^((?!--insecure-allow-any-token).)*$"
    },
    "custom_item_7": {
        "system": "Linux",
        "description": "1.1.4 Ensure that the --insecure-bind-address argument is not set",
        "info": "Do not bind to non-loopback insecure addresses.\n\nRationale:\n\nIf you bind the apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to your master node. The apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the apiserver to an insecure address.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and remove the '--insecure-bind-address' parameter.\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "(--insecure-bind-address=127.0.0.1|^((?!--insecure-bind-address).)*$)"
    },
    "custom_item_8": {
        "system": "Linux",
        "description": "1.1.5 Ensure that the --insecure-port argument is set to 0",
        "info": "Do not bind to insecure port.\n\nRationale:\n\nSetting up the apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to your master node. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the below parameter.\n\n--insecure-port=0\n\nImpact:\n\nAll components that use the API must connect via the secured port, authenticate themselves, and be authorized to use the API.\n\nThis includes:\n- kube-controller-manager\n- kube-proxy\n- kube-scheduler\n- kubelets",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--insecure-port=0([\\\\s]|$)"
    },
    "custom_item_9": {
        "system": "Linux",
        "description": "1.1.6 Ensure that the --secure-port argument is not set to 0",
        "info": "Do not disable the secure port.\n\nRationale:\n\nThe secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and either remove the '--secure-port' parameter or set it to a different (non-zero) desired port.\n\nImpact:\n\nYou need to set the API Server up with the right TLS certificates.",
        "reference": "800-171|3.13.8,800-53|SC-8(1),800-53r5|SC-8(1),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|2.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "(--secure-port=[1-9]|^((?!--secure-port).)*$)"
    },
    "custom_item_10": {
        "system": "Linux",
        "description": "1.1.7 Ensure that the --profiling argument is set to false",
        "info": "Disable profiling, if not needed.\n\nRationale:\n\nProfiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the below parameter.\n\n--profiling=false\n\nImpact:\n\nProfiling information would not be available.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--profiling=false"
    },
    "custom_item_11": {
        "system": "Linux",
        "description": "1.1.8 Ensure that the --repair-malformed-updates argument is set to false",
        "info": "Disable fixing of malformed updates.\n\nRationale:\n\nThe API sServer will potentially attempt to fix the update requests to pass the validation even if the requests are malformed. Malformed requests are one of the potential ways to interact with a service without legitimate information. Such requests could potentially be used to sabotage API Server responses.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the below parameter.\n\n--repair-malformed-updates=false\n\nImpact:\n\nMalformed requests from clients would be rejected.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--repair-malformed-updates=false"
    },
    "custom_item_12": {
        "system": "Linux",
        "description": "1.1.9 Ensure that the admission control policy is not set to AlwaysAdmit",
        "info": "Do not allow all requests.\n\nRationale:\n\nSetting admission control policy to 'AlwaysAdmit' allows all requests and do not filter any requests.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to a value that does not include 'AlwaysAdmit'.\n\nImpact:\n\nOnly requests explicitly allowed by the admissions control policy would be served.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=((?!AlwaysAdmit).)*([\\\\s]|$)"
    },
    "custom_item_13": {
        "system": "Linux",
        "description": "1.1.10 Ensure that the admission control policy is set to AlwaysPullImages",
        "info": "Always pull images.\n\nRationale:\n\nSetting admission control policy to 'AlwaysPullImages' forces every new pod to pull the required images every time. In a multitenant cluster users can be assured that their private images can only be used by those who have the credentials to pull them. Without this admisssion control policy, once an image has been pulled to a node, any pod from any user can use it simply by knowing the images name, without any authorization check against the image ownership. When this plug-in is enabled, images are always pulled prior to starting containers, which means valid credentials are required.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to include 'AlwaysPullImages'.\n\n--admission-control=...,AlwaysPullImages,...\n\nImpact:\n\nCredentials would be required to pull the private images every time. Also, in trusted environments, this might increases load on network, registry, and decreases speed.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*AlwaysPullImages[A-z,]*([\\\\s]|$)"
    },
    "custom_item_14": {
        "system": "Linux",
        "description": "1.1.11 Ensure that the admission control policy is set to DenyEscalatingExec",
        "info": "Deny execution of 'exec' and 'attach' commands in privileged pods.\n\nRationale:\n\nSetting admission control policy to 'DenyEscalatingExec' denies 'exec' and 'attach' commands to pods that run with escalated privileges that allow host access. This includes pods that run as privileged, have access to the host IPC namespace, and have access to the host PID namespace.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to a value that includes 'DenyEscalatingExec'.\n\n--admission-control=...,DenyEscalatingExec,...\n\nImpact:\n\n'exec' and 'attach' commands will not work in privileged pods.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*DenyEscalatingExec[A-z,]*([\\\\s]|$)"
    },
    "custom_item_15": {
        "system": "Linux",
        "description": "1.1.12 Ensure that the admission control policy is set to SecurityContextDeny",
        "info": "Restrict pod level SecurityContext customization. Instead of using a customized SecurityContext for your pods, use a Pod Security Policy (PSP), which is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access.\n\nRationale:\n\nSetting admission control policy to 'SecurityContextDeny' denies the pod level SecurityContext customization. Any attempts to customize the SecurityContexts that are not explicitly defined in the Pod Security Policy (PSP) are blocked. This ensures that all the pods adhere to the PSP defined by your organization and you have a uniform pod level security posture.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to include 'SecurityContextDeny'.\n\n--admission-control=...,SecurityContextDeny,...\n\nImpact:\n\nNone",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|5.1,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*SecurityContextDeny[A-z,]*([\\\\s]|$)"
    },
    "custom_item_16": {
        "system": "Linux",
        "description": "1.1.13 Ensure that the admission control policy is set to NamespaceLifecycle",
        "info": "Reject creating objects in a namespace that is undergoing termination.\n\nRationale:\n\nSetting admission control policy to 'NamespaceLifecycle' ensures that objects cannot be created in non-existent namespaces, and that namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to include 'NamespaceLifecycle'.\n\n--admission-control=...,NamespaceLifecycle,...\n\nImpact:\n\nNone",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*NamespaceLifecycle[A-z,]*([\\\\s]|$)"
    },
    "custom_item_17": {
        "system": "Linux",
        "description": "1.1.14 Ensure that the --audit-log-path argument is set as appropriate",
        "info": "Enable auditing on the Kubernetes API Server and set the desired audit log path as appropriate.\n\nRationale:\n\nAuditing the Kubernetes API Server provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--audit-log-path' parameter to a suitable path and file where you would like audit logs to be written, for example:\n\n--audit-log-path=/var/log/apiserver/audit.log\n\nImpact:\n\nNone",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-log-path=@AUDIT_LOG_PATH@([\\\\s]|$)"
    },
    "custom_item_18": {
        "system": "Linux",
        "description": "1.1.15 Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
        "info": "Retain the logs for at least 30 days or as appropriate.\n\nRationale:\n\nRetaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--audit-log-maxage' parameter to 30 or as an appropriate number of days:\n\n--audit-log-maxage=30\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-log-maxage=@AUDIT_LOG_MAXAGE@([\\\\s]|$)"
    },
    "custom_item_19": {
        "system": "Linux",
        "description": "1.1.16 Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
        "info": "Retain 10 or an appropriate number of old log files.\n\nRationale:\n\nKubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--audit-log-maxbackup' parameter to 10 or to an appropriate value.\n\n--audit-log-maxbackup=10\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-log-maxbackup=@AUDIT_LOG_MAXBACKUP@([\\\\s]|$)"
    },
    "custom_item_20": {
        "system": "Linux",
        "description": "1.1.17 Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
        "info": "Rotate log files on reaching 100 MB or as appropriate.\n\nRationale:\n\nKubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--audit-log-maxsize' parameter to an appropriate size in MB. For example, to set it as 100 MB:\n\n--audit-log-maxsize=100\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-log-maxsize=@AUDIT_LOG_MAXSIZE@([\\\\s]|$)"
    },
    "custom_item_21": {
        "system": "Linux",
        "description": "1.1.18 Ensure that the --authorization-mode argument is not set to AlwaysAllow",
        "info": "Do not always authorize all requests.\n\nRationale:\n\nThe API Server, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch off that capability.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--authorization-mode' parameter to values other than 'AlwaysAllow'. One such example could be as below.\n\n--authorization-mode=RBAC\n\nImpact:\n\nOnly authorized requests will be served.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--authorization-mode=((?!AlwaysAllow).)*([\\\\s]|$)"
    },
    "custom_item_22": {
        "system": "Linux",
        "description": "1.1.19 Ensure that the --token-auth-file parameter is not set",
        "info": "Do not use token based authentication.\n\nRationale:\n\nThe token-based authentication utilizes static tokens to authenticate requests to the apiserver. The tokens are stored in clear-text in a file on the apiserver, and cannot be revoked or rotated without restarting the apiserver. Hence, do not use static token-based authentication.",
        "solution": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and remove the '--token-auth-file=' parameter.\n\nImpact:\n\nYou will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used.",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CSCv6|16.14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "^((?!--token-auth-file).)*$"
    },
    "custom_item_23": {
        "system": "Linux",
        "description": "1.1.20 Ensure that the --kubelet-https argument is set to true",
        "info": "Use https for kubelet connections.\n\nRationale:\n\nConnections from apiserver to kubelets could potentially carry sensitive data such as secrets and keys. It is thus important to use in-transit encryption for any communication between the apiserver and kubelets.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and remove the '--kubelet-https' parameter.\n\nImpact:\n\nYou require TLS to be configured on apiserver as well as kubelets.",
        "reference": "800-171|3.13.8,800-53|SC-8(1),800-53r5|SC-8(1),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|2.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "(--kubelet-https=true|^((?!--kubelet-https).)*$)"
    },
    "custom_item_24": {
        "system": "Linux",
        "description": "1.1.21 Ensure that the --kubelet-certificate-authority argument is set as appropriate",
        "info": "Verify kubelet's certificate before establishing connection.\n\nRationale:\n\nThe connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelets port-forwarding functionality. These connections terminate at the kubelets HTTPS endpoint. By default, the apiserver does not verify the kubelets serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks.",
        "solution": "Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--kubelet-certificate-authority' parameter to the path to the cert file for the certificate authority.\n\n--kubelet-certificate-authority=\n\nImpact:\n\nYou require TLS to be configured on apiserver as well as kubelets.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--kubelet-certificate-authority=@KUBELET_CERTIFICATE_AUTHORITY@([\\\\s]|$)"
    },
    "custom_item_25": {
        "system": "Linux",
        "description": "1.1.22 Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate - kubelet-client-certificate",
        "info": "Enable certificate based kubelet authentication.\n\nRationale:\n\nThe apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate-based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the kubelet client certificate and key parameters as below.\n\n--kubelet-client-certificate=\n--kubelet-client-key=\n\nImpact:\n\nYou require TLS to be configured on apiserver as well as kubelets.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--kubelet-client-certificate=@KUBELET_CLIENT_CERTIFICATE@([\\\\s]|$)"
    },
    "custom_item_26": {
        "system": "Linux",
        "description": "1.1.22 Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate - kubelet-client-key",
        "info": "Enable certificate based kubelet authentication.\n\nRationale:\n\nThe apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate-based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the kubelet client certificate and key parameters as below.\n\n--kubelet-client-certificate=\n--kubelet-client-key=\n\nImpact:\n\nYou require TLS to be configured on apiserver as well as kubelets.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--kubelet-client-key=@KUBELET_CLIENT_KEY@([\\\\s]|$)"
    },
    "custom_item_27": {
        "system": "Linux",
        "description": "1.1.23 Ensure that the --service-account-lookup argument is set to true",
        "info": "Validate service account before validating token.\n\nRationale:\n\nBy default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the below parameter.\n\n--service-account-lookup=true\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.2,800-53|IA-5(13),800-53r5|IA-5(13),CSCv6|16,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--service-account-lookup=true"
    },
    "custom_item_28": {
        "system": "Linux",
        "description": "1.1.24 Ensure that the admission control policy is set to PodSecurityPolicy",
        "info": "Reject creating pods that do not match Pod Security Policies.\n\nRationale:\n\nA Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The 'PodSecurityPolicy' objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.",
        "solution": "Follow the documentation and create Pod Security Policy objects as per your environment. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to a value that includes 'PodSecurityPolicy':\n\n--admission-control=...,PodSecurityPolicy,...\n\nThen restart the API Server.\n\nImpact:\n\nThe policy objects must be created and granted before pod creation would be allowed.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*PodSecurityPolicy[A-z,]*([\\\\s]|$)"
    },
    "custom_item_29": {
        "system": "Linux",
        "description": "1.1.25 Ensure that the --service-account-key-file argument is set as appropriate",
        "info": "Explicitly set a service account public key file for service accounts on the apiserver.\n\nRationale:\n\nBy default, if no '--service-account-key-file' is specified to the apiserver, it uses the private key from the TLS serving certificate to verify service account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with '--service-account-key-file'.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--service-account-key-file' parameter to the public key file for service accounts:\n\n--service-account-key-file=\n\nImpact:\n\nThe corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--service-account-key-file=@SERVICE_ACCOUNT_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_30": {
        "system": "Linux",
        "description": "1.1.26 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-certfile",
        "info": "etcd should be configured to make use of TLS encryption for client connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the etcd certificate and key file parameters.\n\n--etcd-certfile=\n--etcd-keyfile=\n\nImpact:\n\nTLS and client certificate authentication must be configured for etcd.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|9,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--etcd-certfile=@ETCD_CERTFILE@([\\\\s]|$)"
    },
    "custom_item_31": {
        "system": "Linux",
        "description": "1.1.26 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-keyfile",
        "info": "etcd should be configured to make use of TLS encryption for client connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the etcd certificate and key file parameters.\n\n--etcd-certfile=\n--etcd-keyfile=\n\nImpact:\n\nTLS and client certificate authentication must be configured for etcd.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|9,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--etcd-keyfile=@ETCD_KEYFILE@([\\\\s]|$)"
    },
    "custom_item_32": {
        "system": "Linux",
        "description": "1.1.27 Ensure that the admission control policy is set to ServiceAccount",
        "info": "Automate service accounts management.\n\nRationale:\n\nWhen you create a pod, if you do not specify a service account, it is automatically assigned the 'default' service account in the same namespace. You should create your own service account and let the API server manage its security tokens.",
        "solution": "Follow the documentation and create 'ServiceAccount' objects as per your environment. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to a value that includes 'ServiceAccount'.\n\n--admission-control=...,ServiceAccount,...\n\nImpact:\n\nThe 'ServiceAccount' objects must be created and granted before pod creation would be allowed.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|16,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*ServiceAccount[A-z,]*([\\\\s]|$)"
    },
    "custom_item_33": {
        "system": "Linux",
        "description": "1.1.28 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file",
        "info": "Setup TLS connection on the API server.\n\nRationale:\n\nAPI server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the TLS certificate and private key file parameters.\n\n--tls-cert-file=\n--tls-private-key-file=\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--tls-cert-file=@TLS_CERT_FILE@([\\\\s]|$)"
    },
    "custom_item_34": {
        "system": "Linux",
        "description": "1.1.28 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file",
        "info": "Setup TLS connection on the API server.\n\nRationale:\n\nAPI server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the TLS certificate and private key file parameters.\n\n--tls-cert-file=\n--tls-private-key-file=\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--tls-private-key-file=@TLS_PRIVATE_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_35": {
        "system": "Linux",
        "description": "1.1.29 Ensure that the --client-ca-file argument is set as appropriate",
        "info": "Setup TLS connection on the API server.\n\nRationale:\n\nAPI server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic. If '--client-ca-file' argument is set, any request presenting a client certificate signed by one of the authorities in the 'client-ca-file' is authenticated with an identity corresponding to the CommonName of the client certificate.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the client certificate authority file.\n\n--client-ca-file=\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--client-ca-file=@CLIENT_CA_FILE@([\\\\s]|$)"
    },
    "custom_item_36": {
        "system": "Linux",
        "description": "1.1.30 Ensure that the --etcd-cafile argument is set as appropriate",
        "info": "etcd should be configured to make use of TLS encryption for client connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a SSL Certificate Authority file.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the etcd certificate authority file parameter.\n\n--etcd-cafile=\n\nImpact:\n\nTLS and client certificate authentication must be configured for etcd.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--etcd-cafile=@ETCD_CAFILE@([\\\\s]|$)"
    },
    "custom_item_37": {
        "system": "Linux",
        "description": "1.1.31 Ensure that the --authorization-mode argument is set to Node",
        "info": "Restrict kubelet nodes to reading only objects associated with them.\n\nRationale:\n\nThe 'Node' authorization mode only allows kubelets to read 'Secret', 'ConfigMap', 'PersistentVolume', and 'PersistentVolumeClaim' objects associated with their nodes.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--authorization-mode' parameter to a value that includes 'Node'.\n\n--authorization-mode=Node,RBAC\n\nImpact:\n\nNone",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--authorization-mode=[A-z,]*Node[A-z,]*([\\\\s]|$)"
    },
    "custom_item_38": {
        "system": "Linux",
        "description": "1.1.32 Ensure that the admission control policy is set to NodeRestriction",
        "info": "Limit the 'Node' and 'Pod' objects that a kubelet could modify.\n\nRationale:\n\nUsing the 'NodeRestriction' plug-in ensures that the kubelet is restricted to the 'Node' and 'Pod' objects that it could modify as defined. Such kubelets will only be allowed to modify their own 'Node' API object, and only modify 'Pod' API objects that are bound to their node.",
        "solution": "Follow the Kubernetes documentation and configure 'NodeRestriction' plug-in on kubelets. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--admission-control' parameter to a value that includes 'NodeRestriction'.\n\n--admission-control=...,NodeRestriction,...\n\nImpact:\n\nNone",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*NodeRestriction[A-z,]*([\\\\s]|$)"
    },
    "custom_item_39": {
        "system": "Linux",
        "description": "1.1.33 Ensure that the --experimental-encryption-provider-config argument is set as appropriate",
        "info": "Encrypt etcd key-value store.\n\nRationale:\n\netcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted at rest to avoid any disclosures.",
        "solution": "Follow the Kubernetes documentation and configure a 'EncryptionConfig' file. Then, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' on the master node and set the '--experimental-encryption-provider-config' parameter to the path of that file:\n\n--experimental-encryption-provider-config=\n\nImpact:\n\nNone",
        "reference": "CSCv6|14.5,LEVEL|1A",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--experimental-encryption-provider-config=@EXPERIMENTAL_ENCRYPTION_PROVIDER_CONFIG@([\\\\s]|$)"
    },
    "custom_item_40": {
        "system": "Linux",
        "description": "1.1.34 Ensure that the encryption provider is set to aescbc",
        "info": "Use 'aescbc' encryption provider.\n\nRationale:\n\n'aescbc' is currently the strongest encryption provider, It should be preferred over other providers.",
        "solution": "Follow the Kubernetes documentation and configure a 'EncryptionConfig' file. In this file, choose 'aescbc' as the encryption provider.\n\nFor example,\n\n'kind: EncryptionConfig\napiVersion: v1\nresources:\n - resources:\n - secrets\n providers:\n - aescbc:\n keys:\n - name: key1\n secret:'\n\nImpact:\n\nNone",
        "reference": "CSCv6|14.5,LEVEL|1A",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@EXPERIMENTAL_ENCRYPTION_PROVIDER_CONFIG@",
        "regex": "^[\\\\s]*-[\\\\s]*(secretbox|aesgcm)[\\\\s]*:",
        "expect": "^[\\\\s]*-[\\\\s]*(secretbox|aesgcm)[\\\\s]*:"
    },
    "custom_item_41": {
        "system": "Linux",
        "description": "1.1.35 Ensure that the admission control policy is set to EventRateLimit",
        "info": "Limit the rate at which the API server accepts requests.\n\nRationale:\n\nUsing 'EventRateLimit' admission control enforces a limit on the number of events that the API Server will accept in a given time slice. In a large multi-tenant cluster, there might be a small percentage of misbehaving tenants which could have a significant impact on the performance of the cluster overall. Hence, it is recommended to limit the rate of events that the API server will accept.\n\nNote: This is an Alpha feature in the Kubernetes 1.8 release.",
        "solution": "Follow the Kubernetes documentation and set the desired limits in a configuration file.\n\nThen, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' and set the below parameters.\n\n--admission-control=EventRateLimit\n--admission-control-config-file=\n\nImpact:\n\nYou need to carefully tune in limits as per your environment.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|8.4,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*EventRateLimit[A-z,]*([\\\\s]|$)"
    },
    "custom_item_42": {
        "system": "Linux",
        "description": "1.1.36 Ensure that the AdvancedAuditing argument is not set to false - audit-policy-file parameter",
        "info": "Do not disable advanced auditing.\n\nRationale:\n\n'AdvancedAuditing' enables a much more general API auditing pipeline, which includes support for pluggable output backends and an audit policy specifying how different requests should be audited. Additionally, this enables auditing of failed authentication, authorization and login attempts which could prove crucial for protecting your production clusters. It is thus recommended not to disable advanced auditing.",
        "solution": "Follow the Kubernetes documentation and set the desired audit policy in the '/etc/kubernetes/audit-policy.yaml' file.\n\nThen, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' and set the below parameters.\n\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml\n\nImpact:\n\nYou would need to rotate logs and log them centrally to avoid filling up disk space.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--audit-policy-file=@AUDIT_POLICY_FILE@([\\\\s]|$)"
    },
    "custom_item_43": {
        "system": "Linux",
        "description": "1.1.36 Ensure that the AdvancedAuditing argument is not set to false - audit-policy-file contents",
        "info": "Do not disable advanced auditing.\n\nRationale:\n\n'AdvancedAuditing' enables a much more general API auditing pipeline, which includes support for pluggable output backends and an audit policy specifying how different requests should be audited. Additionally, this enables auditing of failed authentication, authorization and login attempts which could prove crucial for protecting your production clusters. It is thus recommended not to disable advanced auditing.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the Kubernetes documentation and set the desired audit policy in the '/etc/kubernetes/audit-policy.yaml' file.\n\nThen, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' and set the below parameters.\n\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml\n\nImpact:\n\nYou would need to rotate logs and log them centrally to avoid filling up disk space.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "cat @AUDIT_POLICY_FILE@",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_44": {
        "system": "Linux",
        "description": "1.1.36 Ensure that the AdvancedAuditing argument is not set to false - AdvancedAuditing",
        "info": "Do not disable advanced auditing.\n\nRationale:\n\n'AdvancedAuditing' enables a much more general API auditing pipeline, which includes support for pluggable output backends and an audit policy specifying how different requests should be audited. Additionally, this enables auditing of failed authentication, authorization and login attempts which could prove crucial for protecting your production clusters. It is thus recommended not to disable advanced auditing.",
        "solution": "Follow the Kubernetes documentation and set the desired audit policy in the '/etc/kubernetes/audit-policy.yaml' file.\n\nThen, edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' and set the below parameters.\n\n--audit-policy-file=/etc/kubernetes/audit-policy.yaml\n\nImpact:\n\nYou would need to rotate logs and log them centrally to avoid filling up disk space.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "^((?!--feature-gates=[A-z,=]*AdvancedAuditing=false).)*$"
    },
    "custom_item_45": {
        "system": "Linux",
        "description": "1.1.37 Ensure that the --request-timeout argument is set as appropriate",
        "info": "Set global request timeout for API server requests as appropriate.\n\nRationale:\n\nSetting global request timeout allows extending the API server request timeout limit to a duration appropriate to the user's connection speed. By default, it is set to 60 seconds which might be problematic on slower connections making cluster resources inaccessible once the data volume for requests exceeds what can be transmitted in 60 seconds. But, setting this timeout limit to be too large can exhaust the API server resources making it prone to Denial-of-Service attack. Hence, it is recommended to set this limit as appropriate and change the default limit of 60 seconds only if needed.",
        "solution": "Edit the API server pod specification file '/etc/kubernetes/manifests/kube-apiserver.yaml' and set the below parameter as appropriate and if needed. For example,\n\n--request-timeout=300\n\nImpact:\n\nNone",
        "reference": "800-53|SC-5,800-53r5|SC-5,CSCv6|14.6,CSF|DE.CM-1,CSF|PR.DS-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1A,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-apiserver | grep -v grep",
        "expect": "--request-timeout=@REQUEST_TIMEOUT@([\\\\s]|$)|^((?!--request-timeout).)*$)"
    },
    "custom_item_46": {
        "description": "Check if Scheduler is running",
        "cmd": "ps -ef | grep kube-scheduler | grep -v grep",
        "expect": "kube-scheduler"
    },
    "custom_item_47": {
        "system": "Linux",
        "description": "1.2.1 Ensure that the --profiling argument is set to false",
        "info": "Disable profiling, if not needed.\n\nRationale:\n\nProfiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
        "solution": "Edit the Scheduler pod specification file '/etc/kubernetes/manifests/kube-scheduler.yaml' file on the master node and set the below parameter.\n\n--profiling=false\n\nImpact:\n\nProfiling information would not be available.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-scheduler | grep -v grep",
        "expect": "--profiling=false"
    },
    "custom_item_48": {
        "description": "Check if Controller Manager is running",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "kube-controller-manager"
    },
    "custom_item_49": {
        "system": "Linux",
        "description": "1.3.1 Ensure that the --terminated-pod-gc-threshold argument is set as appropriate",
        "info": "Activate garbage collector on pod termination, as appropriate.\n\nRationale:\n\nGarbage collection is important to ensure sufficient resource availability and avoiding degraded performance and availability. In the worst case, the system might crash or just be unusable for a long period of time. The current setting for garbage collection is 12,500 terminated pods which might be too high for your system to sustain. Based on your system resources and tests, choose an appropriate threshold value to activate garbage collection.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node and set the '--terminated-pod-gc-threshold' to an appropriate threshold, for example:\n\n--terminated-pod-gc-threshold=10\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--terminated-pod-gc-threshold=@TERMINATED_POD_GC_THRESHOLD@([\\\\s]|$)"
    },
    "custom_item_50": {
        "system": "Linux",
        "description": "1.3.2 Ensure that the --profiling argument is set to false",
        "info": "Disable profiling, if not needed.\n\nRationale:\n\nProfiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node and set the below parameter.\n\n--profiling=false\n\nImpact:\n\nProfiling information would not be available.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--profiling=false"
    },
    "custom_item_51": {
        "system": "Linux",
        "description": "1.3.3 Ensure that the --use-service-account-credentials argument is set to true",
        "info": "Use individual service account credentials for each controller.\n\nRationale:\n\nThe controller manager creates a service account per controller in the 'kube-system' namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. Setting the '--use-service-account-credentials' to 'true' runs each control loop within the controller manager using a separate service account credential. When used in combination with RBAC, this ensures that the control loops run with the minimum permissions required to perform their intended tasks.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node to set the below parameter.\n\n--use-service-account-credentials=true\n\nImpact:\n\nWhatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the 'kube-system' namespace automatically with default roles and rolebindings that are auto-reconciled on startup.\n\nIf using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the 'controller-roles.yaml' and 'controller-role-bindings.yaml' files for the RBAC roles.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--use-service-account-credentials=true"
    },
    "custom_item_52": {
        "system": "Linux",
        "description": "1.3.4 Ensure that the --service-account-private-key-file argument is set as appropriate",
        "info": "Explicitly set a service account private key file for service accounts on the controller manager.\n\nRationale:\n\nTo ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with '--service-account-private-key-file' as appropriate.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node and set the '--service-account-private-key-file' parameter to the private key file for service accounts.\n\n--service-account-private-key-file=\n\nImpact:\n\nYou would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--service-account-private-key-file=@SERVICE_ACCOUNT_PRIVATE_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_53": {
        "system": "Linux",
        "description": "1.3.5 Ensure that the --root-ca-file argument is set as appropriate",
        "info": "Allow pods to verify the API server's serving certificate before establishing connections.\n\nRationale:\n\nProcesses running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks.\n\nProviding the root certificate for the API server's serving certificate to the controller manager with the '--root-ca-file' argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node and set the '--root-ca-file' parameter to the certificate bundle file'.\n\n--root-ca-file=\n\nImpact:\n\nYou need to setup and maintain root certificate authority file.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--root-ca-file=@ROOT_CA_FILE@([\\\\s]|$)"
    },
    "custom_item_54": {
        "system": "Linux",
        "description": "1.3.7 Ensure that the RotateKubeletServerCertificate argument is set to true",
        "info": "Enable kubelet server certificate rotation on controller-manager.\n\nRationale:\n\n'RotateKubeletServerCertificate' causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.\n\nNote: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.",
        "solution": "Edit the Controller Manager pod specification file '/etc/kubernetes/manifests/kube-controller-manager.yaml' on the master node and set the '--feature-gates' parameter to include 'RotateKubeletServerCertificate=true'.\n\n--feature-gates=RotateKubeletServerCertificate=true\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.3,800-53|CM-3(6),800-53r5|CM-3(6),CN-L3|8.1.10.6(g),CSCv6|14.2,CSF|PR.IP-1,CSF|PR.IP-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ISO/IEC-27001|A.10.1.1,ITSG-33|CM-3,LEVEL|1A,NESA|T3.2.3,NESA|T3.3.2,NESA|T7.5.1,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|CM1,NIAv2|CM1a,NIAv2|CM1b,NIAv2|CM1c,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|6.2,QCSC-v1|7.2,QCSC-v1|8.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "--feature-gates=[A-z,=]*RotateKubeletServerCertificate=true[A-z,=]*([\\\\s]|$)"
    },
    "custom_item_55": {
        "description": "Check if API Server is running",
        "cmd": "ps -ef | grep kube--apiserver | grep -v grep",
        "expect": "kube-apiserver"
    },
    "custom_item_56": {
        "system": "Linux",
        "description": "1.4.1 Ensure that the API server pod specification file permissions are set to 644 or more restrictive",
        "info": "Ensure that the API server pod specification file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe API server pod specification file controls various parameters that set the behavior of the API server. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@APISERVER_FILE@",
        "mask": "133"
    },
    "custom_item_57": {
        "system": "Linux",
        "description": "1.4.2 Ensure that the API server pod specification file ownership is set to root:root",
        "info": "Ensure that the API server pod specification file ownership is set to 'root:root'.\n\nRationale:\n\nThe API server pod specification file controls various parameters that set the behavior of the API server. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/manifests/kube-apiserver.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@APISERVER_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_58": {
        "description": "Check if Controller Manager is running",
        "cmd": "ps -ef | grep kube-controller-manager | grep -v grep",
        "expect": "kube-controller-manager"
    },
    "custom_item_59": {
        "system": "Linux",
        "description": "1.4.3 Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive",
        "info": "Ensure that the controller manager pod specification file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe controller manager pod specification file controls various parameters that set the behavior of the Controller Manager on the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CONTROLLER_MANAGER_CONFIG_FILE@",
        "mask": "133"
    },
    "custom_item_60": {
        "system": "Linux",
        "description": "1.4.4 Ensure that the controller manager pod specification file ownership is set to root:root",
        "info": "Ensure that the controller manager pod specification file ownership is set to 'root:root'.\n\nRationale:\n\nThe controller manager pod specification file controls various parameters that set the behavior of various components of the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CONTROLLER_MANAGER_CONFIG_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_61": {
        "description": "Check if Scheduler is running",
        "cmd": "ps -ef | grep kube-scheduler | grep -v grep",
        "expect": "kube-scheduler"
    },
    "custom_item_62": {
        "system": "Linux",
        "description": "1.4.5 Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive",
        "info": "Ensure that the scheduler pod specification file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe scheduler pod specification file controls various parameters that set the behavior of the Scheduler service in the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@SCHEDULER_FILE@",
        "mask": "133"
    },
    "custom_item_63": {
        "system": "Linux",
        "description": "1.4.6 Ensure that the scheduler pod specification file ownership is set to root:root",
        "info": "Ensure that the scheduler pod specification file ownership is set to 'root:root'.\n\nRationale:\n\nThe scheduler pod specification file controls various parameters that set the behavior of the 'kube-scheduler' service in the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/manifests/kube-scheduler.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@SCHEDULER_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_64": {
        "description": "Check if etcd is running",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "etcd "
    },
    "custom_item_65": {
        "system": "Linux",
        "description": "1.4.7 Ensure that the etcd pod specification file permissions are set to 644 or more restrictive",
        "info": "Ensure that the '/etc/kubernetes/manifests/etcd.yaml' file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' controls various parameters that set the behavior of the 'etcd' service in the master node. etcd is a highly-available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/manifests/etcd.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ETCD_CONF_FILE@",
        "mask": "133"
    },
    "custom_item_66": {
        "system": "Linux",
        "description": "1.4.8 Ensure that the etcd pod specification file ownership is set to root:root",
        "info": "Ensure that the '/etc/kubernetes/manifests/etcd.yaml' file ownership is set to 'root:root'.\n\nRationale:\n\nThe etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' controls various parameters that set the behavior of the 'etcd' service in the master node. etcd is a highly-available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/manifests/etcd.yaml\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ETCD_CONF_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_67": {
        "description": "Check if flanneld file exists",
        "file": "@FLANNELD_FILE@"
    },
    "custom_item_68": {
        "system": "Linux",
        "description": "1.4.9 Ensure that the Container Network Interface file permissions are set to 644 or more restrictive",
        "info": "Ensure that the Container Network Interface files have permissions of '644' or more restrictive.\n\nRationale:\n\nContainer Network Interface provides various networking options for overlay networking. You should consult their documentation and restrict their respective file permissions to maintain the integrity of those files. Those files should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@FLANNELD_FILE@",
        "mask": "133"
    },
    "custom_item_69": {
        "system": "Linux",
        "description": "1.4.10 Ensure that the Container Network Interface file ownership is set to root:root",
        "info": "Ensure that the Container Network Interface files have ownership set to 'root:root'.\n\nRationale:\n\nContainer Network Interface provides various networking options for overlay networking. You should consult their documentation and restrict their respective file permissions to maintain the integrity of those files. Those files should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@FLANNELD_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_70": {
        "description": "Check if etcd is running",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "etcd "
    },
    "custom_item_71": {
        "system": "Linux",
        "description": "1.4.11 Ensure that the etcd data directory permissions are set to 700 or more restrictive",
        "info": "Ensure that the etcd data directory has permissions of '700' or more restrictive.\n\nRationale:\n\netcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should not be readable or writable by any group members or the world.",
        "solution": "On the etcd server node, get the etcd data directory, passed as an argument '--data-dir', from the below command:\n\nps -ef | grep etcd\n\nRun the below command (based on the etcd data directory found above). For example,\n\nchmod 700 /var/lib/etcd\n\nImpact:\n\nNone",
        "reference": "CSCv6|14,LEVEL|1A",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ETCD_DATA_DIR@",
        "mask": "077"
    },
    "custom_item_72": {
        "system": "Linux",
        "description": "1.4.12 Ensure that the etcd data directory ownership is set to etcd:etcd",
        "info": "Ensure that the etcd data directory ownership is set to 'etcd:etcd'.\n\nRationale:\n\netcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should be owned by 'etcd:etcd'.",
        "solution": "On the etcd server node, get the etcd data directory, passed as an argument '--data-dir', from the below command:\n\nps -ef | grep etcd\n\nRun the below command (based on the etcd data directory found above). For example,\n\nchown etcd:etcd /var/lib/etcd\n\nImpact:\n\nNone",
        "reference": "CSCv6|14,LEVEL|1A",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ETCD_DATA_DIR@",
        "owner": "etcd",
        "group": "etcd"
    },
    "custom_item_73": {
        "system": "Linux",
        "description": "1.4.13 Ensure that the admin.conf file permissions are set to 644 or more restrictive",
        "info": "Ensure that the 'admin.conf' file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe 'admin.conf' is the administrator kubeconfig file defining various settings for the administration of the cluster. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/admin.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ADMIN_KUBECONFIG_FILE@",
        "mask": "133"
    },
    "custom_item_74": {
        "system": "Linux",
        "description": "1.4.14 Ensure that the admin.conf file ownership is set to root:root",
        "info": "Ensure that the 'admin.conf' file ownership is set to 'root:root'.\n\nRationale:\n\nThe 'admin.conf' file contains the admin credentials for the cluster. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/admin.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@ADMIN_KUBECONFIG_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_75": {
        "system": "Linux",
        "description": "1.4.15 Ensure that the scheduler.conf file permissions are set to 644 or more restrictive",
        "info": "Ensure that the 'scheduler.conf' file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe 'scheduler.conf' file is the kubeconfig file for the Scheduler. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/scheduler.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@SCHEDULER_KUBECONFIG_FILE@",
        "mask": "133"
    },
    "custom_item_76": {
        "system": "Linux",
        "description": "1.4.16 Ensure that the scheduler.conf file ownership is set to root:root",
        "info": "Ensure that the 'scheduler.conf' file ownership is set to 'root:root'.\n\nRationale:\n\nThe 'scheduler.conf' file is the kubeconfig file for the Scheduler. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/scheduler.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@SCHEDULER_KUBECONFIG_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_77": {
        "system": "Linux",
        "description": "1.4.17 Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive",
        "info": "Ensure that the 'controller-manager.conf' file has permissions of 644 or more restrictive.\n\nRationale:\n\nThe 'controller-manager.conf' file is the kubeconfig file for the Controller Manager. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchmod 644 /etc/kubernetes/controller-manager.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CONTROLLER_MANAGER_KUBECONFIG_FILE@",
        "mask": "133"
    },
    "custom_item_78": {
        "system": "Linux",
        "description": "1.4.18 Ensure that the controller-manager.conf file ownership is set to root:root",
        "info": "Ensure that the 'controller-manager.conf' file ownership is set to 'root:root'.\n\nRationale:\n\nThe 'controller-manager.conf' file is the kubeconfig file for the Controller Manager. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the master node. For example,\n\nchown root:root /etc/kubernetes/controller-manager.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "CONTROLLER_MANAGER_KUBECONFIG_FILE",
        "owner": "root",
        "group": "root"
    },
    "custom_item_79": {
        "description": "Check if etcd is running",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "etcd "
    },
    "custom_item_80": {
        "system": "Linux",
        "description": "1.5.1 Ensure that the --cert-file and --key-file arguments are set as appropriate - ca-file",
        "info": "Configure TLS encryption for the etcd service.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit.",
        "solution": "Follow the etcd service documentation and configure TLS encryption.\n\nThen, edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameters.\n\n--ca-file=\n--key-file=\n\nImpact:\n\nClient connections only over TLS would be served.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--cert-file=@CERT_FILE@([\\\\s]|$)"
    },
    "custom_item_81": {
        "system": "Linux",
        "description": "1.5.1 Ensure that the --cert-file and --key-file arguments are set as appropriate - key-file",
        "info": "Configure TLS encryption for the etcd service.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit.",
        "solution": "Follow the etcd service documentation and configure TLS encryption.\n\nThen, edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameters.\n\n--ca-file=\n--key-file=\n\nImpact:\n\nClient connections only over TLS would be served.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--key-file=@KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_82": {
        "system": "Linux",
        "description": "1.5.2 Ensure that the --client-cert-auth argument is set to true",
        "info": "Enable client authentication on etcd service.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameter.\n\n--client-cert-auth='true'\n\nImpact:\n\nAll clients attempting to access the etcd server will require a valid client certificate.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--client-cert-auth=true"
    },
    "custom_item_83": {
        "system": "Linux",
        "description": "1.5.3 Ensure that the --auto-tls argument is not set to true",
        "info": "Do not use self-signed certificates for TLS.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and either remove the '--auto-tls' parameter or set it to 'false'.\n\n--auto-tls=false\n\nImpact:\n\nClients will not be able to use self-signed certificates for TLS.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "^((?!--auto-tls=true).)*$"
    },
    "custom_item_84": {
        "system": "Linux",
        "description": "1.5.4 Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate - peer-cert-file",
        "info": "etcd should be configured to make use of TLS encryption for peer connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster.\n\nThen, edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameters.\n\n--peer-client-file=\n--peer-key-file=\n\nImpact:\n\netcd cluster peers would need to set up TLS for their communication.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--peer-cert-file=@PEER_CERT_FILE@([\\\\s]|$)"
    },
    "custom_item_85": {
        "system": "Linux",
        "description": "1.5.4 Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate - peer-key-file",
        "info": "etcd should be configured to make use of TLS encryption for peer connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster.\n\nThen, edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameters.\n\n--peer-client-file=\n--peer-key-file=\n\nImpact:\n\netcd cluster peers would need to set up TLS for their communication.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--peer-key-file=@PEER_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_86": {
        "system": "Linux",
        "description": "1.5.5 Ensure that the --peer-client-cert-auth argument is set to true",
        "info": "etcd should be configured for peer authentication.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameter.\n\n--peer-client-cert-auth=true\n\nImpact:\n\nAll peers attempting to communicate with the etcd server will require a valid client certificate for authentication.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--peer-client-cert-auth=true"
    },
    "custom_item_87": {
        "system": "Linux",
        "description": "1.5.6 Ensure that the --peer-auto-tls argument is not set to true",
        "info": "Do not use automatically generated self-signed certificates for TLS connections between peers.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster. Hence, do not use self-signed certificates for authentication.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and either remove the '--peer-auto-tls' parameter or set it to 'false'.\n\n--peer-auto-tls=false\n\nImpact:\n\nAll peers attempting to communicate with the etcd server will require a valid client certificate for authentication.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "^((?!--peer-auto-tls=true).)*$"
    },
    "custom_item_88": {
        "system": "Linux",
        "description": "1.5.7 Ensure that the --wal-dir argument is set as appropriate",
        "info": "Store etcd logs separately from etcd data.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be mixed with log data. Keeping the log data separate from the etcd data also ensures that those two types of data could individually be safeguarded. Also, you could use a centralized and remote log directory for persistent logging. Additionally, this separation also helps to avoid IO competition between logging and other IO operations.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameter.\n\n--wal-dir=\n\nImpact:\n\nNone",
        "reference": "800-171|3.3.8,800-53|AU-9,800-53r5|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv6|14,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1A,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6,PCI-DSSv3.2.1|10.5,PCI-DSSv3.2.1|10.5.2,PCI-DSSv4.0|10.3.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--wal-dir=@WAL_DIR@([\\\\s]|$)"
    },
    "custom_item_89": {
        "system": "Linux",
        "description": "1.5.8 Ensure that the --max-wals argument is set to 0",
        "info": "Do not auto rotate logs.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. You should avoid automatic log rotation and instead safeguard the logs in a centralized repository or through a separate log management system.",
        "solution": "Edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameter.\n\n--max-wals=0\n\nImpact:\n\nYou will have to manage log rotation and archiving.",
        "reference": "800-171|3.3.8,800-53|AU-9,800-53r5|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv6|6,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1A,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6,PCI-DSSv3.2.1|10.5,PCI-DSSv3.2.1|10.5.2,PCI-DSSv4.0|10.3.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep",
        "expect": "--max-wals=0([\\\\s]|$)"
    },
    "custom_item_90": {
        "description": "Check if kubectl exists",
        "file": "@KUBECTL_PATH@/kubectl"
    },
    "custom_item_91": {
        "system": "Linux",
        "description": "1.6.1 Ensure that the cluster-admin role is only used where required",
        "info": "The RBAC role 'cluster-admin' provides wide-ranging powers over the environment and should be used only where and when needed.\n\nRationale:\n\nKubernetes provides a set of default roles where RBAC is used. Some of these roles such as 'cluster-admin' provide wide-ranging privileges which should only be applied where absolutely necessary. Roles such as 'cluster-admin' allow super-user access to perform any action on any resource. When used in a 'ClusterRoleBinding', it gives full control over every resource in the cluster and in all namespaces. When used in a 'RoleBinding', it gives full control over every resource in the rolebinding's namespace, including the namespace itself.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Remove any unneeded 'clusterrolebindings':\n\nkubectl delete clusterrolebinding [name]\n\nImpact:\n\nCare should be taken before removing any `clusterrolebindings` from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to `clusterrolebindings` with the `system:` prefix as they are required for the operation of system components.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_92": {
        "system": "Linux",
        "description": "1.6.2 Create Pod Security Policies for your cluster",
        "info": "Create and enforce Pod Security Policies for your cluster.\n\nRationale:\n\nA Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The 'PodSecurityPolicy' objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the documentation and create and enforce Pod Security Policies for your cluster. Additionally, you could refer the 'CIS Security Benchmark for Docker' and follow the suggested Pod Security Policies for your environment.\n\nImpact:\n\nPods must align with the Pod Security Policies enforced on the cluster.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1M,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get psp",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_93": {
        "system": "Linux",
        "description": "1.6.3 Create administrative boundaries between resources using namespaces",
        "info": "Use namespaces to isolate your Kubernetes objects.\n\nRationale:\n\nLimiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in Kubernetes cluster runs in a default namespace, called 'default'. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Follow the documentation and create namespaces for objects in your deployment as you need them.\n\nImpact:\n\nYou need to switch between namespaces for administration.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "@KUBECTL_PATH@/kubectl get namespaces",
        "expect": "MANUAL_REVIEW"
    },
    "custom_item_94": {
        "system": "Linux",
        "description": "2.1.1 Ensure that the --allow-privileged argument is set to false",
        "info": "Do not allow privileged containers.\n\nRationale:\n\nThe privileged container has all the system capabilities, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker and hence should be avoided for production workloads.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--allow-privileged=false\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nYou will not be able to run any privileged containers.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|5.1,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--allow-privileged=false"
    },
    "custom_item_95": {
        "system": "Linux",
        "description": "2.1.2 Ensure that the --anonymous-auth argument is set to false",
        "info": "Disable anonymous requests to the Kubelet server.\n\nRationale:\n\nWhen enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--anonymous-auth=false\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nAnonymous requests will be rejected.",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--anonymous-auth=false"
    },
    "custom_item_96": {
        "system": "Linux",
        "description": "2.1.3 Ensure that the --authorization-mode argument is not set to AlwaysAllow",
        "info": "Do not allow all requests. Enable explicit authorization.\n\nRationale:\n\nKubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_AUTHZ_ARGS' variable.\n\n--authorization-mode=Webhook\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nUnauthorized requests will be denied.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--authorization-mode=((?!AlwaysAllow).)*([\\\\s]|$)"
    },
    "custom_item_97": {
        "system": "Linux",
        "description": "2.1.4 Ensure that the --client-ca-file argument is set as appropriate",
        "info": "Enable Kubelet authentication using certificates.\n\nRationale:\n\nThe connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelets port-forwarding functionality. These connections terminate at the kubelets HTTPS endpoint. By default, the apiserver does not verify the kubelets serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_AUTHZ_ARGS' variable.\n\n--client-ca-file=\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nYou require TLS to be configured on apiserver as well as kubelets.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--client-ca-file=@CLIENT_CA_FILE@([\\\\s]|$)"
    },
    "custom_item_98": {
        "system": "Linux",
        "description": "2.1.5 Ensure that the --read-only-port argument is set to 0",
        "info": "Disable the read-only port.\n\nRationale:\n\nThe Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--read-only-port=0\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nRemoval of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1A,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--read-only-port=0([\\\\s]|$)"
    },
    "custom_item_99": {
        "system": "Linux",
        "description": "2.1.6 Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
        "info": "Do not disable timeouts on streaming connections.\n\nRationale:\n\nSetting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.\n\n**Note:** By default, '--streaming-connection-idle-timeout' is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--streaming-connection-idle-timeout=5m\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nLong-lived connections could be interrupted.",
        "reference": "800-53|SC-5,800-53r5|SC-5,CSCv6|9,CSF|DE.CM-1,CSF|PR.DS-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-5,ITSG-33|SC-5a.,LEVEL|1A,NESA|T3.3.1,NIAv2|GS8e,NIAv2|GS10c,QCSC-v1|8.2.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--streaming-connection-idle-timeout=[^0]"
    },
    "custom_item_100": {
        "system": "Linux",
        "description": "2.1.7 Ensure that the --protect-kernel-defaults argument is set to true",
        "info": "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.\n\nRationale:\n\nKernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--protect-kernel-defaults=true\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nYou would have to re-tune kernel parameters to match kubelet parameters.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--protect-kernel-defaults=true"
    },
    "custom_item_101": {
        "system": "Linux",
        "description": "2.1.8 Ensure that the --make-iptables-util-chains argument is set to true",
        "info": "Allow Kubelet to manage iptables.\n\nRationale:\n\nKubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and remove the '--make-iptables-util-chains' argument from the 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nKubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.",
        "reference": "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),800-53r5|SC-7(5),CN-L3|7.1.2.2(c),CSCv6|9,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(5),LEVEL|1A,NESA|T4.5.4,NIAv2|GS7b,NIAv2|NS25,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--make-iptables-util-chains=true"
    },
    "custom_item_102": {
        "system": "Linux",
        "description": "2.1.9 Ensure that the --keep-terminated-pod-volumes argument is set to false",
        "info": "Unmount volumes from the nodes on pod termination.\n\nRationale:\n\nOn pod termination, you should unmount the volumes. Those volumes might have sensitive data that might be exposed if kept mounted on the node without any use. Additionally, such mounted volumes could be modified and later could be mounted on pods. Also, if you retain all mounted volumes for a long time, it might exhaust system resources and you might not be able to mount any more volumes on new pods.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--keep-terminated-pod-volumes=false\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nVolumes will not be available for debugging.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--keep-terminated-pod-volumes=false"
    },
    "custom_item_103": {
        "system": "Linux",
        "description": "2.1.10 Ensure that the --hostname-override argument is not set",
        "info": "Do not override node hostnames.\n\nRationale:\n\nOverriding hostnames could potentially break TLS setup between the kubelet and the apiserver. Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and remove the '--hostname-override' argument from the 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nNode hostnames should have resolvable FQDNs.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "^((?!--hostname-override).)*$"
    },
    "custom_item_104": {
        "system": "Linux",
        "description": "2.1.11 Ensure that the --event-qps argument is set to 0",
        "info": "Do not limit event creation.\n\nRationale:\n\nIt is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_SYSTEM_PODS_ARGS' variable.\n\n--event-qps=0\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nYou might need to scale up your event storage and processing capabilitles.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|6,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--event-qps=0([\\\\s]|$)"
    },
    "custom_item_105": {
        "system": "Linux",
        "description": "2.1.12 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file",
        "info": "Setup TLS connection on the Kubelets.\n\nRationale:\n\nKubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the Kubelet.\n\nThen edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameters in 'KUBELET_CERTIFICATE_ARGS' variable.\n\n--tls-cert-file=\n--tls-private-key-file=\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--tls-cert-file=@TLS_CERT_FILE@([\\\\s]|$)"
    },
    "custom_item_106": {
        "system": "Linux",
        "description": "2.1.12 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file",
        "info": "Setup TLS connection on the Kubelets.\n\nRationale:\n\nKubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the Kubelet.\n\nThen edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameters in 'KUBELET_CERTIFICATE_ARGS' variable.\n\n--tls-cert-file=\n--tls-private-key-file=\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--tls-private-key-file=@TLS_PRIVATE_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_107": {
        "system": "Linux",
        "description": "2.1.13 Ensure that the --cadvisor-port argument is set to 0",
        "info": "Disable cAdvisor.\n\nRationale:\n\ncAdvisor provides potentially sensitive data and there's currently no way to block access to it using anything other than iptables. It does not require authentication/authorization to connect to the cAdvisor port. Hence, you should disable the port.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_CADVISOR_ARGS' variable.\n\n--cadvisor-port=0\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\ncAdvisor will not be available directly. You need to work with `/metrics` endpoint on the API server.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|9.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "--cadvisor-port=0([\\\\s]|$)"
    },
    "custom_item_108": {
        "system": "Linux",
        "description": "2.1.14 Ensure that the RotateKubeletClientCertificate argument is not set to false",
        "info": "Enable kubelet client certificate rotation.\n\nRationale:\n\n'RotateKubeletClientCertificate' causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.\n\nNote: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and remove the '--feature-gates=RotateKubeletClientCertificate=false' argument from the 'KUBELET_CERTIFICATE_ARGS' variable.\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "RotateKubeletClientCertificate=true"
    },
    "custom_item_109": {
        "system": "Linux",
        "description": "2.1.15 Ensure that the RotateKubeletServerCertificate argument is set to true",
        "info": "Enable kubelet server certificate rotation.\n\nRationale:\n\n'RotateKubeletServerCertificate' causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.\n\nNote: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.",
        "solution": "Edit the kubelet service file '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' on each worker node and set the below parameter in 'KUBELET_CERTIFICATE_ARGS' variable.\n\n--feature-gates=RotateKubeletServerCertificate=true\n\nBased on your system, restart the 'kubelet' service. For example:\n\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep kubelet | grep -v grep",
        "expect": "RotateKubeletServerCertificate=true"
    },
    "custom_item_110": {
        "system": "Linux",
        "description": "2.2.1 Ensure that the kubelet.conf file permissions are set to 644 or more restrictive",
        "info": "Ensure that the 'kubelet.conf' file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe 'kubelet.conf' file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchmod 644 /etc/kubernetes/kubelet.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CONFIG_FILE@",
        "mask": "133"
    },
    "custom_item_111": {
        "system": "Linux",
        "description": "2.2.2 Ensure that the kubelet.conf file ownership is set to root:root",
        "info": "Ensure that the 'kubelet.conf' file ownership is set to 'root:root'.\n\nRationale:\n\nThe 'kubelet.conf' file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchown root:root /etc/kubernetes/kubelet.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CONFIG_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_112": {
        "system": "Linux",
        "description": "2.2.3 Ensure that the kubelet service file permissions are set to 644 or more restrictive",
        "info": "Ensure that the 'kubelet' service file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe 'kubelet' service file controls various parameters that set the behavior of the 'kubelet' service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchmod 755 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@KUBELET_FILE@",
        "mask": "133"
    },
    "custom_item_113": {
        "system": "Linux",
        "description": "2.2.4 Ensure that the kubelet service file ownership is set to root:root",
        "info": "Ensure that the 'kubelet' service file ownership is set to 'root:root'.\n\nRationale:\n\nThe 'kubelet' service file controls various parameters that set the behavior of the 'kubelet' service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@KUBELET_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_114": {
        "system": "Linux",
        "description": "2.2.5 Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive",
        "info": "If 'kube-proxy' is running, ensure that the proxy kubeconfig file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe 'kube-proxy' kubeconfig file controls various parameters of the 'kube-proxy' service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchmod 644\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@PROXY_FILE@",
        "mask": "133"
    },
    "custom_item_115": {
        "system": "Linux",
        "description": "2.2.6 Ensure that the proxy kubeconfig file ownership is set to root:root",
        "info": "If 'kube-proxy' is running, ensure that the file ownership of its kubeconfig file is set to 'root:root'.\n\nRationale:\n\nThe kubeconfig file for 'kube-proxy' controls various parameters for the 'kube-proxy' service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the below command (based on the file location on your system) on the each worker node. For example,\n\nchown root:root\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@PROXY_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_116": {
        "system": "Linux",
        "description": "2.2.7 Ensure that the certificate authorities file permissions are set to 644 or more restrictive",
        "info": "Ensure that the certificate authorities file has permissions of '644' or more restrictive.\n\nRationale:\n\nThe certificate authorities file controls the authorities used to validate API requests. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
        "solution": "Run the following command to modify the file permissions of the '--client-ca-file'\n\nchmod 644\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSCv6|14.4,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CLIENT_CA_FILE@",
        "mask": "133"
    },
    "custom_item_117": {
        "system": "Linux",
        "description": "2.2.8 Ensure that the client certificate authorities file ownership is set to root:root",
        "info": "Ensure that the certificate authorities file ownership is set to root:root.\n\nRationale:\n\nThe certificate authorities file controls the authorities used to validate API requests. You should set its file ownership to maintain the integrity of the file. The file should be owned by 'root:root'.",
        "solution": "Run the following command to modify the ownership of the '--client-ca-file'.\n\nchown root:root\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "file": "@CLIENT_CA_FILE@",
        "owner": "root",
        "group": "root"
    },
    "custom_item_118": {
        "description": "Check if Federation API Server is running",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "federation-apiserver"
    },
    "custom_item_119": {
        "system": "Linux",
        "description": "3.1.1 Ensure that the --anonymous-auth argument is set to false",
        "info": "Disable anonymous requests to the federation API server.\n\nRationale:\n\nWhen enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the federation API server. You should rely on authentication to authorize access and disallow anonymous requests.",
        "solution": "Edit the deployment specs and set '--anonymous-auth=false'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nAnonymous requests will be rejected.",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--anonymous-auth=false"
    },
    "custom_item_120": {
        "system": "Linux",
        "description": "3.1.2 Ensure that the --basic-auth-file argument is not set",
        "info": "Do not use basic authentication.\n\nRationale:\n\nBasic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting the federation API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used.",
        "solution": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove '--basic-auth-file='.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nYou will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used.",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CSCv6|16.14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),LEVEL|1A,NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "^((?!--basic-auth-file).)*$"
    },
    "custom_item_121": {
        "system": "Linux",
        "description": "3.1.3 Ensure that the --insecure-allow-any-token argument is not set",
        "info": "Do not allow any insecure tokens.\n\nRationale:\n\nAccepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed.",
        "solution": "Edit the deployment specs and remove '--insecure-allow-any-token'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|1A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "^((?!--insecure-allow-any-token).)*$"
    },
    "custom_item_122": {
        "system": "Linux",
        "description": "3.1.4 Ensure that the --insecure-bind-address argument is not set",
        "info": "Do not bind to insecure addresses.\n\nRationale:\n\nIf you bind the federation apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to it. The federation apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the federation apiserver to an insecure address.",
        "solution": "Edit the deployment specs and remove '--insecure-bind-address'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1A,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "(--insecure-bind-address=127.0.0.1|^((?!--insecure-bind-address).)*$)"
    },
    "custom_item_123": {
        "system": "Linux",
        "description": "3.1.5 Ensure that the --insecure-port argument is set to 0",
        "info": "Do not bind to insecure port.\n\nRationale:\n\nSetting up the federation apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to it. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port.",
        "solution": "Edit the deployment specs and set '--insecure-port=0'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1A,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--insecure-port=0([\\\\s]|$)"
    },
    "custom_item_124": {
        "system": "Linux",
        "description": "3.1.6 Ensure that the --secure-port argument is not set to 0",
        "info": "Do not disable the secure port.\n\nRationale:\n\nThe secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.",
        "solution": "Edit the deployment specs and set the '--secure-port' argument to the desired port.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nYou need to set the federation apiserver up with the right TLS certificates.",
        "reference": "800-171|3.13.8,800-53|SC-8(1),800-53r5|SC-8(1),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1A,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|2.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "(--secure-port=[1-9]|^((?!--secure-port).)*$)"
    },
    "custom_item_125": {
        "system": "Linux",
        "description": "3.1.7 Ensure that the --profiling argument is set to false",
        "info": "Disable profiling, if not needed.\n\nRationale:\n\nProfiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
        "solution": "Edit the deployment specs and set '--profiling=false':\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nProfiling information would not be available.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--profiling=false"
    },
    "custom_item_126": {
        "system": "Linux",
        "description": "3.1.8 Ensure that the admission control policy is not set to AlwaysAdmit",
        "info": "Do not allow all requests.\n\nRationale:\n\nSetting admission control policy to 'AlwaysAdmit' allows all requests and do not filter any requests.",
        "solution": "Edit the deployment specs and set '--admission-control' argument to a value that does not include 'AlwaysAdmit'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nOnly requests explicitly allowed by the admissions control policy would be served.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--admission-control=((?!AlwaysAdmit).)*([\\\\s]|$)"
    },
    "custom_item_127": {
        "system": "Linux",
        "description": "3.1.9 Ensure that the admission control policy is set to NamespaceLifecycle",
        "info": "Reject creating objects in a namespace that is undergoing termination.\n\nRationale:\n\nSetting admission control policy to 'NamespaceLifecycle' ensures that the namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.",
        "solution": "Edit the deployment specs and set '--admission-control' argument to a value that includes 'NamespaceLifecycle'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--admission-control=[A-z,]*NamespaceLifecycle[A-z,]*([\\\\s]|$)"
    },
    "custom_item_128": {
        "system": "Linux",
        "description": "3.1.10 Ensure that the --audit-log-path argument is set as appropriate",
        "info": "Enable auditing on kubernetes federation apiserver and set the desired audit log path as appropriate.\n\nRationale:\n\nAuditing Kubernetes federation apiserver provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.",
        "solution": "Edit the deployment specs and set '--audit-log-path' argument as appropriate.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-12c.,800-53r5|AU-12c.,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12c.,LEVEL|1A,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--audit-log-path=@AUDIT_LOG_PATH@([\\\\s]|$)"
    },
    "custom_item_129": {
        "system": "Linux",
        "description": "3.1.11 Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
        "info": "Retain the logs for at least 30 days or as appropriate.\n\nRationale:\n\nRetaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.",
        "solution": "Edit the deployment specs and set '--audit-log-maxage' to '30' or as appropriate.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--audit-log-maxage=@AUDIT_LOG_MAXAGE@([\\\\s]|$)"
    },
    "custom_item_130": {
        "system": "Linux",
        "description": "3.1.12 Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
        "info": "Retain 10 or an appropriate number of old log files.\n\nRationale:\n\nKubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
        "solution": "Edit the deployment specs and set '--audit-log-maxbackup' to '10' or as appropriate.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--audit-log-maxbackup=@AUDIT_LOG_MAXBACKUP@([\\\\s]|$)"
    },
    "custom_item_131": {
        "system": "Linux",
        "description": "3.1.13 Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
        "info": "Rotate log files on reaching 100 MB or as appropriate.\n\nRationale:\n\nKubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
        "solution": "Edit the deployment specs and set '--audit-log-maxsize=100' to '100' or as appropriate.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--audit-log-maxsize=@AUDIT_LOG_MAXSIZE@([\\\\s]|$)"
    },
    "custom_item_132": {
        "system": "Linux",
        "description": "3.1.14 Ensure that the --authorization-mode argument is not set to AlwaysAllow",
        "info": "Do not always authorize all requests.\n\nRationale:\n\nThe federation apiserver, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch-off that capability.",
        "solution": "Edit the deployment specs and set '--authorization-mode' argument to a value other than 'AlwaysAllow'\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nOnly authorized requests will be served.",
        "reference": "800-171|3.1.5,800-53|AC-6,800-53r5|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--authorization-mode=((?!AlwaysAllow).)*([\\\\s]|$)"
    },
    "custom_item_133": {
        "system": "Linux",
        "description": "3.1.15 Ensure that the --token-auth-file parameter is not set",
        "info": "Do not use token based authentication.\n\nRationale:\n\nThe token-based authentication utilizes static tokens to authenticate requests to the federation apiserver. The tokens are stored in clear-text in a file on the federation apiserver, and cannot be revoked or rotated without restarting the federation apiserver. Hence, do not use static token-based authentication.",
        "solution": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove the '--token-auth-file=' argument.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nYou will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used.",
        "reference": "800-171|3.5.10,800-53|IA-5(1)(c),800-53r5|IA-5(1)(c),CSCv6|16.14,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1)(c),LEVEL|1A,NESA|T5.2.3,NIAv2|CY6,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.1",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "^((?!--token-auth-file).)*$"
    },
    "custom_item_134": {
        "system": "Linux",
        "description": "3.1.16 Ensure that the --service-account-lookup argument is set to true",
        "info": "Validate service account before validating token.\n\nRationale:\n\nBy default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.",
        "solution": "Edit the deployment specs and set '--service-account-lookup=true'.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nNone",
        "reference": "800-171|3.5.2,800-53|IA-5(13),800-53r5|IA-5(13),CSCv6|16,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--service-account-lookup=true"
    },
    "custom_item_135": {
        "system": "Linux",
        "description": "3.1.17 Ensure that the --service-account-key-file argument is set as appropriate",
        "info": "Explicitly set a service account public key file for service accounts on the federation apiserver.\n\nRationale:\n\nBy default, if no '--service-account-key-file' is specified to the federation apiserver, it uses the private key from the TLS serving certificate to verify the account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with '--service-account-key-file'.",
        "solution": "Edit the deployment specs and set '--service-account-key-file' argument as appropriate.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nThe corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--service-account-key-file=@SERVICE_ACCOUNT_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_136": {
        "system": "Linux",
        "description": "3.1.18 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-certfile",
        "info": "etcd should be configured to make use of TLS encryption for client connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the federation API server to identify itself to the etcd server using a client certificate and key.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set '--etcd-certfile=' and '--etcd-keyfile=' arguments.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nTLS and client certificate authentication must be configured for etcd.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|9,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--etcd-certfile=@ETCD_CERTFILE@([\\\\s]|$)"
    },
    "custom_item_137": {
        "system": "Linux",
        "description": "3.1.18 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-keyfile",
        "info": "etcd should be configured to make use of TLS encryption for client connections.\n\nRationale:\n\netcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the federation API server to identify itself to the etcd server using a client certificate and key.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set '--etcd-certfile=' and '--etcd-keyfile=' arguments.\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nTLS and client certificate authentication must be configured for etcd.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|9,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--etcd-keyfile=@ETCD_KEYFILE@([\\\\s]|$)"
    },
    "custom_item_138": {
        "system": "Linux",
        "description": "3.1.19 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file",
        "info": "Setup TLS connection on the federation API server.\n\nRationale:\n\nFederation API server communication contains sensitive parameters that should remain encrypted in transit. Configure the federation API server to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set '--tls-cert-file=' and '--tls-private-key-file=':\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--tls-cert-file=@TLS_CERT_FILE@([\\\\s]|$)"
    },
    "custom_item_139": {
        "system": "Linux",
        "description": "3.1.19 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file",
        "info": "Setup TLS connection on the federation API server.\n\nRationale:\n\nFederation API server communication contains sensitive parameters that should remain encrypted in transit. Configure the federation API server to serve only HTTPS traffic.",
        "solution": "Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set '--tls-cert-file=' and '--tls-private-key-file=':\n\nkubectl edit deployments federation-apiserver-deployment --namespace=federation-system\n\nImpact:\n\nTLS and client certificate authentication must be configured for your Kubernetes cluster deployment.",
        "reference": "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-apiserver | grep -v grep",
        "expect": "--tls-private-key-file=@TLS_PRIVATE_KEY_FILE@([\\\\s]|$)"
    },
    "custom_item_140": {
        "description": "Check if Federation Controller Manager is running",
        "cmd": "ps -ef | grep federation-controller-manager | grep -v grep",
        "expect": "federation-controller-manager"
    },
    "custom_item_141": {
        "system": "Linux",
        "description": "3.2.1 Ensure that the --profiling argument is set to false",
        "info": "Disable profiling, if not needed.\n\nRationale:\n\nProfiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
        "solution": "Edit the deployment specs and set '--profiling=false':\n\nkubectl edit deployments federation-controller-manager-deployment --namespace=federation-system\n\nImpact:\n\nProfiling information would not be available.",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|1A,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/1788",
        "cmd": "ps -ef | grep federation-controller-manager | grep -v grep",
        "expect": "--profiling=false"
    }
}