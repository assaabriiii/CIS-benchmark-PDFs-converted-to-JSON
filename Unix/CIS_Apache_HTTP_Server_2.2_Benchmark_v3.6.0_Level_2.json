{
    "custom_item_1": {
        "description": "Apache found",
        "cmd": "@HTTPD_LOCATION@ -version",
        "expect": "@HTTPD_NAME@/@PRODUCT_VERSION@.*"
    },
    "custom_item_2": {
        "description": "1.2 Ensure the Server Is Not a Multi-Use System",
        "info": "A web server should function as only a web server, and it possible should not be mixed with other primary functions such as email, DNS, databases, or middleware. The number of services and daemons executing on the server should be limited to those necessary.\n\nRationale:\n\nDefault server configurations often expose a wide variety of services. The more services exposed to an attacker, the more potential vectors an attacker has to exploit the server and therefore the higher the risk for the server. Just because a server can perform many services doesn't mean it is wise to do so. Maintaining a server for a single purpose increases the security of your application and system.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Leverage the package or services manager for your OS to uninstall or disable all unneeded services. On Red Hat systems, the following will disable a given service:\n\n\tchkconfigoff",
        "reference": "800-53|SC-3,800-53r5|SC-3,CSCv6|9.5,CSCv7|2.10,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-3,ITSG-33|SC-3a.,LEVEL|2S,NESA|T3.4.1,NESA|T4.3.1,NESA|T4.3.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/sbin/chkconfig --list | /bin/grep ':on'",
        "expect": ""
    },
    "custom_item_3": {
        "description": "1.3 Ensure Apache Is Installed From the Appropriate Binaries",
        "info": "The CIS Apache Benchmark recommends using the Apache binary provided by your vendor for most situations in order to reduce the effort and increase the effectiveness of maintenance and security patches. However, to keep the benchmark as generic and applicable to all Unix/Linux platforms as possible, a default source build has been used for this benchmark.\n\n**Important Note**: There is a major difference between source builds and most vendor packages that is very important to highlight. The default source build of Apache is fairly conservative and minimalist in the modules included, and therefore starts off in a fairly strong security state, while most vendor binaries are typically very well loaded with most of the functionality that one may be looking for. _**Therefore, it is important that you don't assume the default value shown in the benchmark will match default values in your installation.**_ You should always test any new installation in your environment before putting it into production. Also, keep in mind you can install and run a new version alongside the old one by using a different Apache prefix and a different IP address or port number in the 'Listen' directive.\n\nRationale:\n\nThe benefits of using vendor supplied binaries include:\n- Easy installation; it should work straight out of the box.\n- It is customized for your OS environment.\n- It has been tested and gone through QA procedures.\n- Everything you need is likely to be included, probably including some third-party modules. Many OS vendors ship Apache with 'mod_ssl', OpenSSL, PHP, 'mod_perl' and 'mod_security', for example.\n- Your vendor will tell you about security issues, so you have to look for information in fewer places.\n- Updates to fix security issues will be easy to apply. The vendor will have already verified the problem, checked the signature on the Apache download, worked out the impact, and so on.\n- You may be able to get the updates automatically, reducing the window of risk.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Installation depends on the operating system platform. For a source build, consult the Apache 2.2 documentation on compiling and installing [http://httpd.apache.org/docs/2.2/install.html](http://httpd.apache.org/docs/2.2/install.html). For Red Hat Enterprise Linux 5, the following 'yum' command could be used:\n\n# yum install httpd",
        "reference": "800-171|3.4.1,800-171|3.4.8,800-171|3.4.9,800-53|CM-7(5),800-53|CM-8,800-53|CM-11,800-53r5|CM-7(5),800-53r5|CM-8,800-53r5|CM-11,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv6|2,CSCv7|2.1,CSCv7|2.2,CSF|DE.CM-3,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,ITSG-33|CM-8,LEVEL|2S,NESA|T1.2.1,NESA|T1.2.2,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|8.2.1,SWIFT-CSCv1|2.3,SWIFT-CSCv1|5.1,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -V",
        "expect": "Manual Review Required"
    },
    "custom_item_4": {
        "description": "2.1 Ensure Only Necessary Authentication and Authorization Modules Are Enabled - 'auth*'",
        "info": "The Apache 2.2 modules for authentication and authorization have been refactored to provide finer granularity and more consistent and logical names, and to simplify configuration. The 'authn_*' modules provide authentication, while the 'authz_*' modules provide authorization. Apache provides two types of authentication: basic and digest. Enable only the modules that are required.\n\nRationale:\n\nAuthentication and authorization are the front doors to the protected information in your web site. Most installations only need a small subset of the modules available. By minimizing the enabled modules to those that are actually used, we reduce the number of 'doors' and therefore reduce the attack surface of the web site. Likewise, having fewer modules means less software that could have vulnerabilities.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Consult Apache module documentation for descriptions of each module in order to determine the necessary modules for the specific installation. The unnecessary static compiled modules are disabled through compile time configuration options. The dynamically loaded modules are disabled by commenting out or removing the 'LoadModule' directive from the Apache configuration files (typically 'httpd.conf'). Some modules may be separate packages and may be removed.",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv6|16,CSCv7|16.1,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2S,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep 'auth._'",
        "expect": "Manual Review Required"
    },
    "custom_item_5": {
        "description": "2.1 Ensure Only Necessary Authentication and Authorization Modules Are Enabled - 'LDAP'",
        "info": "The Apache 2.2 modules for authentication and authorization have been refactored to provide finer granularity and more consistent and logical names, and to simplify configuration. The 'authn_*' modules provide authentication, while the 'authz_*' modules provide authorization. Apache provides two types of authentication: basic and digest. Enable only the modules that are required.\n\nRationale:\n\nAuthentication and authorization are the front doors to the protected information in your web site. Most installations only need a small subset of the modules available. By minimizing the enabled modules to those that are actually used, we reduce the number of 'doors' and therefore reduce the attack surface of the web site. Likewise, having fewer modules means less software that could have vulnerabilities.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Consult Apache module documentation for descriptions of each module in order to determine the necessary modules for the specific installation. The unnecessary static compiled modules are disabled through compile time configuration options. The dynamically loaded modules are disabled by commenting out or removing the 'LoadModule' directive from the Apache configuration files (typically 'httpd.conf'). Some modules may be separate packages and may be removed.",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv6|16,CSCv7|16.1,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2S,NESA|T1.2.1,NESA|T1.2.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep 'ldap'",
        "expect": "Manual Review Required"
    },
    "custom_item_6": {
        "description": "2.2 Ensure the Log Config Module Is Enabled",
        "info": "The 'log_config' module provides for flexible logging of client requests and for the configuration of the information in each log.\n\nRationale:\n\nLogging is critical for monitoring usage and potential abuse of your web server. To configure web server logging using the 'log_format' directive, this module is required.",
        "solution": "Perform either one of the following:\n- For source builds with static modules, run the Apache './configure' script without including the '--disable-log-config' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure\n\n- For dynamically loaded modules, add or modify the 'LoadModule' directive so that it is present in the Apache configuration as below and not commented out:\n\n LoadModule log_config_module modules/mod_log_config.so",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv6|6.2,CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]oad[Mm]odule[\\\\s]+[Ll]og_config_module[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]oad[Mm]odule[\\\\s]+[Ll]og_config_module[\\\\s]+modules/mod_log_config.so[\\\\s]*"
    },
    "custom_item_7": {
        "description": "2.3 Ensure the WebDAV Modules Are Disabled",
        "info": "The Apache 'mod_dav' and 'mod_dav_fs' modules support WebDAV ('Web-based Distributed Authoring and Versioning') functionality for Apache. WebDAV is an extension to the HTTP protocol which allows clients to create, move, and delete files and resources on the web server.\n\nRationale:\n\nWebDAV is not widely used, and it has serious security concerns because it may allow clients to modify unauthorized files on the web server. Therefore, the WebDav modules 'mod_dav' and 'mod_dav_fs' should be disabled.",
        "solution": "Perform either one of the following to disable the WebDAV modules:\n\n1. For source builds with static modules, run the Apache './configure' script without including 'mod_dav' and 'mod_dav_fs' in the '--enable-modules=configure' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_dav' and 'mod_dav_fs' modules from the 'httpd.conf' file.\n\n ##LoadModule dav_module modules/mod_dav.so\n ##LoadModule dav_fs_module modules/mod_dav_fs.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'dav_(fs_)?module' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_8": {
        "description": "2.4 Ensure the Status Module Is Disabled",
        "info": "The Apache 'mod_status' module provides current server performance statistics.\n\nRationale:\n\nWhile having server performance status information available as a web page may be convenient, it's recommended that this module be disabled. When it is enabled, its handler capability is available in all configuration files, including per-directory files (e.g., '.htaccess'). This may have security-related ramifications.",
        "solution": "Perform either one of the following to disable the 'mod_status' module:\n\n1. For source builds with static modules, run the Apache './configure' script with the '--disable-status configure' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure --disable-status\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_status' module from the 'httpd.conf' file.\n\n ##LoadModule status_module modules/mod_status.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'status_module' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_9": {
        "description": "2.5 Ensure the Autoindex Module Is Disabled",
        "info": "The Apache 'mod_autoindex' module automatically generates a web page listing the contents of directories on the server, typically used so an 'index.html' does not have to be generated.\n\nRationale:\n\nAutomated directory listings should not be enabled because they will reveal information helpful to an attacker such as naming conventions and directory paths. They may also reveal files that were not intended to be revealed.",
        "solution": "Perform either one of the following to disable the 'mod_autoindex' module:\n\n1. For source builds with static modules, run the Apache './configure' script with the '--disable-autoindex configure' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure -disable-autoindex\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_autoindex' module from the 'httpd.conf' file.\n\n ## LoadModule autoindex_module modules/mod_autoindex.so",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'autoindex_module' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_10": {
        "description": "2.6 Ensure the Proxy Modules Are Disabled",
        "info": "The Apache proxy modules allow the server to act as a proxy (either forward or reverse proxy) for HTTP and other protocols with additional proxy modules loaded. If the Apache installation is not intended to proxy requests to or from another network, the proxy module should not be loaded.\n\nRationale:\n\nProxy servers can act as an important security control when properly configured. However, a secure proxy server is not within the scope of this benchmark. A web server should be primarily a web server or a proxy server but not both, for the same reasons that other multi-use servers are not recommended. Scanning for web servers that will also proxy requests is a very common attack because proxy servers are useful for anonymizing attacks on other servers, or possibly proxying requests into an otherwise protected network.",
        "solution": "Perform either one of the following to disable the proxy modules:\n\n1. For source builds with static modules, run the Apache './configure' script without including the 'mod_proxy' and all other proxy modules in the '--enable-modules=configure' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_proxy' module and all other proxy modules from the 'httpd.conf' file.\n\n ##LoadModule proxy_module modules/mod_proxy.so\n ##LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\n ##LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\n ##LoadModule proxy_http_module modules/mod_proxy_http.so\n ##LoadModule proxy_connect_module modules/mod_proxy_connect.so\n ##LoadModule proxy_ajp_module modules/mod_proxy_ajp.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'proxy_' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_11": {
        "description": "2.7 Ensure the User Directories Module Is Disabled",
        "info": "The 'UserDir' directive must be disabled so that user home directories are not accessed via the web site with a tilde (~) preceding the username. The directive also sets the path name of the directory that will be accessed. For example:\n\n- [http://example.com/~ralph/](http://example.com/~ralph/) might access a 'public_html' sub-directory of 'ralph' user's home directory.\n- The directive 'UserDir ./' might map '/~root' to the root directory ('/').\n\nRationale:\n\nThe user directories should not be globally enabled since that allows anonymous access to anything users may want to share with other users on the network. Also consider that every time a new account is created on the system, there is potentially new content available via the web site.",
        "solution": "Perform either one of the following to disable the user directories module:\n\n1. For source builds with static modules, run the Apache './configure' script with the '--disable-userdir configure' script option.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure --disable-userdir\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_userdir' module from the 'httpd.conf' file.\n\n ##LoadModule userdir_module modules/mod_userdir.so",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'userdir_' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_12": {
        "description": "2.8 Ensure the Info Module Is Disabled",
        "info": "The Apache 'mod_info' module provides information on the server configuration via access to a '/server-info' URL location.\n\nRationale:\n\nAlthough having server configuration information available as a web page may be convenient, it's recommended that this module be disabled. Once the module is loaded into the server, its handler capability is available in per-directory '.htaccess' files. This can leak sensitive information, such as system paths, usernames/passwords, and database names, from the configuration directives of other Apache modules.",
        "solution": "Perform either one of the following to disable the 'mod_info' module:\n\n1. For source builds with static modules, run the Apache './configure' script without including 'mod_info' in the '--enable-modules= configure' script options.\n\n $ cd $DOWNLOAD/httpd-2.2.22\n $ ./configure\n\n2. For dynamically loaded modules, comment out or remove the 'LoadModule' directive for the 'mod_info' module from the 'httpd.conf' file.\n\n ##LoadModule info_module modules/mod_info.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep -v '^([Ll]oaded|[Ss]yntax)' | /bin/egrep 'info_module' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_13": {
        "system": "Linux",
        "description": "2.9 Ensure the Basic and Digest Authentication Modules are Disabled - auth_basic_module",
        "info": "The Apache 'mod_auth_basic' and 'mod_auth_digest' modules support HTTP Basic Authentication and HTTP Digest Authentication respectively. The two authentication protocols are used to restrict access to users who provide a valid user name and password.\n\nRationale:\n\nNeither HTTP Basic nor HTTP Digest authentication should be used as the protocols are out dated and no longer considered secure. Disabling the modules will improve the security posture of the web server by reducing the amount of potentially vulnerable code paths exposed to the network and reducing potential for unauthorized access to files via misconfigured access controls.\n\nIn the early days of the web, Basic HTTP Authentication was considered adequate if it was only used over HTTPS, so that the credentials would not be sent in the clear. Basic authentication uses Base64 to encode the credentials which are sent with every request. Base64 encoding is of course easily reversed, and is no more secure than clear text. The issues with using Basic Auth over HTTPS is that it does not meet current security standards for protecting the login credentials and protecting the authenticated\nsession. The following security issues plague the Basic Authentication protocol.\n\n- The authenticated session has an indefinite length (as long as any browser window is open) and is not timed-out on the server when the session is idle.\n\n- Application logout is required to invalidate the session on the server to limit, but in the case of Basic Authentication, there is no server-side session that can be invalidated.\n\n- The credentials are remembered by the browser and stored in memory.\n\n- There is no way to disable auto-complete, where the browser offers to store the passwords.\nPasswords stored in the browser can be accessed if the client system or browser become\ncompromised.\n\n- The credentials are more likely to be exposed since they are automatically sent with every\nrequest.\n\n- Administrators may at times have access to the HTTP headers sent in request for the purposes of diagnosing problems and detecting attacks. Having a user's credentials in the clear in the HTTP headers, may allow a user to repudiate actions performed, because the web or system\nadministrators also had access to the user's password.\n\nThe HTTP Digest Authentication is considered even worse than Basic Authentication because it stores the password in the clear on the server, and has the same session management issues as Basic Authentication.",
        "solution": "Perform either one of the following to disable the HTTP Basic or HTTP Digest authentication modules:\n\n1. For source builds with static modules run the Apache './configure' script without including the 'mod_auth_basic', and 'mod_auth_digest' in the '--enable-modules=configure' script options.\n\n $ cd $DOWNLOAD_HTTPD\n $ ./configure\n\n2. For dynamically loaded modules comment out or remove the 'LoadModule' directive for 'mod_auth_basic', and 'mod_auth_digest' modules from the 'httpd.conf' file.\n\n ##LoadModule mod_auth_basic modules/mod_auth_basic.so\n ##LoadModule mod_auth_digest modules/mod_auth_digest.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/httpd -M | /usr/bin/egrep 'auth_basic_module' | /bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_14": {
        "system": "Linux",
        "description": "2.9 Ensure the Basic and Digest Authentication Modules are Disabled - auth_digest_module",
        "info": "The Apache 'mod_auth_basic' and 'mod_auth_digest' modules support HTTP Basic Authentication and HTTP Digest Authentication respectively. The two authentication protocols are used to restrict access to users who provide a valid user name and password.\n\nRationale:\n\nNeither HTTP Basic nor HTTP Digest authentication should be used as the protocols are out dated and no longer considered secure. Disabling the modules will improve the security posture of the web server by reducing the amount of potentially vulnerable code paths exposed to the network and reducing potential for unauthorized access to files via misconfigured access controls.\n\nIn the early days of the web, Basic HTTP Authentication was considered adequate if it was only used over HTTPS, so that the credentials would not be sent in the clear. Basic authentication uses Base64 to encode the credentials which are sent with every request. Base64 encoding is of course easily reversed, and is no more secure than clear text. The issues with using Basic Auth over HTTPS is that it does not meet current security standards for protecting the login credentials and protecting the authenticated\nsession. The following security issues plague the Basic Authentication protocol.\n\n- The authenticated session has an indefinite length (as long as any browser window is open) and is not timed-out on the server when the session is idle.\n\n- Application logout is required to invalidate the session on the server to limit, but in the case of Basic Authentication, there is no server-side session that can be invalidated.\n\n- The credentials are remembered by the browser and stored in memory.\n\n- There is no way to disable auto-complete, where the browser offers to store the passwords.\nPasswords stored in the browser can be accessed if the client system or browser become\ncompromised.\n\n- The credentials are more likely to be exposed since they are automatically sent with every\nrequest.\n\n- Administrators may at times have access to the HTTP headers sent in request for the purposes of diagnosing problems and detecting attacks. Having a user's credentials in the clear in the HTTP headers, may allow a user to repudiate actions performed, because the web or system\nadministrators also had access to the user's password.\n\nThe HTTP Digest Authentication is considered even worse than Basic Authentication because it stores the password in the clear on the server, and has the same session management issues as Basic Authentication.",
        "solution": "Perform either one of the following to disable the HTTP Basic or HTTP Digest authentication modules:\n\n1. For source builds with static modules run the Apache './configure' script without including the 'mod_auth_basic', and 'mod_auth_digest' in the '--enable-modules=configure' script options.\n\n $ cd $DOWNLOAD_HTTPD\n $ ./configure\n\n2. For dynamically loaded modules comment out or remove the 'LoadModule' directive for 'mod_auth_basic', and 'mod_auth_digest' modules from the 'httpd.conf' file.\n\n ##LoadModule mod_auth_basic modules/mod_auth_basic.so\n ##LoadModule mod_auth_digest modules/mod_auth_digest.so",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/httpd -M | /usr/bin/egrep 'auth_digest_module' | /bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_15": {
        "system": "Linux",
        "description": "3.1 Ensure the Apache Web Server Runs As a Non-Root User - 'httpd.conf User = apache'",
        "info": "Although Apache is typically started with root privileges in order to listen on port '80' and '443', it can and should run as another non-root user in order to perform the web services. The Apache User and Group directives are used to designate the user and group to be used.\n\nRationale:\n\nOne of the best ways to reduce your exposure to attack when running a web server is to create a unique, unprivileged user and group for the server application. The 'nobody' or 'daemon' user and group that come default on Unix variants should NOT be used to run the web server because the account is commonly used for other separate daemon services. Instead, an account should be used only by the Apache software so as to not give unnecessary access to other services. Also, the user used for the Apache user should be a unique value between '1' and '499', as these lower values are reserved for the special system accounts not used by regular users, as discussed in the User Accounts section of the CIS Red Hat benchmark. As an even more secure alternative, if the Apache web server can be run on high unprivileged ports, it is not necessary to start Apache as root, and all the Apache processes may be run as the Apache specific user, as described below.",
        "solution": "Perform the following:\n1. If the Apache user and group do not already exist, create the account and group as a unique system account:\n\n # groupadd -r apache\n # useradd apache -r -g apache -d /var/www -s /sbin/nologin\n\n2. Configure the Apache user and group in the Apache configuration file 'httpd.conf':\n\n User apache\n Group apache",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Uu]ser[\\\\s]+",
        "expect": "^[\\\\s]*[Uu]ser[\\\\s]+apache"
    },
    "custom_item_16": {
        "system": "Linux",
        "description": "3.1 Ensure the Apache Web Server Runs As a Non-Root User - 'httpd.conf Group = apache'",
        "info": "Although Apache is typically started with root privileges in order to listen on port '80' and '443', it can and should run as another non-root user in order to perform the web services. The Apache User and Group directives are used to designate the user and group to be used.\n\nRationale:\n\nOne of the best ways to reduce your exposure to attack when running a web server is to create a unique, unprivileged user and group for the server application. The 'nobody' or 'daemon' user and group that come default on Unix variants should NOT be used to run the web server because the account is commonly used for other separate daemon services. Instead, an account should be used only by the Apache software so as to not give unnecessary access to other services. Also, the user used for the Apache user should be a unique value between '1' and '499', as these lower values are reserved for the special system accounts not used by regular users, as discussed in the User Accounts section of the CIS Red Hat benchmark. As an even more secure alternative, if the Apache web server can be run on high unprivileged ports, it is not necessary to start Apache as root, and all the Apache processes may be run as the Apache specific user, as described below.",
        "solution": "Perform the following:\n1. If the Apache user and group do not already exist, create the account and group as a unique system account:\n\n # groupadd -r apache\n # useradd apache -r -g apache -d /var/www -s /sbin/nologin\n\n2. Configure the Apache user and group in the Apache configuration file 'httpd.conf':\n\n User apache\n Group apache",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Gg]roup[\\\\s]+",
        "expect": "^[\\\\s]*[Gg]roup[\\\\s]+apache"
    },
    "custom_item_17": {
        "description": "3.1 Ensure the Apache Web Server Runs As a Non-Root User - 'apache account is configured'",
        "info": "Although Apache is typically started with root privileges in order to listen on port '80' and '443', it can and should run as another non-root user in order to perform the web services. The Apache User and Group directives are used to designate the user and group to be used.\n\nRationale:\n\nOne of the best ways to reduce your exposure to attack when running a web server is to create a unique, unprivileged user and group for the server application. The 'nobody' or 'daemon' user and group that come default on Unix variants should NOT be used to run the web server because the account is commonly used for other separate daemon services. Instead, an account should be used only by the Apache software so as to not give unnecessary access to other services. Also, the user used for the Apache user should be a unique value between '1' and '499', as these lower values are reserved for the special system accounts not used by regular users, as discussed in the User Accounts section of the CIS Red Hat benchmark. As an even more secure alternative, if the Apache web server can be run on high unprivileged ports, it is not necessary to start Apache as root, and all the Apache processes may be run as the Apache specific user, as described below.",
        "solution": "Perform the following:\n1. If the Apache user and group do not already exist, create the account and group as a unique system account:\n\n # groupadd -r apache\n # useradd apache -r -g apache -d /var/www -s /sbin/nologin\n\n2. Configure the Apache user and group in the Apache configuration file 'httpd.conf':\n\n User apache\n Group apache",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/bin/id apache",
        "expect": "^uid=@UID@\\\\(apache\\\\)[\\\\s]+gid=@GID@\\\\(apache\\\\)[\\\\s]+groups=@GROUPS_ID@\\\\(apache\\\\)"
    },
    "custom_item_18": {
        "description": "3.1 Ensure the Apache Web Server Runs As a Non-Root User - 'httpd services are running as apache user'",
        "info": "Although Apache is typically started with root privileges in order to listen on port '80' and '443', it can and should run as another non-root user in order to perform the web services. The Apache User and Group directives are used to designate the user and group to be used.\n\nRationale:\n\nOne of the best ways to reduce your exposure to attack when running a web server is to create a unique, unprivileged user and group for the server application. The 'nobody' or 'daemon' user and group that come default on Unix variants should NOT be used to run the web server because the account is commonly used for other separate daemon services. Instead, an account should be used only by the Apache software so as to not give unnecessary access to other services. Also, the user used for the Apache user should be a unique value between '1' and '499', as these lower values are reserved for the special system accounts not used by regular users, as discussed in the User Accounts section of the CIS Red Hat benchmark. As an even more secure alternative, if the Apache web server can be run on high unprivileged ports, it is not necessary to start Apache as root, and all the Apache processes may be run as the Apache specific user, as described below.",
        "solution": "Perform the following:\n1. If the Apache user and group do not already exist, create the account and group as a unique system account:\n\n # groupadd -r apache\n # useradd apache -r -g apache -d /var/www -s /sbin/nologin\n\n2. Configure the Apache user and group in the Apache configuration file 'httpd.conf':\n\n User apache\n Group apache",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/ps axu | /bin/grep httpd | /bin/grep -v 'grep' | /bin/egrep -v '^(apache|root)' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_19": {
        "description": "3.2 Ensure the Apache User Account Has an Invalid Shell",
        "info": "The 'apache' account must not be used as a regular login account, so it should be assigned an invalid or 'nologin' shell to ensure it cannot be used to log in.\n\nRationale:\n\nService accounts such as the 'apache' account are a risk if they can be used to get a login shell to the system.",
        "solution": "Change the 'apache' account to use the 'nologin' shell or an invalid shell such as '/dev/null':\n\n# chsh -s /sbin/nologin apache",
        "reference": "800-171|3.1.1,800-53|AC-2(9),800-53r5|AC-2(9),CN-L3|8.1.4.2(c),CSCv6|16,CSCv7|4.3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|2S,NIAv2|AM16,PCI-DSSv3.2.1|8.5,PCI-DSSv4.0|8.2.2,PCI-DSSv4.0|8.2.3,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/grep apache /etc/passwd | /bin/egrep -v '(\\\\/sbin\\\\/nologin|\\\\/dev\\\\/null|\\\\/bin\\\\/false)[\\\\s]*$' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_20": {
        "description": "3.3 Ensure the Apache User Account Is Locked",
        "info": "The user account under which Apache runs should not have a valid password, but should be locked.\n\nRationale:\n\nAs a defense-in-depth measure, the Apache user account should be locked to prevent logins and to prevent a user from 'su'-ing to 'apache' using the password. In general, there shouldn't be a need for anyone to have to 'su' as 'apache', and when there is a need, 'sudo' should be used instead, which would not require the 'apache' account password.",
        "solution": "Use the 'passwd' command to lock the 'apache' account:\n\n# passwd -l apache",
        "reference": "800-171|3.1.1,800-53|AC-2(3),800-53r5|AC-2(3),CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv6|16,CSCv7|16.8,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|2S,NIAv2|AM26,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,TBA-FIISB|36.2.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/bin/passwd -S apache",
        "expect": "(^apache[\\\\s]+LK[\\\\s]+.+\\\\(Password locked\\\\.\\\\)[\\\\s]*$|^apache[\\\\s]+L[\\\\s]+.+-1.+[\\\\s]*$)"
    },
    "custom_item_21": {
        "description": "3.4 Ensure Apache Directories and Files Are Owned By Root",
        "info": "The Apache directories and files should be owned by root. This applies to all of the Apache software directories and files installed.\n\nRationale:\n\nRestricting ownership of the Apache files and directories will reduce the probability of unauthorized modifications.",
        "solution": "Perform the following:\n\nSet ownership on the '$APACHE_PREFIX' directories such as '/usr/local/apache2':\n\n$ chown -R root $APACHE_PREFIX",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|5.1,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@APACHE_PREFIX@",
        "owner": "root"
    },
    "custom_item_22": {
        "description": "3.5 Ensure the Group Is Set Correctly on Apache Directories and Files",
        "info": "The Apache directories and files should be set to have a group of root (or a root equivalent group). This applies to all the Apache software directories and files installed. The only expected exception is that the Apache web document root ('$APACHE_PREFIX/htdocs') is likely to need a designated group to allow web content to be updated (such as 'webupdate') through a change management process.\n\nRationale:\n\nSecuring Apache files and directories will reduce the probability of unauthorized modifications.",
        "solution": "Perform the following:\n\nSet the group on the $'APACHE_PREFIX' directories, such as '/usr/local/apache2':\n\n$ chgrp -R root $APACHE_PREFIX",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|5,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@APACHE_PREFIX@",
        "group": "root"
    },
    "custom_item_23": {
        "description": "3.6 Ensure Other Write Access on Apache Directories and Files Is Restricted",
        "info": "The permission on the Apache directories should be 'rwxr-xr-x' (755) and the file permissions should be similar, except not executable unless appropriate. This applies to all the Apache software directories and files installed, with the possible exception in some cases that a group with write access for the Apache web document root ('$APACHE_PREFIX/htdocs') may be needed to allow web content to be updated. In addition, the '/bin' directory and executables should be set to not be readable by other.\n\nRationale:\n\nNone of the Apache files and directories, including the Web document root, should allow other write access. Other write access is likely to be very useful for unauthorized modification of web content, configuration files, and software.",
        "solution": "Perform the following to remove other write access on the '$APACHE_PREFIX' directories:\n\n# chmod -R o-w $APACHE_PREFIX",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@APACHE_PREFIX@",
        "mask": "022"
    },
    "custom_item_24": {
        "description": "3.7 Secure Core Dump Directory - 'CoreDumpDirectory is defined correctly'",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*CoreDumpDirectory",
        "expect": "^[\\\\s]*CoreDumpDirectory[\\\\s]+\\\\/"
    },
    "custom_item_25": {
        "description": "3.7 Ensure the Core Dump Directory Is Secured",
        "info": "The 'CoreDumpDirectory' directive can be used to specify a directory which Apache attempts to switch before dumping core for debugging. The default directory is the Apache 'ServerRoot' directory. However, on Linux systems, core dumps are disabled by default. Most production environments should leave core dumps disabled. In the event that core dumps are needed, the directory needs to be writable by Apache, and it should meet the security requirements defined below in the audit and remediation sections.\n\nRationale:\n\nCore dumps are snapshots of memory and may contain sensitive information that should not be accessible by other accounts on the system.",
        "solution": "Either remove the 'CoreDumpDirectory' directive from the Apache configuration files, or make the configured directory meet the following requirements:\n1. Not within the Apache web document root ('$APACHE_PREFIX/htdocs')\n2. Owned by root and has a group ownership of the Apache group (as defined via the Group directive)\n\n # chown root:apache /var/log/httpd\n\n3. Has no read-write-search access permission for other users\n\n # chmod o-rwx /var/log/httpd",
        "reference": "CSCv6|18.9,LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@CORE_DUMP_DIR@",
        "owner": "root",
        "mask": "007",
        "group": "@APACHE_GRP@"
    },
    "custom_item_26": {
        "description": "3.8 Secure the Lock File - 'LockFile is configured'",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Aa]ccept[Mm]utex[\\\\s]+",
        "expect": "^[\\\\s]*[Aa]ccept[Mm]utex[\\\\s]+([Ff][Ll][Oo][Cc][Kk]|[Ff][Cc][Nn][Tt][Ll])"
    },
    "custom_item_27": {
        "description": "3.8 Ensure the Lock File Is Secured - 'LockFile directory'",
        "info": "The 'LockFile' directive sets the path to the lock file used when Apache uses 'fcntl(2)' or 'flock(2)' system calls to implement a mutex. Most Linux systems will default to using semaphores instead, so the directive may not apply. However, in the event a lock file is used, it is important for the lock file to be in a locally mounted directory that is not writable by other users.\n\nRationale:\n\nIf the 'LockFile' is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a lock file with the same name.",
        "solution": "Perform these steps to properly secure the lock file:\n1. Find the directory in which the 'LockFile' would be created. The default value is the 'ServerRoot/logs' directory.\n2. Modify the directory for the 'LockFile' so it is not within the Apache 'DocumentRoot' and so it is on a locally mounted hard drive rather than an NFS mounted file system.\n3. Change the ownership and group of the directory to be 'root:root'.\n4. Change the permissions on the directory so it is only writable by root, or the user under which apache initially starts up (default is root).",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]ock[Ff]ile[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]ock[Ff]ile[\\\\s]+.+[\\\\s]*$"
    },
    "custom_item_28": {
        "description": "3.8 Ensure the Lock File Is Secured - 'LockFile permissions'",
        "info": "The 'LockFile' directive sets the path to the lock file used when Apache uses 'fcntl(2)' or 'flock(2)' system calls to implement a mutex. Most Linux systems will default to using semaphores instead, so the directive may not apply. However, in the event a lock file is used, it is important for the lock file to be in a locally mounted directory that is not writable by other users.\n\nRationale:\n\nIf the 'LockFile' is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a lock file with the same name.",
        "solution": "Perform these steps to properly secure the lock file:\n1. Find the directory in which the 'LockFile' would be created. The default value is the 'ServerRoot/logs' directory.\n2. Modify the directory for the 'LockFile' so it is not within the Apache 'DocumentRoot' and so it is on a locally mounted hard drive rather than an NFS mounted file system.\n3. Change the ownership and group of the directory to be 'root:root'.\n4. Change the permissions on the directory so it is only writable by root, or the user under which apache initially starts up (default is root).",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@LOCK_FILE@",
        "owner": "root",
        "mask": "022",
        "group": "root"
    },
    "custom_item_29": {
        "description": "3.9 Secure the Pid File - 'PidFile directory'",
        "info": "The PidFile directive sets the file path to the process ID file to which the server records\n the process id of the server, which is useful for sending a signal to the server process or for\n checking on the health of the process.",
        "solution": "Modify   the directory   if  the PidFile is  in  a   directory   within  the Apache  DocumentRoot",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Pp]id[Ff]ile[\\\\s]+",
        "expect": "^[\\\\s]*[Pp]id[Ff]ile[\\\\s]+"
    },
    "custom_item_30": {
        "description": "3.9 Ensure the Pid File Is Secured",
        "info": "The 'PidFile' directive sets the file path to the process ID (pid) file to which the server records the pid of the server. The pid is useful for sending a signal to the server process or checking on the health of the process.\n\nRationale:\n\nIf the 'PidFile' is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a pid file with the same name.",
        "solution": "Perform these steps to secure the pid file:\n1. Find the directory in which the 'PidFile' would be created. The default value is the 'ServerRoot/logs' directory.\n2. Modify the directory if it is within the Apache 'DocumentRoot'.\n3. Change the ownership and group of the directory to be 'root:root'.\n4. Change the permissions for the directory so it is only writable by root, or the user under which apache initially starts up (default is root).",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@PID_FILE@",
        "owner": "root",
        "mask": "022",
        "group": "root"
    },
    "custom_item_31": {
        "description": "ScoreBoard File Security",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss]core[Bb]oard[Ff]ile[\\\\s]+",
        "expect": "^[\\\\s]*[Ss]core[Bb]oard[Ff]ile[\\\\s]+"
    },
    "custom_item_32": {
        "description": "3.10 Ensure the ScoreBoard File Is Secured",
        "info": "The 'ScoreBoardFile' directive sets a file path which the server will use for interprocess communication (IPC) among the Apache processes. On most Linux platforms, shared memory will be used instead of a file in the file system, so this directive is not generally needed and does not need to be specified. However, if the directive is specified, Apache will use the configured file for IPC, so it needs to be located in a secure directory.\n\nRationale:\n\nIf the 'ScoreBoardFile' is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a file with the same name, and users could monitor and disrupt communication between the processes by reading and writing to the file.",
        "solution": "Perform the following steps to secure the ScoreBoard file:\n1. Check to see if the 'ScoreBoardFile' is specified in any of the Apache configuration files. If it is not present, no changes are required.\n2. If the directive is present, find the directory in which the 'ScoreBoardFile' would be created. The default value is the 'ServerRoot/logs' directory.\n3. Modify the directory if it is within the Apache 'DocumentRoot' or if it is on an NFS mounted file system and not a locally mounted hard drive.\n4. Change the directory ownership and group to be 'root:root'.\n5. Change the directory permissions so it is only writable by root or the user under which apache initially starts up (default is root).",
        "reference": "CSCv6|18,LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@SCOREBOARD_DIR@",
        "owner": "root",
        "mask": "022",
        "group": "root"
    },
    "custom_item_33": {
        "description": "3.10 Ensure the ScoreBoard File Is Secured",
        "info": "The 'ScoreBoardFile' directive sets a file path which the server will use for interprocess communication (IPC) among the Apache processes. On most Linux platforms, shared memory will be used instead of a file in the file system, so this directive is not generally needed and does not need to be specified. However, if the directive is specified, Apache will use the configured file for IPC, so it needs to be located in a secure directory.\n\nRationale:\n\nIf the 'ScoreBoardFile' is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a file with the same name, and users could monitor and disrupt communication between the processes by reading and writing to the file.",
        "solution": "Perform the following steps to secure the ScoreBoard file:\n1. Check to see if the 'ScoreBoardFile' is specified in any of the Apache configuration files. If it is not present, no changes are required.\n2. If the directive is present, find the directory in which the 'ScoreBoardFile' would be created. The default value is the 'ServerRoot/logs' directory.\n3. Modify the directory if it is within the Apache 'DocumentRoot' or if it is on an NFS mounted file system and not a locally mounted hard drive.\n4. Change the directory ownership and group to be 'root:root'.\n5. Change the directory permissions so it is only writable by root or the user under which apache initially starts up (default is root).",
        "reference": "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss]core[Bb]oard[Ff]ile[\\\\s]+",
        "expect": "^[\\\\s]*[Ss]core[Bb]oard[Ff]ile[\\\\s]+"
    },
    "custom_item_34": {
        "description": "3.11 Ensure Group Write Access for the Apache Directories and Files Is Properly Restricted",
        "info": "Group permissions on Apache directories should generally be 'r-x', and file permissions should be similar, except not executable if executable is not appropriate. This applies to all the Apache software directories and files installed, with the possible exception of the web document root '$DOCROOT' defined by Apache 'DocumentRoot' and defaulting to '$APACHE_PREFIX/htdocs'. The directories and files in the web document root may have a designated web development group with write access to allow web content to be updated.\n\nRationale:\n\nRestricting write permissions on the Apache files and directories can help mitigate attacks that modify web content to provide unauthorized access or to attack web clients.",
        "solution": "Perform the following to remove group write access on the '$APACHE_PREFIX' directories:\n\n# chmod -R g-w $APACHE_PREFIX",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@APACHE_PREFIX@",
        "mask": "022"
    },
    "custom_item_35": {
        "description": "3.12 Ensure Group Write Access for the Document Root Directories and Files Is Properly Restricted",
        "info": "The Apache Document Root directory '$DOCROOT' may need to be writeable by an authorized group such as development, support, or a production content management tool. However, it is important that the Apache group used to run the server does not have write access to any directories or files in the document root.\n\nRationale:\n\nPreventing Apache from writing to the web document root helps mitigate risk associated with web application vulnerabilities associated with file uploads or command execution. Typically, if an application hosted by Apache needs to write to a directory, it is best practice to have that directory live outside the web root.",
        "solution": "Perform the following to remove group write access on the '$DOCROOT' directories and files for the 'apache' group.\n\n# find -L $DOCROOT -group $GRP -perm /g=w -print | xargs chmod g-w",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@DOCROOT@",
        "mask": "022"
    },
    "custom_item_36": {
        "description": "Check for Order directive",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "[\\\\s]*[Oo]rder[\\\\s]*"
    },
    "custom_item_37": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf Order = Deny,Allow",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "[\\\\s]*[Oo]rder[\\\\s]*[Dd][Ee][Nn][Yy],[\\\\s]*[Aa][Ll][Ll][Oo][Ww][\\\\s]*$"
    },
    "custom_item_38": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf Deny = from all",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Dd]eny[ \t]+'",
        "expect": "[\\\\s]*[Dd]eny[\\\\s]+[Ff][Rr][Oo][Mm][\\\\s]+[Aa][Ll][Ll][\\\\s]*$"
    },
    "custom_item_39": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf no Require directives exist'",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Rr]equire' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_40": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf Require all denied",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Rr]equire'",
        "expect": "[\\\\s]*[Rr]equire[\\\\s]*[Aa][Ll][Ll][\\\\s]*[Dd][Ee][Nn][Ii][Ee][Dd][\\\\s]*$"
    },
    "custom_item_41": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf no Deny directives exist'",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | egrep -i '^[ \t]*deny' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_42": {
        "description": "4.1 Ensure Access to OS Root Directory Is Denied By Default - 'httpd.conf no Allow directives exist'",
        "info": "The Apache 'Directory' directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.\n\nRationale:\n\nOne aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Have a single 'Order' directive and set its value to 'deny, allow'.\n3. Have a 'Deny' directive and set its value to 'from all'.\n4. Remove all 'Allow' directives from the root '' element.\n\n . . .\n Order deny,allow\n Deny from all\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Aa]llow[ \t]+' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_43": {
        "description": "Check for Order directive",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "[\\\\s]*[Oo]rder[\\\\s]*"
    },
    "custom_item_44": {
        "description": "4.2 Ensure Appropriate Access to Web Content Is Allowed - 'httpd.conf Order Deny,Allow'",
        "info": "In order to serve web content, the Apache 'Allow' directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.\n\nRationale:\n\nThe 'Allow' directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' and '' elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like ''.\n2. Add a single 'Order' directive and set the value to 'deny, allow'.\n3. Include the appropriate 'Allow' and 'Deny' directives, with values that are appropriate for the purposes of the directory.\n\nThe configurations below are just a few possible examples.\n\n Order deny,allow\n Deny from all\n Allow from 192.169.\n\n Order allow,deny\n Allow from all\n\n Order deny,allow\n Deny from all\n Allow from 127.0.0.1\n Allow from ::1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "^[\\\\s]*[Oo]rder[\\\\s]+[Dd]eny,[\\\\s]*[Aa]llow[\\\\s]*"
    },
    "custom_item_45": {
        "description": "4.2 Ensure Appropriate Access to Web Content Is Allowed - 'httpd.conf Deny is configured'",
        "info": "In order to serve web content, the Apache 'Allow' directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.\n\nRationale:\n\nThe 'Allow' directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' and '' elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like ''.\n2. Add a single 'Order' directive and set the value to 'deny, allow'.\n3. Include the appropriate 'Allow' and 'Deny' directives, with values that are appropriate for the purposes of the directory.\n\nThe configurations below are just a few possible examples.\n\n Order deny,allow\n Deny from all\n Allow from 192.169.\n\n Order allow,deny\n Allow from all\n\n Order deny,allow\n Deny from all\n Allow from 127.0.0.1\n Allow from ::1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Dd]eny[ \t]+'",
        "expect": "[\\\\s]*[Dd]eny[\\\\s]+[Ff]rom[\\\\s]+@DENY_FROM_1@[\\\\s]*$"
    },
    "custom_item_46": {
        "description": "4.2 Ensure Appropriate Access to Web Content Is Allowed - 'httpd.conf Allow is configured'",
        "info": "In order to serve web content, the Apache 'Allow' directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.\n\nRationale:\n\nThe 'Allow' directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' and '' elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like ''.\n2. Add a single 'Order' directive and set the value to 'deny, allow'.\n3. Include the appropriate 'Allow' and 'Deny' directives, with values that are appropriate for the purposes of the directory.\n\nThe configurations below are just a few possible examples.\n\n Order deny,allow\n Deny from all\n Allow from 192.169.\n\n Order allow,deny\n Allow from all\n\n Order deny,allow\n Deny from all\n Allow from 127.0.0.1\n Allow from ::1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Aa]llow[ \t]+'",
        "expect": "[\\\\s]*[Aa]llow[\\\\s]+[Ff]rom[\\\\s]+@ALLOW_FROM_1@[\\\\s]*$"
    },
    "custom_item_47": {
        "system": "Linux",
        "description": "4.2 Ensure Appropriate Access to Web Content Is Allowed - 'Require is configured'",
        "info": "In order to serve web content, the Apache 'Allow' directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.\n\nRationale:\n\nThe 'Allow' directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' and '' elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like ''.\n2. Add a single 'Order' directive and set the value to 'deny, allow'.\n3. Include the appropriate 'Allow' and 'Deny' directives, with values that are appropriate for the purposes of the directory.\n\nThe configurations below are just a few possible examples.\n\n Order deny,allow\n Deny from all\n Allow from 192.169.\n\n Order allow,deny\n Allow from all\n\n Order deny,allow\n Deny from all\n Allow from 127.0.0.1\n Allow from ::1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Rr]equire[ \t]+'",
        "expect": "[\\\\s]*[Rr]equire[\\\\s]+@REQUIRE_OPTION@[\\\\s]*$"
    },
    "custom_item_48": {
        "system": "Linux",
        "description": "4.2 Ensure Appropriate Access to Web Content Is Allowed - 'No Order/Deny/Allow'",
        "info": "In order to serve web content, the Apache 'Allow' directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.\n\nRationale:\n\nThe 'Allow' directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' and '' elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like ''.\n2. Add a single 'Order' directive and set the value to 'deny, allow'.\n3. Include the appropriate 'Allow' and 'Deny' directives, with values that are appropriate for the purposes of the directory.\n\nThe configurations below are just a few possible examples.\n\n Order deny,allow\n Deny from all\n Allow from 192.169.\n\n Order allow,deny\n Allow from all\n\n Order deny,allow\n Deny from all\n Allow from 127.0.0.1\n Allow from ::1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*([Oo]rder|[Dd]eny|[Aa]llow)[ \t]+' | awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_49": {
        "description": "4.3 Ensure OverRide Is Disabled for the OS Root Directory",
        "info": "The Apache 'OverRide' directive allows for '.htaccess' files to be used to override much of the configuration, including authentication, handling of document types, auto generated indexes, access control, and options. When the server finds an '.htaccess' file (as specified by 'AccessFileName'), it needs to know which directives declared in that file can override earlier access information. When this directive is set to 'None', '.htaccess' files are completely ignored. When this directive is set to 'All', any directive which has the '.htaccess' Context is allowed in '.htaccess' files. Refer to the Apache 2.2 documentation for details [http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride](http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride).\n\nRationale:\n\nWhile the functionality of 'htaccess' files is sometimes convenient, usage decentralizes the access controls and increases the risk of configurations being changed or viewed inappropriately by an unintended or rogue '.htaccess' file. Consider also that some of the more common vulnerabilities in web servers and web applications allow the web files to be viewed or to be modified; this is why it is wise to keep the configuration of the web server from being placed in '.htaccess' files.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find a root '' element.\n2. Add a single 'AllowOverride' directive if there is none.\n3. Set the value for 'AllowOverride' to 'None'.\n\n . . .\n AllowOverride None\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Aa]llow[Oo]verride\\\\s+'",
        "expect": "[\\\\s]*[Aa]llow[Oo]verride[\\\\s]+[Nn]one[\\\\s]*$"
    },
    "custom_item_50": {
        "description": "4.4 Ensure OverRide Is Disabled for All Directories",
        "info": "The Apache 'AllowOverride' directive allows for '.htaccess' files to be used to override much of the configuration, including authentication, handling of document types, auto generated indexes, access control, and options. When the server finds an '.htaccess' file (as specified by 'AccessFileName'), it needs to know which directives declared in that file can override earlier access information. When this directive is set to 'None', '.htaccess' files are completely ignored. When this directive is set to 'All', any directive which has the '.htaccess' Context is allowed in '.htaccess' files. Refer to the Apache 2.2 documentation for details [http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride](http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride).\n\nRationale:\n\nWhile the functionality of 'htaccess' files is sometimes convenient, usage decentralizes the access controls and increases the risk of configurations being changed or viewed inappropriately by an unintended or rogue '.htaccess' file. Consider also that some of the more common vulnerabilities in web servers and web applications allow the web files to be viewed or to be modified; this is why it is wise to keep the configuration of the web server from being placed in '.htaccess' files.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find 'AllowOverride' directives.\n2. Set the value for all 'AllowOverride' directives to 'None'.\n\n . . .\n AllowOverride None\n . . .",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Aa]llow[Oo]verride\\\\s+' | /bin/egrep -v '^\\\\s*[Aa]llow[Oo]verride\\\\s+[Nn]one' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_51": {
        "description": "5.1 Ensure Options for the OS Root Directory Are Restricted",
        "info": "The Apache 'Options' directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/core.html#options](http://httpd.apache.org/docs/2.2/mod/core.html#options ).\n\nRationale:\n\nThe 'Options' directive for the root OS level is used to create a default minimal options policy that allows only the minimal options at the root directory level. Then for specific web sites or portions of the web site, options may be enabled as needed and appropriate. No options should be enabled and the value for the 'Options' directive should be 'None'.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the following lines in the Apache configuration file at the server configuration level:\n\n Order allow,deny\n Deny from all",
        "reference": "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//,/<\\\\/Directory>/p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Oo]ptions\\\\s+'",
        "expect": "[\\\\s]*[Oo]ptions[\\\\s]+[Nn]one[\\\\s]*$"
    },
    "custom_item_52": {
        "description": "5.2 Ensure Options for the Web Root Directory Are Restricted",
        "info": "The Apache 'Options' directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation.\n\nRefer to the Apache 2.2 documentation for details\n[http://httpd.apache.org/docs/2.2/mod/core.html#options](http://httpd.apache.org/docs/2.2/mod/core.html#options).\n\nRationale:\n\nThe 'Options' directive at the web root or document root level should be restricted to the minimal options required. A setting of 'None' is highly recommended; however, at this level, content negotiation may be needed if multiple languages are supported. No other options should be enabled.",
        "solution": "Perform the following to implement the recommended state:\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find the document root '' element.\n2. Add or modify any existing 'Options' directive to have a value of 'None' or 'Multiviews', if multiviews are needed.\n\n . . .\n Options None\n . . .",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^\\\\s*[Oo]ptions\\\\s+'",
        "expect": "[\\\\s]*[Oo]ptions[\\\\s]+([Nn]one|[Mm]ulti[Vv]iews)*$"
    },
    "custom_item_53": {
        "description": "5.3 Ensure Options for Other Directories Are Minimized",
        "info": "The Apache 'Options' directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation.\n\nRefer to the Apache 2.2 documentation for details\n[http://httpd.apache.org/docs/2.2/mod/core.html#options](http://httpd.apache.org/docs/2.2/mod/core.html#options).\n\nRationale:\n\nThe options for other directories and hosts should be restricted to the minimal options required. A setting of 'None' is recommended; however, it is recognized that other options may be needed in some cases:\n- 'Multiviews' is appropriate if content negotiation is required, such as when multiple languages are supported.\n- 'ExecCGI' is only appropriate for special directories dedicated to executable content, such as a 'cgi-bin/' directory. That way you will know what is executed on the server. It is possible to enable CGI script execution based on file extension or permission settings, but this makes script control and management almost impossible as developers may install scripts without your knowledge.\n- 'FollowSymLinks' & 'SymLinksIfOwnerMatch': The following of symbolic links is not recommended and should be disabled if possible. The usage of symbolic links opens up additional risk for possible attacks that may use inappropriate symbolic links to access content outside of the document root of the web server. Also consider that it could be combined with a vulnerability that allows an attacker or insider to create an inappropriate link. The option 'SymLinksIfOwnerMatch' is much safer in that the ownership must match in order for the link to be used, but keep in mind there is additional overhead created by requiring Apache to check the ownership.\n- 'Includes' & 'IncludesNOEXEC': The 'IncludesNOEXEC' option should only be needed when server side includes are required. The full 'Includes' option should not be used because it allows execution of arbitrary shell commands. See Apache Mod Include for details [http://httpd.apache.org/docs/2.2/mod/mod_include.html](http://httpd.apache.org/docs/2.2/mod/mod_include.html).\n- 'Indexes' causes automatic generation of indexes if the default index page is missing, so it should be disabled unless required.",
        "solution": "Perform the following to implement the recommended state:\n1. Search the Apache configuration files ('httpd.conf' and any included configuration files) to find all '' elements.\n2. Add or modify any existing 'Options' directive to NOT have a value of 'Includes'. Other options may be set if necessary and appropriate as described above.",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[\\\\s]*[Oo]ptions[\\\\s]+' | /bin/egrep -v '[\\\\s]*[Ii]ncludes[N]o[Ee]xec' | /bin/egrep '[\\\\s]*[Ii]ncludes' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_54": {
        "description": "5.4 Ensure Default HTML Content Is Removed - 'httpd-manual is not installed'",
        "info": "Apache installations have default content that is not needed or appropriate for production use. The primary function for the sample content is to provide a default web site, provide user manuals, or demonstrate special features of the web server. All content that is not needed should be removed.\n\nRationale:\n\nHistorically, sample content and features have been remotely exploited and can provide different levels of access to the server. Usually these routines are not written for production use and consequently little thought was given to security in their development.",
        "solution": "Review all pre-installed content and remove content which is not required. In particular, look for unnecessary content in the document root directory, in a configuration directory such as 'conf/extra' directory, or as a Unix/Linux package.\n1. Remove the default 'index.html' or welcome page if it is a separate package. If the default welcome page is part of the main Apache 'httpd' package, such as it is on Red Hat Linux, then comment out the configuration as shown below. Removing a file such as the 'welcome.conf' is not recommended as it may get replaced if the package is updated.\n\n #\n # This configuration file enables the default 'Welcome'\n # page if there is no default index page present for\n # the root URL. To disable the Welcome page, comment\n # out all the lines below.\n #\n #### Options -Indexes\n ## ErrorDocument 403 /error/noindex.html\n ##2. Remove the Apache user manual content or comment out configurations referencing the manual.\n\n yum erase httpd-manual\n\n3. Remove or comment out any Server Status handler configuration.\n\n #\n # Allow server status reports generated by mod_status,\n # with the URL of http://servername/server-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##4. Remove or comment out any Server Information handler configuration.\n\n #\n # Allow remote server configuration reports, with the URL of\n # http://servername/server-info (requires that mod_info.c be loaded).\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-info\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##5. Remove or comment out any other handler configurations such as 'perl-status'.\n\n # This will allow remote server configuration reports, with the URL of\n # http://servername/perl-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler perl-script\n ## PerlResponseHandler Apache2::Status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18.9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "rpm": "httpd-manual-0.0.0-0",
        "operator": "lte"
    },
    "custom_item_55": {
        "description": "5.4 Ensure Default HTML Content Is Removed - 'Server Information handler does not exist'",
        "info": "Apache installations have default content that is not needed or appropriate for production use. The primary function for the sample content is to provide a default web site, provide user manuals, or demonstrate special features of the web server. All content that is not needed should be removed.\n\nRationale:\n\nHistorically, sample content and features have been remotely exploited and can provide different levels of access to the server. Usually these routines are not written for production use and consequently little thought was given to security in their development.",
        "solution": "Review all pre-installed content and remove content which is not required. In particular, look for unnecessary content in the document root directory, in a configuration directory such as 'conf/extra' directory, or as a Unix/Linux package.\n1. Remove the default 'index.html' or welcome page if it is a separate package. If the default welcome page is part of the main Apache 'httpd' package, such as it is on Red Hat Linux, then comment out the configuration as shown below. Removing a file such as the 'welcome.conf' is not recommended as it may get replaced if the package is updated.\n\n #\n # This configuration file enables the default 'Welcome'\n # page if there is no default index page present for\n # the root URL. To disable the Welcome page, comment\n # out all the lines below.\n #\n #### Options -Indexes\n ## ErrorDocument 403 /error/noindex.html\n ##2. Remove the Apache user manual content or comment out configurations referencing the manual.\n\n yum erase httpd-manual\n\n3. Remove or comment out any Server Status handler configuration.\n\n #\n # Allow server status reports generated by mod_status,\n # with the URL of http://servername/server-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##4. Remove or comment out any Server Information handler configuration.\n\n #\n # Allow remote server configuration reports, with the URL of\n # http://servername/server-info (requires that mod_info.c be loaded).\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-info\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##5. Remove or comment out any other handler configurations such as 'perl-status'.\n\n # This will allow remote server configuration reports, with the URL of\n # http://servername/perl-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler perl-script\n ## PerlResponseHandler Apache2::Status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18.9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[\\\\s]*",
        "expect": "^[\\\\s]*[\\\\s]*"
    },
    "custom_item_56": {
        "description": "5.4 Ensure Default HTML Content Is Removed - 'other handler does not exist'",
        "info": "Apache installations have default content that is not needed or appropriate for production use. The primary function for the sample content is to provide a default web site, provide user manuals, or demonstrate special features of the web server. All content that is not needed should be removed.\n\nRationale:\n\nHistorically, sample content and features have been remotely exploited and can provide different levels of access to the server. Usually these routines are not written for production use and consequently little thought was given to security in their development.",
        "solution": "Review all pre-installed content and remove content which is not required. In particular, look for unnecessary content in the document root directory, in a configuration directory such as 'conf/extra' directory, or as a Unix/Linux package.\n1. Remove the default 'index.html' or welcome page if it is a separate package. If the default welcome page is part of the main Apache 'httpd' package, such as it is on Red Hat Linux, then comment out the configuration as shown below. Removing a file such as the 'welcome.conf' is not recommended as it may get replaced if the package is updated.\n\n #\n # This configuration file enables the default 'Welcome'\n # page if there is no default index page present for\n # the root URL. To disable the Welcome page, comment\n # out all the lines below.\n #\n #### Options -Indexes\n ## ErrorDocument 403 /error/noindex.html\n ##2. Remove the Apache user manual content or comment out configurations referencing the manual.\n\n yum erase httpd-manual\n\n3. Remove or comment out any Server Status handler configuration.\n\n #\n # Allow server status reports generated by mod_status,\n # with the URL of http://servername/server-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##4. Remove or comment out any Server Information handler configuration.\n\n #\n # Allow remote server configuration reports, with the URL of\n # http://servername/server-info (requires that mod_info.c be loaded).\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler server-info\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##5. Remove or comment out any other handler configurations such as 'perl-status'.\n\n # This will allow remote server configuration reports, with the URL of\n # http://servername/perl-status\n # Change the '.example.com' to match your domain to enable.\n #\n #### SetHandler perl-script\n ## PerlResponseHandler Apache2::Status\n ## Order deny,allow\n ## Deny from all\n ## Allow from .example.com\n ##",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|18.9,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[\\\\s]*",
        "expect": "^[\\\\s]*[\\\\s]*"
    },
    "custom_item_57": {
        "description": "5.5 Ensure the Default CGI Content printenv Script Is Removed",
        "info": "Most web servers, including Apache installations, have default CGI content which is not needed or appropriate for production use. The primary function for these sample programs is to demonstrate the capabilities of the web server. One common default CGI content for apache installations is the script 'printenv'. This script will print back to the requester all of the CGI environment variables, which include many server configuration details and system paths.\n\nRationale:\n\nCGI programs have a long history of security bugs and problems associated with improperly accepting user input. Since these programs are often targets of attackers, we need to make sure there are no unnecessary CGI programs that could potentially be used for malicious purposes. Usually these programs were not written for production use, and consequently little thought was given to security in their development. The 'printenv' script in particular will disclose inappropriate information about the web server, including directory paths and detailed version and configuration information.",
        "solution": "Perform the following to implement the recommended state:\n1. Locate cgi-bin files and directories enabled in the Apache configuration via the 'Script', 'ScriptAlias', 'ScriptAliasMatch', or 'ScriptInterpreterSource' directives.\n2. Remove the 'printenv' default CGI in the cgi-bin directory if it is installed.\n\n # rm $APACHE_PREFIX/cgi-bin/printenv",
        "reference": "800-171|3.1.7,800-53|AC-6(10),800-53r5|AC-6(10),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|18,CSCv7|4.7,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|2S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@CGI_BIN@/printenv"
    },
    "custom_item_58": {
        "description": "5.6 Ensure the Default CGI Content test-cgi Script Is Removed",
        "info": "Most web servers, including Apache installations, have default CGI content which is not needed or appropriate for production use. The primary function for these sample programs is to demonstrate the capabilities of the web server. A common default CGI content for Apache installations is the script 'test-cgi'. This script will print back to the requester CGI environment variables, which includes many server configuration details.\n\nRationale:\n\nCGI programs have a long history of security bugs and problems associated with improperly accepting user input. Since these programs are often targets of attackers, we need to make sure there are no unnecessary CGI programs that could potentially be used for malicious purposes. Usually these programs were not written for production use, and consequently little thought was given to security in their development. The 'test-cgi' script in particular will disclose inappropriate information about the web server, including directory paths and detailed version and configuration information.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate cgi-bin files and directories enabled in the Apache configuration via 'Script', 'ScriptAlias', 'ScriptAliasMatch', or 'ScriptInterpreterSource' directives.\n2. Remove the 'test-cgi' default CGI in the cgi-bin directory if it is installed.\n\n # rm $APACHE_PREFIX/cgi-bin/test-cgi",
        "reference": "800-171|3.1.7,800-53|AC-6(10),800-53r5|AC-6(10),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv6|18.9,CSCv7|4.7,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,LEVEL|2S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@CGI_BIN@/test-cgi"
    },
    "custom_item_59": {
        "description": "Check for Order directive",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "[\\\\s]*[Oo]rder[\\\\s]*"
    },
    "custom_item_60": {
        "description": "5.7 Ensure HTTP Request Methods Are Restricted - 'httpd.conf Document Root Order = Deny,Allow'",
        "info": "Use the Apache '\n* ' directive to restrict unnecessary HTTP request methods of the web server so it only accepts and processes the 'GET', 'HEAD', 'POST' and 'OPTIONS' HTTP request methods.\n\nRationale:\n\nThe HTTP 1.1 protocol supports several request methods which are rarely used and potentially high risk. For example, methods such as 'PUT' and 'DELETE' are rarely used and should be disabled in keeping with the security principle of minimizing features and options. Also, since these methods are typically used to modify resources on the web server, they should be explicitly disallowed. For normal web server operation, you will typically need to allow only the 'GET', 'HEAD' and 'POST' request methods. This will allow for downloading web pages and submitting information to web forms. The 'OPTIONS' request method will also be allowed as it is used to request which HTTP request methods are allowed. Unfortunately, the Apache '\n* ' directive does not deny the 'TRACE' request method. The 'TRACE' request method is disallowed in another benchmark recommendation with the 'TraceEnable' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate the Apache configuration files and included configuration files.\n2. Search for the directive on the document root directory, such as:...3. Ensure that the access control order within the '' directive is 'deny,allow'.\n\n Order allow,deny\n\n4. Add a directive as shown below within the group of document root directives.\n\n# Limit HTTP methods to standard methods. Note: Does not limit TRACEDeny from all5. Search for other directives in the Apache configuration files in places other than the root directory, and add the same directives to each. It is very important to understand that the directives are based on the OS file system hierarchy as accessed by Apache and not the hierarchy of the locations within web site URLs....\n  Order allow,deny\n  # Limit HTTP methodsDeny from all",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "^[\\\\s]*[Oo]rder[\\\\s]+[Dd]eny,[\\\\s]*[Aa]llow[\\\\s]*"
    },
    "custom_item_61": {
        "system": "Linux",
        "description": "5.7 Ensure HTTP Request Methods Are Restricted - 'Require all denied'",
        "info": "Use the Apache '\n* ' directive to restrict unnecessary HTTP request methods of the web server so it only accepts and processes the 'GET', 'HEAD', 'POST' and 'OPTIONS' HTTP request methods.\n\nRationale:\n\nThe HTTP 1.1 protocol supports several request methods which are rarely used and potentially high risk. For example, methods such as 'PUT' and 'DELETE' are rarely used and should be disabled in keeping with the security principle of minimizing features and options. Also, since these methods are typically used to modify resources on the web server, they should be explicitly disallowed. For normal web server operation, you will typically need to allow only the 'GET', 'HEAD' and 'POST' request methods. This will allow for downloading web pages and submitting information to web forms. The 'OPTIONS' request method will also be allowed as it is used to request which HTTP request methods are allowed. Unfortunately, the Apache '\n* ' directive does not deny the 'TRACE' request method. The 'TRACE' request method is disallowed in another benchmark recommendation with the 'TraceEnable' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate the Apache configuration files and included configuration files.\n2. Search for the directive on the document root directory, such as:...3. Ensure that the access control order within the '' directive is 'deny,allow'.\n\n Order allow,deny\n\n4. Add a directive as shown below within the group of document root directives.\n\n# Limit HTTP methods to standard methods. Note: Does not limit TRACEDeny from all5. Search for other directives in the Apache configuration files in places other than the root directory, and add the same directives to each. It is very important to understand that the directives are based on the OS file system hierarchy as accessed by Apache and not the hierarchy of the locations within web site URLs....\n  Order allow,deny\n  # Limit HTTP methodsDeny from all",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*[Oo]rder[ \t]+'",
        "expect": "[\\\\s]*[Rr]equire[\\\\s]+all[\\\\s]*denied[\\\\s]*$"
    },
    "custom_item_62": {
        "system": "Linux",
        "description": "5.7 Ensure HTTP Request Methods Are Restricted - 'No Deny/Allow'",
        "info": "Use the Apache '\n* ' directive to restrict unnecessary HTTP request methods of the web server so it only accepts and processes the 'GET', 'HEAD', 'POST' and 'OPTIONS' HTTP request methods.\n\nRationale:\n\nThe HTTP 1.1 protocol supports several request methods which are rarely used and potentially high risk. For example, methods such as 'PUT' and 'DELETE' are rarely used and should be disabled in keeping with the security principle of minimizing features and options. Also, since these methods are typically used to modify resources on the web server, they should be explicitly disallowed. For normal web server operation, you will typically need to allow only the 'GET', 'HEAD' and 'POST' request methods. This will allow for downloading web pages and submitting information to web forms. The 'OPTIONS' request method will also be allowed as it is used to request which HTTP request methods are allowed. Unfortunately, the Apache '\n* ' directive does not deny the 'TRACE' request method. The 'TRACE' request method is disallowed in another benchmark recommendation with the 'TraceEnable' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate the Apache configuration files and included configuration files.\n2. Search for the directive on the document root directory, such as:...3. Ensure that the access control order within the '' directive is 'deny,allow'.\n\n Order allow,deny\n\n4. Add a directive as shown below within the group of document root directives.\n\n# Limit HTTP methods to standard methods. Note: Does not limit TRACEDeny from all5. Search for other directives in the Apache configuration files in places other than the root directory, and add the same directives to each. It is very important to understand that the directives are based on the OS file system hierarchy as accessed by Apache and not the hierarchy of the locations within web site URLs....\n  Order allow,deny\n  # Limit HTTP methodsDeny from all",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^[ \t]*([Dd]eny|[Aa]llow)[ \t]+' | awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_63": {
        "description": "5.7 Ensure HTTP Request Methods Are Restricted - 'httpd.conf Document Root LimitExcept = GET,POST or OPTIONS only'",
        "info": "Use the Apache '\n* ' directive to restrict unnecessary HTTP request methods of the web server so it only accepts and processes the 'GET', 'HEAD', 'POST' and 'OPTIONS' HTTP request methods.\n\nRationale:\n\nThe HTTP 1.1 protocol supports several request methods which are rarely used and potentially high risk. For example, methods such as 'PUT' and 'DELETE' are rarely used and should be disabled in keeping with the security principle of minimizing features and options. Also, since these methods are typically used to modify resources on the web server, they should be explicitly disallowed. For normal web server operation, you will typically need to allow only the 'GET', 'HEAD' and 'POST' request methods. This will allow for downloading web pages and submitting information to web forms. The 'OPTIONS' request method will also be allowed as it is used to request which HTTP request methods are allowed. Unfortunately, the Apache '\n* ' directive does not deny the 'TRACE' request method. The 'TRACE' request method is disallowed in another benchmark recommendation with the 'TraceEnable' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate the Apache configuration files and included configuration files.\n2. Search for the directive on the document root directory, such as:...3. Ensure that the access control order within the '' directive is 'deny,allow'.\n\n Order allow,deny\n\n4. Add a directive as shown below within the group of document root directives.\n\n# Limit HTTP methods to standard methods. Note: Does not limit TRACEDeny from all5. Search for other directives in the Apache configuration files in places other than the root directory, and add the same directives to each. It is very important to understand that the directives are based on the OS file system hierarchy as accessed by Apache and not the hierarchy of the locations within web site URLs....\n  Order allow,deny\n  # Limit HTTP methodsDeny from all",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "grep -A 250 '' @HTTPD_CONF_LOCATION@ | grep -B 250 -m 1 '' | egrep '^\\\\s*<[Ll]imit[Ee]xcept\\\\s+'",
        "expect": "^[\\\\s]*<[Ll]imit[Ee]xcept[\\\\s]+([Gg][Ee][Tt]|[Pp][Oo][Ss][Tt]|[Oo][Pp][Tt][Ii][Oo][Nn][Ss]|[\\\\s])+>"
    },
    "custom_item_64": {
        "description": "5.8 Ensure the HTTP TRACE Method Is Disabled",
        "info": "Use the Apache 'TraceEnable' directive to disable the HTTP 'TRACE' request method.\nRefer to the Apache documentation for more details:\n[http://httpd.apache.org/docs/2.2/mod/core.html#traceenable](http://httpd.apache.org/docs/2.2/mod/core.html#traceenable)\n\nRationale:\n\nThe HTTP 1.1 protocol requires support for the 'TRACE' request method, which reflects the request back as a response and was intended for diagnostics purposes. The 'TRACE' method is not needed and is easily subjected to abuse, so it should be disabled.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Locate the main Apache configuration file such as 'httpd.conf'.\n2. Add a 'TraceEnable' directive to the server level configuration with a value of 'off'. Server level configuration is the top level configuration, not nested within any other directives like '' or ''.\n\n TraceEnable off",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Tt]race[Ee]nable[\\\\s]*",
        "expect": "^[\\\\s]*[Tt]race[Ee]nable[\\\\s]+[Oo][Ff][Ff][\\\\s]*$"
    },
    "custom_item_65": {
        "description": "5.9 Check for Apache Rewrite module",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'rewrite_module'",
        "expect": "^[\\\\s]*rewrite_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_66": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - 'RewriteEngine on'",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Rr]ewrite[Ee]ngine[\\\\s]*",
        "expect": "^[\\\\s]*[Rr]ewrite[Ee]ngine[\\\\s]+[Oo][Nn][\\\\s]*"
    },
    "custom_item_67": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - 'httpd.conf RewriteCond = %{THE_REQUEST} !HTTP/1\\.1$'",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Rr]ewrite[Cc]ond[\\\\s]+%{THE_REQUEST}[\\\\s]+!HTTP/1\\\\\\\\\\.1\\\\\\$",
        "expect": "^[\\\\s]*[Rr]ewrite[Cc]ond[\\\\s]+%{THE_REQUEST}[\\\\s]+!HTTP/1\\\\\\\\\\.1\\\\\\$"
    },
    "custom_item_68": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - 'RewriteRule configuration'",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Rr]ewrite[Rr]ule[\\\\s]+\\\\.\\\\*[\\\\s]+-[\\\\s]+\\\\\\[F\\\\\\][\\\\s]*",
        "expect": "^[\\\\s]*[Rr]ewrite[Rr]ule[\\\\s]+\\\\.\\\\*[\\\\s]+-[\\\\s]+\\\\\\[F\\\\\\][\\\\s]*"
    },
    "custom_item_69": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - 'httpd.confRewriteEngine = on'",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '(description : "
    },
    "custom_item_70": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - 'httpd.confRewriteOptions = inherit'",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '(description : "
    },
    "custom_item_71": {
        "description": "5.9 Ensure Old HTTP Protocol Versions Are Disallowed - Rewrite module not loaded",
        "info": "The Apache modules 'mod_rewrite' and 'mod_security' can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on 'mod_rewrite' for more details: [http://httpd.apache.org/docs/2.2/mod/mod\\_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nMany malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n\n* Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.\n\n\t./configure --enable-rewrite\n\n* Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file.\n\n\tLoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the main Apache configuration file such as 'httpd.conf', and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions.\n\n RewriteEngine On\n RewriteCond %{THE_REQUEST} !HTTP/1\\.1$\n RewriteRule .* - [F]\n\n4. By default, 'mod_rewrite' configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings:\n\n RewriteEngine On\n RewriteOptions Inherit",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'rewrite_module'",
        "expect": "^[\\\\s]*rewrite_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_72": {
        "description": "Check for FilesMatch directive",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/awk '{print} END {if (NR > 1) print \"pass\"}'",
        "expect": "pass"
    },
    "custom_item_73": {
        "description": "Check for FilesMatch - Deny directive",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Dd]eny[ \t]+'",
        "expect": "[\\\\s]*[Dd]eny[\\\\s]*"
    },
    "custom_item_74": {
        "description": "5.10 Ensure Access to .ht* Files Is Restricted",
        "info": "Restrict access to any files beginning with '.ht' using the 'FilesMatch' directive.\n\nRationale:\n\nThe default name for the access file which allows files in web directories to override the Apache configuration is '.htaccess'. The usage of access files should not be allowed, but as a defense in depth a 'FilesMatch' directive is recommended to prevent web clients from viewing those files in case they are created.\n\nAlso, common names for web password and group files are '.htpasswd' and '.htgroup'. Neither of these files should be placed in the document root, but in the event they are, the 'FilesMatch' directive can be used to prevent them from being viewed by web clients.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the following lines in the Apache configuration at the server configuration level:\n\n Order allow,deny\n Deny from all",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18.3,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Dd]eny\\\\s+'",
        "expect": "^[\\\\s]*[Dd]eny[\\\\s]+[Ff]rom[\\\\s]+[Aa]ll[\\\\s]*$"
    },
    "custom_item_75": {
        "description": "5.10 Ensure Access to .ht* Files Is Restricted",
        "info": "Restrict access to any files beginning with '.ht' using the 'FilesMatch' directive.\n\nRationale:\n\nThe default name for the access file which allows files in web directories to override the Apache configuration is '.htaccess'. The usage of access files should not be allowed, but as a defense in depth a 'FilesMatch' directive is recommended to prevent web clients from viewing those files in case they are created.\n\nAlso, common names for web password and group files are '.htpasswd' and '.htgroup'. Neither of these files should be placed in the document root, but in the event they are, the 'FilesMatch' directive can be used to prevent them from being viewed by web clients.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the following lines in the Apache configuration at the server configuration level:\n\n Order allow,deny\n Deny from all",
        "reference": "800-171|3.4.8,800-53|CM-7(4),800-53r5|CM-7(4),CSCv6|18.3,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^[ \t]*[Rr]equire[ \t]+'",
        "expect": "^[\\\\s]*[Rr]equire[\\\\s]+[Aa]ll[\\\\s]*[\\\\s]*[Dd]enied[\\\\s]*$"
    },
    "custom_item_76": {
        "description": "5.11 Restrict File Extensions - 'httpd.conf FileMatch directive exists'",
        "file": "@HTTPD_CONF_LOCATION@"
    },
    "custom_item_77": {
        "description": "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive Require all denied'",
        "info": "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.\n\nRationale:\n\nThere are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.\n\n find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u\n\n2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.\n3. Add the 'FilesMatch' directive below, which denies access to all files by default.\n\n # Block all files by default, unless specifically allowed.\n\n Order Deny,Allow\n Deny from all\n\n4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.\n\n # Allow files with specifically approved file extensions\n # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),\n # images (gif; ico; jpeg; jpg; png; ...), multimedia\n\n Order Deny,Allow\n Allow from all",
        "reference": "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Rr]equire\\\\s+'",
        "expect": "^[\\\\s]*[Rr]equire[\\\\s]+[Aa]ll[\\\\s]*[Dd]enied[\\\\s]*$"
    },
    "custom_item_78": {
        "description": "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive configuration'",
        "info": "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.\n\nRationale:\n\nThere are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.\n\n find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u\n\n2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.\n3. Add the 'FilesMatch' directive below, which denies access to all files by default.\n\n # Block all files by default, unless specifically allowed.\n\n Order Deny,Allow\n Deny from all\n\n4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.\n\n # Allow files with specifically approved file extensions\n # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),\n # images (gif; ico; jpeg; jpg; png; ...), multimedia\n\n Order Deny,Allow\n Allow from all",
        "reference": "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*description : "
    },
    "custom_item_79": {
        "description": "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode",
        "info": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.\n\nRationale:\n\nThe complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.\n\nNOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Set the profile state to enforce mode.\n\n # aa-enforce apache2\n Setting /usr/sbin/apache2 to enforce mode.\n\n2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.\n\n # service apache2 stop\n * Stopping web server apache2\n # service apache2 status\n * apache2 is not running\n\n3. Restart the Apache service.\n\n # service apache2 start\n * Starting web server apache2",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "/etc/selinux/config",
        "regex": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=",
        "cmd": "/usr/sbin/aa-unconfined --paranoid | /bin/grep apache2 | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none",
        "system": "Linux",
        "owner": "root",
        "mask": "377",
        "group": "root"
    },
    "custom_item_80": {
        "description": "5.12 Check for Apache Rewrite module",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'rewrite_module'",
        "expect": "^[\\\\s]*rewrite_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_81": {
        "description": "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteEngine = on'",
        "info": "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nA common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.\n\n /configure --enable-rewrite\n\n - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.\n\n LoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.\n\n RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC]\n RewriteCond %{REQUEST_URI} !^/error [NC]\n RewriteRule ^.(.*) - [L,F]",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*[Rr]ewrite[Ee]ngine.*'",
        "expect": "^[\\\\s]*[Rr]ewrite[Ee]ngine[\\\\s]+[Oo][Nn][\\\\s]*$"
    },
    "custom_item_82": {
        "description": "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{HTTP_HOST} exists'",
        "info": "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nA common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.\n\n /configure --enable-rewrite\n\n - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.\n\n LoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.\n\n RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC]\n RewriteCond %{REQUEST_URI} !^/error [NC]\n RewriteRule ^.(.*) - [L,F]",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*[Rr]ewrite[Cc]ond[ \t]*%{HTTP_HOST}.*'",
        "expect": "^[\\\\s]*[Rr]ewrite[Cc]ond[\\\\s]+%{HTTP_HOST}[\\\\s]+!\\\\^@REWRITE_URL@[\\\\s]+[[][Nn][Cc][]]"
    },
    "custom_item_83": {
        "description": "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{REQUEST_URI} exists'",
        "info": "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nA common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.\n\n /configure --enable-rewrite\n\n - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.\n\n LoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.\n\n RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC]\n RewriteCond %{REQUEST_URI} !^/error [NC]\n RewriteRule ^.(.*) - [L,F]",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*[Rr]ewrite[Cc]ond[ \t]*%{REQUEST_URI}'",
        "expect": "^[\\\\s]*[Rr]ewrite[Cc]ond[\\\\s]+%{REQUEST_URI}[\\\\s]+!\\\\^\\\\/error[\\\\s]+[[][Nn][Cc][]]"
    },
    "custom_item_84": {
        "description": "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteRule ^.(.*) - [L,F] exists'",
        "info": "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nA common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.\n\n /configure --enable-rewrite\n\n - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.\n\n LoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.\n\n RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC]\n RewriteCond %{REQUEST_URI} !^/error [NC]\n RewriteRule ^.(.*) - [L,F]",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*[Rr]ewrite[Rr]ule[ \t]*\\^\\.\\(\\.\\*\\)'",
        "expect": "^[\\\\s]*[Rr]ewrite[Rr]ule[\\\\s]+\\\\^\\\\\\.\\\\(\\\\\\.\\\\*\\\\)[\\\\s]+-[\\\\s]+[[][Ll],[Ff][]]"
    },
    "custom_item_85": {
        "description": "5.12 Ensure IP Address Based Requests Are Disallowed - Rewrite module not loaded",
        "info": "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.\n\nRefer to the Apache 2.2 documentation for details:\n[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\n\nRationale:\n\nA common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_rewrite' module for Apache by doing either one of the following:\n - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.\n\n /configure --enable-rewrite\n\n - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.\n\n LoadModule rewrite_module modules/mod_rewrite.so\n\n2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.\n\n RewriteEngine On\n\n3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.\n\n RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC]\n RewriteCond %{REQUEST_URI} !^/error [NC]\n RewriteRule ^.(.*) - [L,F]",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'rewrite_module'",
        "expect": "^[\\\\s]*rewrite_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_86": {
        "description": "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen 0.0.0.0:80 does not exists'",
        "info": "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.\n\nRationale:\n\nHaving multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.\n\n Listen 80\n Listen 0.0.0.0:80\n Listen [::ffff:0.0.0.0]:80\n\n2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.\n\n Listen 10.1.2.3:80\n Listen 192.168.4.5:80\n Listen [2001:db8::a00:20ff:fea7:ccea]:80",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]isten[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]isten[\\\\s]+0\\\\\\.0\\\\\\.0\\\\\\.0:80[\\\\s]*$"
    },
    "custom_item_87": {
        "description": "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen [::ffff:0.0.0.0]:80 does not exists'",
        "info": "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.\n\nRationale:\n\nHaving multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.\n\n Listen 80\n Listen 0.0.0.0:80\n Listen [::ffff:0.0.0.0]:80\n\n2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.\n\n Listen 10.1.2.3:80\n Listen 192.168.4.5:80\n Listen [2001:db8::a00:20ff:fea7:ccea]:80",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]isten[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]isten[\\\\s]+[[]::ffff:0\\\\\\.0\\\\\\.0\\\\\\.0[]]:80[\\\\s]*$"
    },
    "custom_item_88": {
        "description": "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen 80 does not exists'",
        "info": "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.\n\nRationale:\n\nHaving multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.\n\n Listen 80\n Listen 0.0.0.0:80\n Listen [::ffff:0.0.0.0]:80\n\n2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.\n\n Listen 10.1.2.3:80\n Listen 192.168.4.5:80\n Listen [2001:db8::a00:20ff:fea7:ccea]:80",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]isten[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]isten[\\\\s]+80[\\\\s]*$"
    },
    "custom_item_89": {
        "description": "5.14 Ensure Browser Framing Is Restricted",
        "info": "The Header directive allows server HTTP response headers to be added, replaced, or merged. Use the directive to add a server HTTP response header to tell browsers to restrict all the web pages from being framed by other web sites.\n\nRationale:\n\nUsing iframes and regular web frames to embed malicious content along with expected web content has been a favored attack vector for attacking web clients for a long time. This can happen when the attacker lures the victim to a malicious web site, which uses frames to include the expected content from the legitimate site. The attack can also be performed via XSS (either reflected, DOM or stored XSS) to add the malicious content to the legitimate web site. To combat this vector, an HTTP Response header, X-Frame-Options, has been introduced that allows a server to specify whether a web page may be loaded in any frame ('DENY') or only those frames that share the page's origin ('SAMEORIGIN').",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'Header' directive for the 'X-Frame-Options' header in the Apache configuration to have the condition 'always', an action of 'append', and a value of 'SAMEORIGIN', as shown below.\n\nHeader always append X-Frame-Options SAMEORIGIN",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*.+[Xx]-[Ff]rame-[Oo]ptions[\\\\s]+",
        "expect": "^[\\\\s]*[Hh]eader[\\\\s]+[Aa]lways[\\\\s]+[Aa]ppend[\\\\s]+[Xx]-[Ff]rame-[Oo]ptions[\\\\s]+SAMEORIGIN[\\\\s]*$"
    },
    "custom_item_90": {
        "description": "6.1 Ensure the Error Log Filename and Severity Level Are Configured Correctly - 'httpd.conf LogLevel = notice info or debug'",
        "info": "The 'LogLevel' directive is used to configure the severity level for the error logs, while the 'ErrorLog' directive configures the error log filename. The log level values are the standard syslog levels of 'emerg', 'alert', 'crit', 'error', 'warn', 'notice', 'info' and 'debug'. The recommended level is 'notice', so that all errors from the 'emerg' level through the 'notice' level will be logged.\n\nRationale:\n\nThe server error logs are invaluable because they can be used to spot potential problems before they become serious. Most importantly, they can be used to watch for anomalous behavior such as numerous 'not found' or 'unauthorized' errors that may be an indication an attack is pending or has occurred.\n\n**IMPORTANT NOTE:**\n\nThe Apache htttpd server stopped including '404 not found' errors in its error log several years ago. Not including the 404 errors may cause log monitoring and host intrusion detection and prevention software to miss web scanning attacks which cause a large number of 'not found' errors, and may fail to block the attack. For Apache 2.4 benchmark we have recommended using ''notice core:info'' in order to pick up the 404 errors. However, in Apache 2.2, the 'LogLevel' directive doesn't support multiple levels. So the same recommended solution is not available. There are three alternatives to consider:\n1. Set the 'LogLevel' to info - However this may create excessive logs, especially for TLS connections. The excessive logs may overwhelm the log monitoring processes.\n2. Adapt the log monitoring and IDS to monitor the access logs. Which are much more frequent and may also overwhelm the log monitoring system.\n3. Upgrade to Apache 2.4.\n\nFor historical context:\n- A useful discussion which includes a justification by the bug fix author for the not found log level change. [https://stackoverflow.com/questions/36568205/404-error-doesnt-appear-in-apache-error-log](https://stackoverflow.com/questions/36568205/404-error-doesnt-appear-in-apache-error-log)\n- The Apache 'bug fix' that caused the change in logging 404 not found errors is available at [https://bz.apache.org/bugzilla/show_bug.cgi?id=35768](https://bz.apache.org/bugzilla/show_bug.cgi?id=35768)",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add or modify the 'LogLevel' in the Apache configuration to have a value of 'notice' or lower. Note that is it is compliant to have a value of 'info' or 'debug' if there is a need for a more verbose log and the storage and monitoring processes are capable of handling the extra load. The recommended value is 'notice'.\n\n LogLevel notice\n\n2. Add an 'ErrorLog' directive if not already configured. The file path may be relative or absolute, or the logs may be configured to be sent to a syslog server.\n\n ErrorLog 'logs/error_log'\n\n3. Add a similar 'ErrorLog' directive for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv6|6.2,CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]og[Ll]evel[\\\\s]*",
        "expect": "^[\\\\s]*[Ll]og[Ll]evel[\\\\s]+([Nn][Oo][Tt][Ii][Cc][Ee]|[Ii][Nn][Ff][Oo]|[Dd][Ee][Bb][Uu][Gg])[\\\\s]*$"
    },
    "custom_item_91": {
        "description": "6.1 Ensure the Error Log Filename and Severity Level Are Configured Correctly - 'ErrorLog is configured'",
        "info": "The 'LogLevel' directive is used to configure the severity level for the error logs, while the 'ErrorLog' directive configures the error log filename. The log level values are the standard syslog levels of 'emerg', 'alert', 'crit', 'error', 'warn', 'notice', 'info' and 'debug'. The recommended level is 'notice', so that all errors from the 'emerg' level through the 'notice' level will be logged.\n\nRationale:\n\nThe server error logs are invaluable because they can be used to spot potential problems before they become serious. Most importantly, they can be used to watch for anomalous behavior such as numerous 'not found' or 'unauthorized' errors that may be an indication an attack is pending or has occurred.\n\n**IMPORTANT NOTE:**\n\nThe Apache htttpd server stopped including '404 not found' errors in its error log several years ago. Not including the 404 errors may cause log monitoring and host intrusion detection and prevention software to miss web scanning attacks which cause a large number of 'not found' errors, and may fail to block the attack. For Apache 2.4 benchmark we have recommended using ''notice core:info'' in order to pick up the 404 errors. However, in Apache 2.2, the 'LogLevel' directive doesn't support multiple levels. So the same recommended solution is not available. There are three alternatives to consider:\n1. Set the 'LogLevel' to info - However this may create excessive logs, especially for TLS connections. The excessive logs may overwhelm the log monitoring processes.\n2. Adapt the log monitoring and IDS to monitor the access logs. Which are much more frequent and may also overwhelm the log monitoring system.\n3. Upgrade to Apache 2.4.\n\nFor historical context:\n- A useful discussion which includes a justification by the bug fix author for the not found log level change. [https://stackoverflow.com/questions/36568205/404-error-doesnt-appear-in-apache-error-log](https://stackoverflow.com/questions/36568205/404-error-doesnt-appear-in-apache-error-log)\n- The Apache 'bug fix' that caused the change in logging 404 not found errors is available at [https://bz.apache.org/bugzilla/show_bug.cgi?id=35768](https://bz.apache.org/bugzilla/show_bug.cgi?id=35768)",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add or modify the 'LogLevel' in the Apache configuration to have a value of 'notice' or lower. Note that is it is compliant to have a value of 'info' or 'debug' if there is a need for a more verbose log and the storage and monitoring processes are capable of handling the extra load. The recommended value is 'notice'.\n\n LogLevel notice\n\n2. Add an 'ErrorLog' directive if not already configured. The file path may be relative or absolute, or the logs may be configured to be sent to a syslog server.\n\n ErrorLog 'logs/error_log'\n\n3. Add a similar 'ErrorLog' directive for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv6|6.2,CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*ErrorLog.*'",
        "expect": "^[\\\\s]*[Ee]rror[Ll]og[\\\\s]*@ERROR_LOG@[\\\\s]*$"
    },
    "custom_item_92": {
        "description": "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode",
        "info": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.\n\nRationale:\n\nThe complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.\n\nNOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Set the profile state to enforce mode.\n\n # aa-enforce apache2\n Setting /usr/sbin/apache2 to enforce mode.\n\n2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.\n\n # service apache2 stop\n * Stopping web server apache2\n # service apache2 status\n * apache2 is not running\n\n3. Restart the Apache service.\n\n # service apache2 start\n * Starting web server apache2",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/aa-unconfined --paranoid | /bin/grep apache2 | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none",
        "file": "/etc/selinux/config",
        "regex": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=",
        "system": "Linux",
        "owner": "root",
        "mask": "377",
        "group": "root"
    },
    "custom_item_93": {
        "description": "6.2 Ensure a Syslog Facility Is Configured for Error Logging - 'httpd.conf Syslog is configured'",
        "info": "The 'ErrorLog' directive should be configured to send web server error logs to a 'syslog' facility so the logs can be processed and monitored along with the system logs.\n\nRationale:\n\nIt is easy for web server error logs to be overlooked in the log monitoring process, and yet the application-level attacks have become the most common and are extremely important for detecting attacks early, as well as detecting non-malicious problems such as a broken link, or internal errors. By including the Apache error logs with the system logging facility, the application logs are more likely to be included in the established log monitoring process.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add an 'ErrorLog' directive if not already configured. Any appropriate 'syslog' facility may be used in place of 'local1'.\n\n ErrorLog 'syslog:local1'\n\n2. Add a similar 'ErrorLog' directive for each virtual host if necessary.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,800-53r5|AU-6,CN-L3|7.1.3.3(d),CSCv6|6.6,CSCv7|6.6,CSCv7|6.8,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-6,LEVEL|2S,NESA|M5.2.5,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*ErrorLog.*'",
        "expect": "^[\\\\s]*[Ee]rror[Ll]og[\\\\s]+\"@SYSLOG@\"[\\\\s]*$"
    },
    "custom_item_94": {
        "description": "6.2 Ensure a Syslog Facility Is Configured for Error Logging - 'httpd.confSyslog is configured'",
        "info": "The 'ErrorLog' directive should be configured to send web server error logs to a 'syslog' facility so the logs can be processed and monitored along with the system logs.\n\nRationale:\n\nIt is easy for web server error logs to be overlooked in the log monitoring process, and yet the application-level attacks have become the most common and are extremely important for detecting attacks early, as well as detecting non-malicious problems such as a broken link, or internal errors. By including the Apache error logs with the system logging facility, the application logs are more likely to be included in the established log monitoring process.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add an 'ErrorLog' directive if not already configured. Any appropriate 'syslog' facility may be used in place of 'local1'.\n\n ErrorLog 'syslog:local1'\n\n2. Add a similar 'ErrorLog' directive for each virtual host if necessary.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,800-53r5|AU-6,CN-L3|7.1.3.3(d),CSCv6|6.6,CSCv7|6.6,CSCv7|6.8,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-6,LEVEL|2S,NESA|M5.2.5,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/grep '^[ \t]*ErrorLog.*'",
        "expect": ""
    },
    "custom_item_95": {
        "description": "6.3 Ensure the Server Access Log Is Configured Correctly - 'httpd.conf LogFormat is configured'",
        "info": "The 'LogFormat' directive defines the format and information to be included in the server access log entries. The 'CustomLog' directive specifies the log file, syslog facility, or piped logging utility.\n\nRationale:\n\nThe server access logs are invaluable for a variety of reasons. They can be used to determine what resources are being used most. Most importantly, they can be used to investigate anomalous behavior that may be an indication an attack is pending or has occurred. If the server only logs errors and does not log successful access, it is very difficult to investigate incidents. You may see that the errors stop and wonder if the attacker gave up or if the attack was successful.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add or modify the 'LogFormat' directives in the Apache configuration to use the combined' format show as shown below.\n\n LogFormat '%h %l %u %t \\'%r\\' %>s %b \\'%{Referer}i\\' \\'%{User-agent}i\\'' combined\n\n2. Add or modify the 'CustomLog' directives in the Apache configuration to use the combined format with an appropriate log file, syslog facility or piped logging utility.\n\n CustomLog log/access_log combined\n\n3. Add a similar 'CustomLog' directives for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs as well as the skills/training/tools for monitoring the logs.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv6|6.2,CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]og[Ff]ormat[\\\\s]+.+[\\\\s]+[Cc]ombined",
        "expect": "^[\\\\s]*[Ll]og[Ff]ormat[\\\\s]+.*(%h)? (%l)? (%u)? (%t)? .*(%r)?.*(%>s)? (%b)? .*(%{[Rr]eferer}i)?.*(%{[Uu]ser-[Aa]gent}i)?.*[Cc]ombined[\\\\s]*$"
    },
    "custom_item_96": {
        "description": "6.3 Ensure the Server Access Log Is Configured Correctly - 'httpd.conf CustomLog is configured'",
        "info": "The 'LogFormat' directive defines the format and information to be included in the server access log entries. The 'CustomLog' directive specifies the log file, syslog facility, or piped logging utility.\n\nRationale:\n\nThe server access logs are invaluable for a variety of reasons. They can be used to determine what resources are being used most. Most importantly, they can be used to investigate anomalous behavior that may be an indication an attack is pending or has occurred. If the server only logs errors and does not log successful access, it is very difficult to investigate incidents. You may see that the errors stop and wonder if the attacker gave up or if the attack was successful.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Add or modify the 'LogFormat' directives in the Apache configuration to use the combined' format show as shown below.\n\n LogFormat '%h %l %u %t \\'%r\\' %>s %b \\'%{Referer}i\\' \\'%{User-agent}i\\'' combined\n\n2. Add or modify the 'CustomLog' directives in the Apache configuration to use the combined format with an appropriate log file, syslog facility or piped logging utility.\n\n CustomLog log/access_log combined\n\n3. Add a similar 'CustomLog' directives for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs as well as the skills/training/tools for monitoring the logs.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv6|6.2,CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/egrep '^\\\\s*[Cc]ustom[Ll]og\\\\s*'",
        "expect": "^[\\\\s]*[Cc]ustom[Ll]og[\\\\s]*@CUSTOM_LOG@[\\\\s]+[Cc]ombined[\\\\s]*$"
    },
    "custom_item_97": {
        "description": "6.4 Ensure Log Storage and Rotation Is Configured Correctly - '/etc/logrotate.conf rotate log files = weekly'",
        "info": "It is important that there is adequate disk space on the partition to hold all the log files, and that log rotation is configured to retain at least three months or 13 weeks of logs if central logging is not used for storage.\n\nRationale:\n\nThe generation of logs is under a potential attacker's control, so do not hold any Apache log files on the root partition of the OS. This could result in a denial of service against your web server host by filling up the root partition and causing the system to crash. For this reason, it is recommended that the log files should be stored on a dedicated partition. Likewise, consider that attackers sometimes put information into your logs which is intended to attack your log collection or log analysis processing software. So it is important that they are not vulnerable. Investigation of incidents often requires access to several months or more of logs, which is why it is important to keep at least three months' worth available. Two common log rotation utilities are 'rotatelogs(8)', which is bundled with Apache, and 'logrotate(8)', commonly bundled on Linux distributions.",
        "solution": "To implement the recommended state, do either option a) if using the Linux 'logrotate' utility or option b) if using a piped logging utility such as the Apache 'rotatelogs':\n\na) File Logging with Logrotate:\n 1. Add or modify the web log rotation configuration to match your configured log files in '/etc/logrotate.d/httpd' to be similar to the following.\n\n /var/log/httpd/*log {\n missingok\n notifempty\n sharedscripts\n postrotate\n /bin/kill -HUP 'cat /var/run/httpd.pid 2>/dev/null' 2> /dev/null || true\n endscript\n }\n\n 2. Modify the rotation period and number of logs to keep so that at least 13 weeks or three months of logs are retained. This may be done as the default value for all logs in '/etc/logrotate.conf' or in the web specific log rotation configuration in '/etc/logrotate.d/httpd' to be similar to the following.\n\n # rotate log files weekly\n weekly\n\n # keep 1 year of logs\n rotate 52\n\n 3. For each virtual host configured with its own log files, ensure those log files are also included in a similar log rotation.\n\nb) Piped Logging:\n 1. Configure the log rotation interval and log filenames to a suitable interval such as daily.\n\n CustomLog '|bin/rotatelogs -l /var/logs/logfile.%Y.%m.%d 86400' combined\n\n 2. Ensure the log file naming and any rotation scripts provide for retaining at least three months or 13 weeks of log files.\n 3. For each virtual host configured with its own log files, ensure those log files are included in a similar log rotation.",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2S,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "/etc/logrotate.conf",
        "regex": "^[\\\\s]*[Ww]eekly[\\\\s]*$",
        "expect": "^[\\\\s]*[Ww]eekly[\\\\s]*$"
    },
    "custom_item_98": {
        "description": "6.4 Ensure Log Storage and Rotation Is Configured Correctly - '/etc/logrotate.conf rotate > 13'",
        "info": "It is important that there is adequate disk space on the partition to hold all the log files, and that log rotation is configured to retain at least three months or 13 weeks of logs if central logging is not used for storage.\n\nRationale:\n\nThe generation of logs is under a potential attacker's control, so do not hold any Apache log files on the root partition of the OS. This could result in a denial of service against your web server host by filling up the root partition and causing the system to crash. For this reason, it is recommended that the log files should be stored on a dedicated partition. Likewise, consider that attackers sometimes put information into your logs which is intended to attack your log collection or log analysis processing software. So it is important that they are not vulnerable. Investigation of incidents often requires access to several months or more of logs, which is why it is important to keep at least three months' worth available. Two common log rotation utilities are 'rotatelogs(8)', which is bundled with Apache, and 'logrotate(8)', commonly bundled on Linux distributions.",
        "solution": "To implement the recommended state, do either option a) if using the Linux 'logrotate' utility or option b) if using a piped logging utility such as the Apache 'rotatelogs':\n\na) File Logging with Logrotate:\n 1. Add or modify the web log rotation configuration to match your configured log files in '/etc/logrotate.d/httpd' to be similar to the following.\n\n /var/log/httpd/*log {\n missingok\n notifempty\n sharedscripts\n postrotate\n /bin/kill -HUP 'cat /var/run/httpd.pid 2>/dev/null' 2> /dev/null || true\n endscript\n }\n\n 2. Modify the rotation period and number of logs to keep so that at least 13 weeks or three months of logs are retained. This may be done as the default value for all logs in '/etc/logrotate.conf' or in the web specific log rotation configuration in '/etc/logrotate.d/httpd' to be similar to the following.\n\n # rotate log files weekly\n weekly\n\n # keep 1 year of logs\n rotate 52\n\n 3. For each virtual host configured with its own log files, ensure those log files are also included in a similar log rotation.\n\nb) Piped Logging:\n 1. Configure the log rotation interval and log filenames to a suitable interval such as daily.\n\n CustomLog '|bin/rotatelogs -l /var/logs/logfile.%Y.%m.%d 86400' combined\n\n 2. Ensure the log file naming and any rotation scripts provide for retaining at least three months or 13 weeks of log files.\n 3. For each virtual host configured with its own log files, ensure those log files are included in a similar log rotation.",
        "reference": "800-53|AU-4,800-53r5|AU-4,CSCv6|6.3,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2S,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "/etc/logrotate.conf",
        "regex": "^[\\\\s]*[Rr]otate[\\\\s]+",
        "expect": "^[\\\\s]*[Rr]otate[\\\\s]+([1-9][3-9]|[1-9][0-9][0-9]+)"
    },
    "custom_item_99": {
        "description": "6.5 Ensure Applicable Patches Are Applied",
        "info": "Apply Apache patches within one month of availability.\n\nRationale:\n\nObviously knowing about newly discovered vulnerabilities is only part of the solution; there needs to be a process in place where patches are tested and installed. These patches fix diverse problems, including security issues. It is recommended to use the Apache packages and updates provided by your Linux platform vendor rather than building from source whenever possible in order to minimize the disruption and the work of keeping the software up-to-date.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Update to the latest Apache release available according to either of the following:\n\n1. When building from source:\n\n * Read release notes and related security patch information.\n\n * Download latest source and any dependent modules such as mod_security.\n\n * Build new Apache software according to your build process with the same configuration options.\n\n * Install and test the new software according to your organization's testing process.\n\n * Move to production according to your organization's deployment process.\n\n2. When using platform packages:\n\n * Read release notes and related security patch information.\n\n * Download and install latest available Apache package and any dependent software.\n\n * Test the new software according to your organization's testing process.\n\n * Move to production according to your organization's deployment process.",
        "reference": "800-53|SA-13,800-53r5|SA-8,CSCv6|4,CSCv7|18.4,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-13,ITSG-33|SA-13a.,LEVEL|2S,NESA|T7.6.5",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -V",
        "expect": "Manual Review Required"
    },
    "custom_item_100": {
        "description": "6.6 Ensure ModSecurity Is Installed and Enabled",
        "info": "'ModSecurity' is an open source web application firewall (WAF) for real-time web application monitoring, logging, and access control. It does not include a powerful customizable rule set, which may be used to detect and block common web application attacks. Installation of 'ModSecurity' without a rule set does not provide additional security for the protected web applications. Refer to the benchmark recommendation '_Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled_' for details on a recommended rule set.\n\n**Note:** Like other application security/application firewall systems, 'ModSecurity' requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing 'ModSecurity' may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstallation of the 'ModSecurity' Apache module enables a customizable web application firewall rule set which may be configured to detect and block common attack patterns as well as block outbound data leakage.",
        "solution": "Perform the following to enable the module:\n\n1. Install the 'ModSecurity' module if it is not already installed in modules/mod_security2.so. It may be installed via OS package installation (such as apt-get or yum) or built from the source files. See [https://www.modsecurity.org/download.html](https://www.modsecurity.org/download.html) for details.\n2. Add or modify the 'LoadModule' directive if not already present in the Apache configuration as shown below. Typically, the 'LoadModule' directive is placed in the file named 'mod_security.conf', which is included in the Apache configuration:\n\n LoadModule security2_module modules/mod_security2.so",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'security2_module'",
        "expect": "^[\\\\s]*security2_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_101": {
        "description": "Check if OWASP CRS 3",
        "cmd": "echo '@MOD_SEC_RULE_PATH@'",
        "expect": "crs-3"
    },
    "custom_item_102": {
        "system": "Linux",
        "description": "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Active Rules",
        "info": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:\n- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.\n- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation\n- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.\n- Common Web Attacks Protection - detecting common web application security attack.\n- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.\n- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.\n- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.\n- Trojan Protection - Detecting access to Trojans horses.\n- Identification of Application Defects - alerts on application misconfigurations.\n- Error Detection and Hiding - Disguising error messages sent by the server.\n\n**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstalling, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.",
        "solution": "Install, configure and test the OWASP ModSecurity Core Rule Set:\n1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).\n2. Unbundle the archive and follow the instructions in the 'INSTALL' file.\n3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.\n4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.\n5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs grep '^SecRule ' | wc -l",
        "expect": "(32[5-9]|3[3-9][0-9]|[4-9][0-9][0-9])"
    },
    "custom_item_103": {
        "system": "Linux",
        "description": "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Inbound Anomaly Threshold",
        "info": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:\n- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.\n- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation\n- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.\n- Common Web Attacks Protection - detecting common web application security attack.\n- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.\n- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.\n- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.\n- Trojan Protection - Detecting access to Trojans horses.\n- Identification of Application Defects - alerts on application misconfigurations.\n- Error Detection and Hiding - Disguising error messages sent by the server.\n\n**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstalling, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.",
        "solution": "Install, configure and test the OWASP ModSecurity Core Rule Set:\n1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).\n2. Unbundle the archive and follow the instructions in the 'INSTALL' file.\n3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.\n4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.\n5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.inbound_anomaly_score_threshold'",
        "expect": "setvar:tx.inbound_anomaly_score_threshold[\\\\s]*=[\\\\s]*[2-5][^0-9]"
    },
    "custom_item_104": {
        "system": "Linux",
        "description": "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Outbound Anomaly Threshold",
        "info": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:\n- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.\n- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation\n- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.\n- Common Web Attacks Protection - detecting common web application security attack.\n- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.\n- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.\n- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.\n- Trojan Protection - Detecting access to Trojans horses.\n- Identification of Application Defects - alerts on application misconfigurations.\n- Error Detection and Hiding - Disguising error messages sent by the server.\n\n**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstalling, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.",
        "solution": "Install, configure and test the OWASP ModSecurity Core Rule Set:\n1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).\n2. Unbundle the archive and follow the instructions in the 'INSTALL' file.\n3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.\n4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.\n5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.outbound_anomaly_score_threshold'",
        "expect": "setvar:tx.outbound_anomaly_score_threshold[\\\\s]*=[\\\\s]*[2-4][^0-9]"
    },
    "custom_item_105": {
        "system": "Linux",
        "description": "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Paranoia Level",
        "info": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:\n- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.\n- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation\n- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.\n- Common Web Attacks Protection - detecting common web application security attack.\n- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.\n- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.\n- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.\n- Trojan Protection - Detecting access to Trojans horses.\n- Identification of Application Defects - alerts on application misconfigurations.\n- Error Detection and Hiding - Disguising error messages sent by the server.\n\n**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstalling, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.",
        "solution": "Install, configure and test the OWASP ModSecurity Core Rule Set:\n1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).\n2. Unbundle the archive and follow the instructions in the 'INSTALL' file.\n3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.\n4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.\n5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.paranoia_level'",
        "expect": "setvar:tx.paranoia_level[\\\\s]*=[\\\\s]*1[^0-9]"
    },
    "custom_item_106": {
        "system": "Linux",
        "description": "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Active Rules",
        "info": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:\n- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.\n- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation\n- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.\n- Common Web Attacks Protection - detecting common web application security attack.\n- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.\n- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.\n- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.\n- Trojan Protection - Detecting access to Trojans horses.\n- Identification of Application Defects - alerts on application misconfigurations.\n- Error Detection and Hiding - Disguising error messages sent by the server.\n\n**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.\n\nRationale:\n\nInstalling, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.",
        "solution": "Install, configure and test the OWASP ModSecurity Core Rule Set:\n1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).\n2. Unbundle the archive and follow the instructions in the 'INSTALL' file.\n3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.\n4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.\n5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes.",
        "reference": "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "find '@MOD_SEC_RULE_PATH@' -name 'modsecurity_crs_*.conf' | xargs grep '^SecRule ' | wc -l",
        "expect": "[2-9][0-9][0-9]"
    },
    "custom_item_107": {
        "description": "7.1 Ensure mod_ssl and/or mod_nss Is Installed",
        "info": "Secure Sockets Layer (SSL) was developed by Netscape and turned into an open standard and was renamed Transport Layer Security (TLS) as part of the process. TLS is important for protecting communication and can provide authentication of the server and even the client. However, contrary to vendor claims, implementing SSL does NOT directly make your web server more secure! SSL is used to encrypt traffic and therefore does provide confidentiality of private information and users credentials. Keep in mind, however that just because you have encrypted the data in transit does not mean that the data provided by the client is secure while it is on the server. Also, SSL does not protect the web server, as attackers will easily target SSL-Enabled web servers, and the attack will be hidden in the encrypted channel.\n\nThe 'mod_ssl' module is the standard, most used module that implements SSL/TLS for Apache. A newer module found on Red Hat systems can be a compliment or replacement for 'mod_ssl' and provides the same functionality plus additional security services. The 'mod_nss' is an Apache module implementation of the Network Security Services (NSS) software from Mozilla, which implements a wide range of cryptographic functions in addition to TLS.\n\nRationale:\n\nIt is best to plan for SSL/TLS implementation from the beginning of any new web server because most web servers have some need for SSL/TLS due to:\n- Non-public information submitted that should be protected as it's transmitted to the web server\n- Non-public information that is downloaded from the web server\n- Users authenticating to some portion of the web server\n- Authenticating the web server to ensure users they have reached the real web server and have not been phished or redirected to a bogus site",
        "solution": "Perform either of the following to implement the recommended state:\n1. For Apache installations built from source, use the option '--with-ssl=' to specify the openssl path, and the '--enable-ssl' configure option to add the SSL modules to the build. The '--with-included-apr' configure option may be necessary if there are conflicts with the platform version. See the Apache documentation on building from source [http://httpd.apache.org/docs/2.2/install.html](http://httpd.apache.org/docs/2.2/install.html) for details.\n\n # ./configure --with-included-apr --with-ssl=$OPENSSL_DIR --enable-ssl\n\n2. For installations using OS packages, it is typically just a matter of ensuring the 'mod_ssl' package is installed. The 'mod_nss' package might also be installed. The following yum command is suitable for Red Hat Linux.\n\n # yum install mod_ssl",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/egrep '(ssl|nss)_module'",
        "expect": "^[\\\\s]*(ssl|nss)_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_108": {
        "description": "7.2 Ensure a Valid Trusted Certificate Is Installed",
        "info": "The default SSL certificate is self-signed and is not trusted. Install a valid certificate signed by a commonly trusted certificate authority. To be valid, the certificate must be:\n- Signed by a trusted certificate authority\n- Not be expired, and\n- Have a common name that matches the host name of the web server, such as www.example.com.\n\n**Note:** Some previously 'Trusted' Certificate Authority certificates had been signed with a weak hash algorithm such as MD5, or SHA1. These signature algorithms are known to be vulnerable to collision attacks. Note that it's not the just the signature on the server's certificate, but any signature up the certificate chain. Such CA certificates are considered no longer trusted as of January 1, 2017.\n\nRationale:\n\nA digital certificate on your server automatically communicates your site's authenticity to visitors' web browsers. If a trusted authority signs your certificate, it confirms for visitors they are actually communicating with you, and not with a fraudulent site stealing credit card numbers or personal information.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Decide on the hostname to be used for the certificate. It is important to remember that the browser will compare the hostname in the URL to the common name in the certificate, so it is important that all https: URLs match the correct hostname. Specifically, the hostname 'www.example.com' is not the same as 'example.com' nor the same as 'ssl.example.com'.\n2. Generate a private key using openssl. Although certificate key lengths of 1024 have been common in the past, a key length of 2048 is now recommended for strong authentication. The key must be kept confidential and will be encrypted with a passphrase by default. Follow the steps below and respond to the prompts for a passphrase. See the Apache or OpenSSL documentation for details:\n - [http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html#realcert](http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html#realcert)\n - [http://www.openssl.org/docs/HOWTO/certificates.txt](http://www.openssl.org/docs/HOWTO/certificates.txt)\n\n # cd /etc/pki/tls/certs\n # umask 077\n # openssl genrsa -aes128 2048 > example.com.key\n Generating RSA private key, 2048 bit long modulus\n ...+++\n ............+++\n e is 65537 (0x10001)\n Enter pass phrase:\n Verifying - Enter pass phrase:\n\n3. Create a certificate specific template configuration file. It is important that common name in the certificate exactly make the web host name in the intended URL. If there are multiple host names which may be used, as is very common, then the 'subjectAltName' (SAN) field should be filled with all of the alternate names. Creating a template configuration file specific to the server certificate is helpful, as it allows for multiple entries in the 'subjectAltName'. Also, any typos in the CSR can be potentially costly due to the lost time, so using a file, rather than hand typing helps prevent errors. To create a template configuration file, make a local copy of the 'openssl.cnf' typically found in '/etc/ssl/' or '/etc/pki/tls/'\n\n # cp /etc/ssl/openssl.cnf ex1.cnf>\n\n4. Find the request section which follows the line ''[ req ] ''. Then add or modify the configuration file to include the appropriate values for the host names. It is recommended (but not required) that the first 'subjectAltName' match the 'commonName'.\n\n [ req ]\n . . .\n distinguished_name = req_distinguished_name\n req_extensions = req_ext\n\n [ req_ext ]\n subjectAltName = @alt_names\n\n [alt_names]\n DNS.1 = www.example.com\n DNS.2 = example.com\n DNS.3 = app.example.com\n DNS.4 = service.example.com\n\n5. Continue editing the configuration file under the request distinguished name section to change the existing default values in the configuration file to match the desired certificates information.\n\n [ req_distinguished_name ]\n countryName_default = GB\n stateOrProvinceName_default = Scotland\n localityName_default = Glasgow\n 0.organizationName_default = Example Company Ltd\n organizationalUnitName_default = ICT\n commonName_default = www.example.com\n\n6. Now generate the CSR from the template file, verifying the information. If the default values were placed in the template, then just press enter to confirm the default value.\n\n # openssl req -new -config ex2.cnf -out example.com.csr -key example.com.key\n Enter pass phrase for example.com.key:\n You are about to be asked to enter information that will be incorporated\n into your certificate request.\n What you are about to enter is what is called a Distinguished Name or a DN.\n There are quite a few fields but you can leave some blank\n For some fields there will be a default value,\n If you enter '.', the field will be left blank.\n -----\n Country Name (2 letter code) [GB]:\n State or Province Name (full name) [Scotland]:\n Locality Name (eg, city) [Glasgow]:\n Organization Name (eg, company) [Example Company Ltd]:\n Organizational Unit Name (eg, section) [ICT]:\n Common Name (e.g. server FQDN or YOUR name) [www.example.com]:\n\n7. Review and verify the CSR information including the SAN by displaying the information.\n\n # openssl req -in ex2.csr -text | more\n\n Certificate Request:\n Data:\n Version: 1 (0x0)\n Subject: C = GB, ST = Scotland, L = Glasgow, O = Example Company Ltd, OU = ICT, CN = www.example.com\n Subject Public Key Info:\n Public Key Algorithm: rsaEncryption\n Public-Key: (2048 bit)\n Modulus:\n 00:cb:c2:7a:04:13:19:7a:c0:74:00:63:dd:e9:6e:\n . . .  . . .\n 3a:9d:aa:50:09:4a:40:48:b4:e2:24:ef:fa:7b:42:\n a4:33\n Exponent: 65537 (0x10001)\n Attributes:\n Requested Extensions:\n X509v3 Subject Alternative Name:\n DNS:www.example.com, DNS:example.com, DNS:app.example.com, DNS:ws.example.com\n X509v3 Basic Constraints:\n CA:FALSE\n X509v3 Key Usage:\n Digital Signature, Non Repudiation, Key Encipherment\n Signature Algorithm: sha256WithRSAEncryption\n 73:f0:e3:90:a7:ab:01:e4:7f:12:19:b7:6a:dd:be:4e:5c:f1:\n . . .\n\n8. Now move the private key to its intended directory.\n\n # mv www.example.com.key /etc/ssl/private/\n\n9. Send the certificate signing request (CSR) to a certificate signing authority to be signed, and follow their instructions for submission and validation. The CSR and the final signed certificate are just encoded text and need to be protected for integrity, but not confidentiality. This certificate will be given out for every SSL connection made.\n10. The resulting signed certificate may be named 'www.example.com.crt' and placed in '/etc/ssl/certs/' as readable by all (mode '0444'). Please note that the certificate authority does not need the private key ('example.com.key') and this file must be carefully protected. With a decrypted copy of the private key, it would be possible to decrypt all conversations with the server.\n11. Do not forget the passphrase used to encrypt the private key. It will be required every time the server is started in https mode. If it is necessary to avoid requiring an administrator having to type the passphrase every time the 'httpd' service is started, the private key may be stored in clear text. Storing the private key in clear text increases the convenience while increasing the risk of disclosure of the key, but may be appropriate for the sake of being able to restart, if the risks are well managed. Be sure that the key file is only readable by root. To decrypt the private key and store it in clear text file the following openssl command may be used. You can tell by the private key headers whether it is encrypted or clear text.\n\n # cd /etc/ssl/private/\n # umask 077\n # openssl rsa -in www.example.com.key -out www.example.com.key.clear\n\n12. Locate the Apache configuration file for 'mod_ssl' and add or modify the 'SSLCertificateFile' and 'SSLCertificateKeyFile'directives to have the correct path for the private key and signed certificate files. If a clear text key is referenced then a passphrase will not be required. You may need to configure the CA's certificate along with any intermediate CA certificates that signed your certificate using the 'SSLCertificateChainFile' directive. As an alternative, starting with Apache version 2.4.8 the CA and intermediate certificates may be concatenated to the server certificate configured with the 'SSLCertificateFile' directive instead.\n\n SSLCertificateFile /etc/ssl/certs/example.com.crt\n SSLCertificateKeyFile /etc/ssl/private/example.com.key\n # Default CA file, can be replaced with your CA certificate.\n SSLCertificateChainFile /etc/ssl/certs/server-chain.crt\n\n13. Lastly, start or restart the 'httpd' service and verify correct functioning with your favorite browser.",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/bin/openssl verify -CAfile /etc/pki/tls/certs/ca-bundle.crt -purpose sslserver @SSL_CERT@ 2>&1 | /bin/egrep '^[Ee]rror' | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_109": {
        "description": "7.3 Ensure the Server's Private Key Is Protected",
        "info": "It is critical to protect the server's private key. The private key is encrypted by default as a means of protecting it, but having it encrypted means that the passphrase is required each time the server is started up. Now it is necessary to protect the passphrase as well. The passphrase may be typed in when it is manually started up or provided by an automated program. See [http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslpassphrasedialog](http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslpassphrasedialog) for details.\nTo summarize, the options are:\n1. Use 'SSLPassPhraseDialog builtin', which requires a passphrase to be manually entered.\n2. Use 'SSLPassPhraseDialog |/path/to/program' to provide the passphrase.\n3. Use 'SSLPassPhraseDialog exec:/path/to/program' to provide the passphrase.\n4. Store the private key in clear text so a passphrase is not required.\n\nAny of the above options 1-4 are acceptable as long as the key and passphrase are protected properly. Option 1 has the additional security benefit of not storing the passphrase but is not generally acceptable for most production web servers, since it requires the web server to be manually started. Options 2 and 3 can provide additional security if the programs providing them are secure. Option 4 is the simplest, is widely used, and is acceptable as long as the private key is appropriately protected.\n\nRationale:\n\nIf the private key were to be disclosed, it could be used to decrypt all of the SSL communications with the web server as well as to impersonate the web server.",
        "solution": "Perform the following to implement the recommended state:\n1. All private keys must be stored separately from the public certificates. Find all 'SSLCertificateFile' directives in the Apache configuration files. For any 'SSLCertificateFile' directives that do not have a corresponding separate 'SSLCertificateKeyFile' directive, move the key to a separate file from the certificate, and add the 'SSLCertificateKeyFile' directive for the key file.\n2. For each 'SSLCertificateKeyFile' directive, change the ownership and permissions on the server private key to be owned by 'root:root' with permission '0400'.",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@SSL_KEY@",
        "owner": "root",
        "mask": "377",
        "group": "root"
    },
    "custom_item_110": {
        "system": "Linux",
        "description": "7.4 Ensure Weak SSL Protocols Are Disabled - 'TLSv1'",
        "info": "The Apache 'SSLProtocol' directive specifies the SSL and TLS protocols allowed. Both the SSLv2 and the SSLv3 protocols should be disabled in this directive because they are outdated and vulnerable to information disclosure. Only TLS protocols should be enabled.\n\nRationale:\n\nThe SSLv2 and SSLv3 protocols are flawed and shouldn't be used, as they are subject to man-in-the-middle attacks and other cryptographic attacks. The TLSv1 protocols should be used instead, and the newer TLS protocols are preferred.",
        "solution": "Perform the following to implement the recommended state:\n\nSearch the Apache configuration files for the SSLProtocol directive. Add the directive if not present or change the value to match one of the following values. The first setting 'TLS1.2' is preferred when it is acceptable to also disable the TLSv1.0 and TLSv1.1 protocols. See the level 2 recommendation 'Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled' for details.\n\nSSLProtocol TLS1.2\n\nSSLProtocol TLSv1",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]*",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]+([Tt][Ll][Ss][Vv]1\\\\.1[\\\\s]+[Tt][Ll][Ss][Vv]1\\\\.2[\\\\s]*|[Tt][Ll][Ss][Vv]1)[\\\\s]*$"
    },
    "custom_item_111": {
        "system": "Linux",
        "description": "7.4 Ensure Weak SSL Protocols Are Disabled - 'SSLv2 or SSLv3'",
        "info": "The Apache 'SSLProtocol' directive specifies the SSL and TLS protocols allowed. Both the SSLv2 and the SSLv3 protocols should be disabled in this directive because they are outdated and vulnerable to information disclosure. Only TLS protocols should be enabled.\n\nRationale:\n\nThe SSLv2 and SSLv3 protocols are flawed and shouldn't be used, as they are subject to man-in-the-middle attacks and other cryptographic attacks. The TLSv1 protocols should be used instead, and the newer TLS protocols are preferred.",
        "solution": "Perform the following to implement the recommended state:\n\nSearch the Apache configuration files for the SSLProtocol directive. Add the directive if not present or change the value to match one of the following values. The first setting 'TLS1.2' is preferred when it is acceptable to also disable the TLSv1.0 and TLSv1.1 protocols. See the level 2 recommendation 'Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled' for details.\n\nSSLProtocol TLS1.2\n\nSSLProtocol TLSv1",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]*",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]+([Ss][Ss][Ll][Vv]2|[Ss][Ss][Ll][Vv]3)[\\\\s]*$"
    },
    "custom_item_112": {
        "description": "7.5 Ensure Weak SSL/TLS Ciphers Are Disabled - 'Global SSLHonorCipherOrder = On'",
        "info": "Disable weak SSL ciphers using the 'SSLCipherSuite' and 'SSLHonorCipherOrder' directives. The 'SSLCipherSuite' directive specifies which ciphers are allowed in the negotiation with the client. The 'SSLHonorCipherOrder' directive causes the server's preferred ciphers to be used instead of the clients' specified preferences.\n\nRationale:\n\nThe SSL/TLS protocols support a large number of encryption ciphers, including many weak ciphers that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL cipher, which allows a TLS connection without any encryption! Therefore, it is critical to ensure the configuration only allows strong ciphers greater than or equal to 128 bit to be negotiated with the client. Stronger 256-bit ciphers should be allowed and preferred. In addition, enabling 'SSLHonorCipherOrder' further protects the client from man-in-the-middle downgrade attacks by ensuring the server's preferred ciphers will be used rather than the clients' preferences.\n\nIn addition, the RC4 stream ciphers should be disabled, even though they are widely used and have been recommended in previous Apache benchmarks as a means of mitigating attacks based on CBC cipher vulnerabilities. The RC4 ciphers have known cryptographic weaknesses and are no longer recommended. The IETF has published the RFC 7465 standard[4] that would disallow RC4 negotiation for all TLS versions. While the document is somewhat new (Feb 2015), it is expected the RC4 cipher suites will begin to disappear from options in TLS deployments. In the meantime, it is important to ensure that RC4-based cipher suites are disabled in the configuration.",
        "solution": "Perform the following to implement the recommended state:\n\nEnsure the 'SSLCipherSuite' includes all of the following:\n\n'!NULL:!SSLv2:!RC4:!aNULL' values. For example, add or modify the following line in the Apache server level configuration and every virtual host that is TLS enabled:\n\nSSLHonorCipherOrder On\nSSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL\n\nIt is **not** recommended to add '!SSLv3' to the directive even if the SSLv3 protocol is not in use. Doing so disables ALL of the ciphers that may used with SSLv3, which includes the same ciphers used with the TLS protocols. The !aNULL will disable both the ADH and AECDH ciphers, so the !ADH is not required.\n\n**IMPORTANT NOTE:** The above 'SSLCipherSuite' value disables only the weak ciphers but allows medium strength and other ciphers which should also be disabled. Refer to the remaining TLS benchmark recommendations for stronger cipher suite values. The following cipher suite value will meet all of the level 1 and level 2 benchmark recommendations. As always, testing prior to production use is highly recommended.\n\nSSLHonorCipherOrder On\nSSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/egrep -i '^\\\\s*SSLHonorCipherOrder'",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Hh]onor[Cc]ipher[Oo]rder[\\\\s]+[Oo][Nn][\\\\s]*$"
    },
    "custom_item_113": {
        "description": "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode",
        "info": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.\n\nRationale:\n\nThe complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.\n\nNOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Set the profile state to enforce mode.\n\n # aa-enforce apache2\n Setting /usr/sbin/apache2 to enforce mode.\n\n2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.\n\n # service apache2 stop\n * Stopping web server apache2\n # service apache2 status\n * apache2 is not running\n\n3. Restart the Apache service.\n\n # service apache2 start\n * Starting web server apache2",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/aa-unconfined --paranoid | /bin/grep apache2 | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none",
        "file": "/etc/selinux/config",
        "regex": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=",
        "system": "Linux"
    },
    "custom_item_114": {
        "description": "7.5 Ensure Weak SSL/TLS Ciphers Are Disabled - 'Global SSLCipherSuite'",
        "info": "Disable weak SSL ciphers using the 'SSLCipherSuite' and 'SSLHonorCipherOrder' directives. The 'SSLCipherSuite' directive specifies which ciphers are allowed in the negotiation with the client. The 'SSLHonorCipherOrder' directive causes the server's preferred ciphers to be used instead of the clients' specified preferences.\n\nRationale:\n\nThe SSL/TLS protocols support a large number of encryption ciphers, including many weak ciphers that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL cipher, which allows a TLS connection without any encryption! Therefore, it is critical to ensure the configuration only allows strong ciphers greater than or equal to 128 bit to be negotiated with the client. Stronger 256-bit ciphers should be allowed and preferred. In addition, enabling 'SSLHonorCipherOrder' further protects the client from man-in-the-middle downgrade attacks by ensuring the server's preferred ciphers will be used rather than the clients' preferences.\n\nIn addition, the RC4 stream ciphers should be disabled, even though they are widely used and have been recommended in previous Apache benchmarks as a means of mitigating attacks based on CBC cipher vulnerabilities. The RC4 ciphers have known cryptographic weaknesses and are no longer recommended. The IETF has published the RFC 7465 standard[4] that would disallow RC4 negotiation for all TLS versions. While the document is somewhat new (Feb 2015), it is expected the RC4 cipher suites will begin to disappear from options in TLS deployments. In the meantime, it is important to ensure that RC4-based cipher suites are disabled in the configuration.",
        "solution": "Perform the following to implement the recommended state:\n\nEnsure the 'SSLCipherSuite' includes all of the following:\n\n'!NULL:!SSLv2:!RC4:!aNULL' values. For example, add or modify the following line in the Apache server level configuration and every virtual host that is TLS enabled:\n\nSSLHonorCipherOrder On\nSSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL\n\nIt is **not** recommended to add '!SSLv3' to the directive even if the SSLv3 protocol is not in use. Doing so disables ALL of the ciphers that may used with SSLv3, which includes the same ciphers used with the TLS protocols. The !aNULL will disable both the ADH and AECDH ciphers, so the !ADH is not required.\n\n**IMPORTANT NOTE:** The above 'SSLCipherSuite' value disables only the weak ciphers but allows medium strength and other ciphers which should also be disabled. Refer to the remaining TLS benchmark recommendations for stronger cipher suite values. The following cipher suite value will meet all of the level 1 and level 2 benchmark recommendations. As always, testing prior to production use is highly recommended.\n\nSSLHonorCipherOrder On\nSSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/egrep -i '^\\\\s*SSLCipherSuite'",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Cc]ipher[Ss]uite[\\\\s]*ALL:!EXP:!NULL:!LOW:!SSLv2:!MD5:!RC4:!aNULL[\\\\s]*$"
    },
    "custom_item_115": {
        "description": "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode",
        "info": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.\n\nRationale:\n\nThe complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.\n\nNOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Set the profile state to enforce mode.\n\n # aa-enforce apache2\n Setting /usr/sbin/apache2 to enforce mode.\n\n2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.\n\n # service apache2 stop\n * Stopping web server apache2\n # service apache2 status\n * apache2 is not running\n\n3. Restart the Apache service.\n\n # service apache2 start\n * Starting web server apache2",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/aa-unconfined --paranoid | /bin/grep apache2 | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "file": "/etc/selinux/config",
        "regex": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=",
        "expect": "none",
        "system": "Linux"
    },
    "custom_item_116": {
        "system": "Linux",
        "description": "7.6 Ensure Insecure SSL Renegotiation Is Not Enabled",
        "info": "A man-in-the-middle renegotiation attack was discovered in SSLv3 and TLSv1 in Nov 2009 [CVE-2009-3555](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2009-3555). [http://www.phonefactor.com/sslgap/ssl-tls-authentication-patches](http://www.phonefactor.com/sslgap/ssl-tls-authentication-patches) A fix was approved as an Internet Standard as RFC 574, Feb 2010. The workaround which removes the renegotiation is available from OpenSSL as of version 0.9.8l and newer versions. For details: [http://www.openssl.org/news/secadv_20091111.txt](http://www.openssl.org/news/secadv_20091111.txt)\nThe 'SSLInsecureRenegotiation' directive was added in Apache 2.2.15 for web servers linked with OpenSSL version 0.9.8m or later, to allow the insecure renegotiation to provide backward compatibility to clients with the older unpatched SSL implementations. While providing backward compatibility, enabling the 'SSLInsecureRenegotiation' directive also leaves the server vulnerable to man-in-the-middle renegotiation attack CVE-2009-3555. Therefore, the 'SSLInsecureRenegotiation' directive should not be enabled.\n\nRationale:\n\nThe seriousness and ramification of this attack warrants that servers and clients be upgraded to support the improved SSL/TLS protocols. Therefore, the recommendation is to not enable the insecure renegotiation.",
        "solution": "Perform the following to implement the recommended state:\n\nSearch the Apache configuration files for the 'SSLInsecureRenegotiation' directive. If the directive is present, modify the value to be off. If the directive is not present, no action is required.\n\nSSLInsecureRenegotiation off",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss][Ss][Ll][Ii]nsecure[Rr]enegotiation[\\\\s]+",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Ii]nsecure[Rr]enegotiation[\\\\s]+[Oo][Ff][Ff][\\\\s]*$"
    },
    "custom_item_117": {
        "description": "Apache 2.2.24 or greater",
        "cmd": "@HTTPD_LOCATION@ -version",
        "expect": "Apache/(2.2.2[4-9]|2.2.[3-9][0-9]"
    },
    "custom_item_118": {
        "system": "Linux",
        "description": "7.7 Ensure SSL Compression is Not Enabled",
        "info": "The 'SSLCompression' directive controls whether SSL compression is used by Apache when serving content over HTTPS. It is recommended that the 'SSLCompression' directive be set to 'off'.\n\nRationale:\n\nIf SSL compression is enabled, HTTPS communication between the client and the server may be at increased risk to the CRIME attack. The CRIME attack increases a malicious actor's ability to derive the value of a session cookie, which commonly contains an authenticator. If the authenticator in a session cookie is derived, it can be used to impersonate the account associated with the authenticator.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Verify the Apache version is 2.2.24 or later, with the command 'httpd -v'.\n2. Search the Apache configuration files for the 'SSLCompression' directive.\n3. Add or update the directive to have a value of 'off'.",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss][Ss][Ll][Cc]ompression[\\\\s]+",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Cc]ompression[\\\\s]+[Oo][Ff][Ff][\\\\s]*$"
    },
    "custom_item_119": {
        "description": "7.8 Ensure Medium Strength SSL/TLS Ciphers Are Disabled",
        "info": "The SSLCipherSuite directive specifies which ciphers are allowed in the negotiation with the client. Disable the medium strength ciphers such as Triple DES (3DES) and IDEA by adding '!3DES' and '!IDEA' in the SSLCipherSuite directive.\n\nRationale:\n\nAlthough Triple DES was a trusted standard in the past, several vulnerabilities for it have been published over the years and it is no longer considered secure. A somewhat recent attack against 3DES in CBC mode, nicknamed the SWEET32 attack, was published in 2016 as CVE-2016-2183. The IDEA cipher in CBC mode is also vulnerable to the SWEET32 attack.",
        "solution": "Perform the following to implement the recommended state:\nAdd or modify the following lines in the Apache server level configuration and every virtual host that is SSL/TLS enabled:\n\nSSLHonorCipherOrder On\nSSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL:!3DES:!IDEA\n\n**IMPORTANT NOTE:** The above 'SSLCipherSuite' value disables only the weak and medium ciphers but allows other ciphers which should also be disabled. Refer to the remaining TLS benchmark recommendations for more stronger cipher suite values. The following cipher suite value will meet all of the level 1 and level 2 benchmark recommendations. As always, testing prior to production use is highly recommended.\n\nSSLHonorCipherOrder On\nSSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/egrep -i '^\\\\s*SSLCipherSuite'",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Cc]ipher[Ss]uite[\\\\s]*ALL:!EXP:!NULL:!LOW:!SSLv2:!MD5:!RC4:!aNULL:!3DES:!IDEA[\\\\s]*$"
    },
    "custom_item_120": {
        "system": "Linux",
        "description": "7.9 Ensure All Web Content is Accessed via HTTPS",
        "info": "All of the website content should be served via HTTPS rather than HTTP. A redirect from the HTTP website to the HTTPS content is often useful and is recommended, but all significant content should be accessed via HTTPS so that it is authenticated and encrypted.\n\nRationale:\n\nThe usage of clear text HTTP prevents the client browser from authenticating the connection and ensuring the integrity of the website information. Without the HTTPS authentication, a client may be subjected to a variety of man-in-the-middle and spoofing attacks which would cause them to receive modified web content which could harm the organization's reputation. Through DNS attacks or malicious redirects, the client could arrive at a malicious website instead of the intended website. The malicious website could deliver malware, request credentials, or deliver false information.",
        "solution": "Perform the following to implement the recommended state:\n\nMove the web content to a TLS enabled website, and add an HTTP 'Redirect' directive to the Apache configuration file to redirect to the TLS enabled website similar to the example shown.\n\nRedirect permanent / https://www.cisecurity.org/",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep '^\\\\s*Listen\\\\s+' @HTTPD_CONF_LOCATION@ | /bin/egrep -v '(https|\\\\s443|:443)' | /bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_121": {
        "system": "Linux",
        "description": "7.10 Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled",
        "info": "The TLSv1.0 and TLSv1.1 protocols should be disabled via the 'SSLProtocol' directive. The TLSv1.0 protocol is vulnerable to information disclosure and both protocols lack support for modern cryptographic algorithms including authenticated encryption. The only SSL/TLS protocols that should be allowed is TLSv1.2 along with the new TLSv1.3 protocol when it is supported.\n\nRationale:\n\nThe TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity. All major up-to-date browsers support TLSv1.2, and most recent versions of FireFox and Chrome support the newer TLSv1.3 protocol, since 2017.\n\nThe NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Check if the TLSv1.3 protocol is supported by the Apache server by either checking that the version of OpenSSL is 1.1.1 or later or place the 'TLSv1.3' value in the 'SSLProtocol' string of a configuration file and check the syntax with the 'httpd -t' command before using the file in production. Two examples below are shown of servers that do support the TLSv1.3 protocol.\n\n $ openssl version\n OpenSSL 1.1.1a 20 Nov 2018\n\n ### _(Add TLSv1.3 to the SSLProtocol directive)_\n # httpd -t\n Syntax OK\n\n2. Search the Apache configuration files for the 'SSLProtocol' directive; add the directive, if not present, or change the value to 'TLSv1.2' or 'TLSv1.2 TLSv1.3' if the TLSv1.3 protocol is supported.",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "/etc/httpd/conf.d/ssl.conf",
        "regex": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]+",
        "expect": "^[\\\\s]*[Ss][Ss][Ll][Pp]rotocol[\\\\s]+[Tt][Ll][Ss][Vv]1\\\\.1[\\\\s]+[Tt][Ll][Ss][Vv]1\\\\.2[\\\\s]*$"
    },
    "custom_item_122": {
        "description": "7.11 Ensure HTTP Strict Transport Security Is Enabled - 'httpd.conf Strict-Transport-Security 'max-age=480'",
        "info": "HTTP Strict Transport Security (HSTS) is an optional web server security policy mechanism specified by an HTTP Server header. The HSTS header allows a server declaration that only HTTPS communication should be used rather than clear text HTTP communication.\n\nRationale:\n\nUsage of HTTP Strict Transport Security (HSTS) helps protect HSTS-compliant browsers and other agents from HTTP downgrade attacks. Downgrade attacks include a variety of man-in-the-middle attacks which leave the web communication vulnerable to disclosure and modification by forcing the usage of HTTP rather than HTTPS communication. The 'sslstrip' attack tool by Moxie Marlinspike released in 2009 is one such attack, which works when a server allows both HTTP and HTTPS communication. However, a man-in-the-middle HTTP-to-HTTPS proxy would be effective in cases where the server required HTTPS but did not publish an HSTS policy to the browser. This attack would also be effective on browsers which were not compliant with HSTS. All current up-to-date browsers support HSTS.\n\nThe HSTS header specifies a length of time in seconds that the browser/user agent should access the server only using HTTPS. The header may also specify if all subdomains should also be included in the same policy. Once a compliant browser receives the HSTS header, it will not allow access to the server via HTTP. Therefore, it is important you ensure there is no portion of the web site or web application that requires HTTP prior to enabling the HSTS protocol.\n\nIf all subdomains are to be included via the _includeSubDomains_ option, carefully consider all various hostnames, web applications, and third-party services used to include any DNS CNAME values that may be impacted. An overly broad _includeSubDomains_ policy will disable access to HTTP websites for all websites with the same domain name. Also consider that the access will be disabled for the number of seconds given in the max-age value, so in the event a mistake is made, a large value, such as a year, could create significant support issues. An optional flag of preload may be added if the website name is to be submitted to be preloaded in Chrome, Firefox and Safari browsers. See [https://hstspreload.appspot.com/](https://hstspreload.appspot.com/) for details.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd a 'Header' directive as shown below in the Apache server level configuration and every virtual host that is SSL enabled. The 'includeSubDomains' and 'preload' flags may be included in the header, but are not required.\n\nHeader always set Strict-Transport-Security 'max-age=600; includeSubDomains; preload\n- or -\nHeader always set Strict-Transport-Security 'max-age=600",
        "reference": "800-171|3.13.8,800-53|SC-8(1),800-53r5|SC-8(1),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|2S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|2.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/egrep -o ']*)>' @HTTPD_CONF_LOCATION@ | /bin/sort -u | /bin/sed -e 's/[<>\\\\/]//g' | /bin/awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | /bin/awk -f - @HTTPD_CONF_LOCATION@ | /bin/grep -i '.*strict-transport-security.*'",
        "expect": "^[\\\\s]*[Hh]eader[\\\\s]+[Aa]lways[\\\\s]+[Ss]et[\\\\s]+[Ss]trict-[Tt]ransport-[Ss]ecurity[\\\\s]+\"max-age=(48[0-9]|49[0-9]|[5-9][0-9]{2})\".*"
    },
    "custom_item_123": {
        "description": "7.11 Ensure HTTP Strict Transport Security Is Enabled - 'httpd.conf Strict-Transport-Security configuration'",
        "info": "HTTP Strict Transport Security (HSTS) is an optional web server security policy mechanism specified by an HTTP Server header. The HSTS header allows a server declaration that only HTTPS communication should be used rather than clear text HTTP communication.\n\nRationale:\n\nUsage of HTTP Strict Transport Security (HSTS) helps protect HSTS-compliant browsers and other agents from HTTP downgrade attacks. Downgrade attacks include a variety of man-in-the-middle attacks which leave the web communication vulnerable to disclosure and modification by forcing the usage of HTTP rather than HTTPS communication. The 'sslstrip' attack tool by Moxie Marlinspike released in 2009 is one such attack, which works when a server allows both HTTP and HTTPS communication. However, a man-in-the-middle HTTP-to-HTTPS proxy would be effective in cases where the server required HTTPS but did not publish an HSTS policy to the browser. This attack would also be effective on browsers which were not compliant with HSTS. All current up-to-date browsers support HSTS.\n\nThe HSTS header specifies a length of time in seconds that the browser/user agent should access the server only using HTTPS. The header may also specify if all subdomains should also be included in the same policy. Once a compliant browser receives the HSTS header, it will not allow access to the server via HTTP. Therefore, it is important you ensure there is no portion of the web site or web application that requires HTTP prior to enabling the HSTS protocol.\n\nIf all subdomains are to be included via the _includeSubDomains_ option, carefully consider all various hostnames, web applications, and third-party services used to include any DNS CNAME values that may be impacted. An overly broad _includeSubDomains_ policy will disable access to HTTP websites for all websites with the same domain name. Also consider that the access will be disabled for the number of seconds given in the max-age value, so in the event a mistake is made, a large value, such as a year, could create significant support issues. An optional flag of preload may be added if the website name is to be submitted to be preloaded in Chrome, Firefox and Safari browsers. See [https://hstspreload.appspot.com/](https://hstspreload.appspot.com/) for details.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd a 'Header' directive as shown below in the Apache server level configuration and every virtual host that is SSL enabled. The 'includeSubDomains' and 'preload' flags may be included in the header, but are not required.\n\nHeader always set Strict-Transport-Security 'max-age=600; includeSubDomains; preload\n- or -\nHeader always set Strict-Transport-Security 'max-age=600",
        "reference": "800-171|3.13.8,800-53|SC-8(1),800-53r5|SC-8(1),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|2S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|2.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/bin/sed -n '//p' @HTTPD_CONF_LOCATION@ | /bin/egrep -i 'strict-transport-security'",
        "expect": "^[\\\\s]*[Hh]eader[\\\\s]+[Aa]lways[\\\\s]+[Ss]et[\\\\s]+[Ss]trict-[Tt]ransport-[Ss]ecurity[\\\\s]+\"max-age=(48[0-9]|49[0-9]|[5-9][0-9]{2})\".*"
    },
    "custom_item_124": {
        "system": "Linux",
        "description": "7.12 Ensure Only Cipher Suites That Provide Forward Secrecy Are Enabled",
        "info": "In cryptography, _forward secrecy_ (FS), which is also known as _perfect forward secrecy_ (PFS), is a feature of specific key exchange protocols that give assurance that your session keys will not be compromised even if the private key of the server is compromised. Protocols such as RSA do not provide the forward secrecy, while the protocols 'ECDHE' (Elliptic-Curve Diffie-Hellman Ephemeral) and the 'DHE' (Diffie-Hellman Ephemeral) will provide forward secrecy. The 'ECDHE' is the stronger protocol and should be preferred, while the 'DHE' may be allowed for greater compatibility with older clients. The TLS ciphers should be configured to require either the 'ECDHE' or the 'DHE' ephemeral key exchange, while not allowing other cipher suites.\n\nRationale:\n\nDuring the TLS handshake, after the initial client & server Hello, there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server's public key and sent over the network. However, with protocols such as 'ECDHE' (Elliptic-Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With FS, each session has a unique key exchange, so that future sessions are protected.",
        "solution": "Perform one of the following to implement the recommended state:\n- Add or modify the following line in the Apache server level configuration and every virtual host that is SSL/TLS enabled:\n\n SSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA\n\n- The more recent versions of openssl (such as 1.0.2 and newer) will support the usage of 'ECDHE' as a synonym for EECDH and 'DHE' as a synonym for EDH in the cipher specification. The usage of 'ECDHE' and 'DHE' are preferred so that the specification matches the expected output. So the cipher specification could be:\n\n SSLCipherSuite ECDHE:DHE:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA",
        "reference": "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*.+Strict-Transport-Security[\\\\s]+",
        "expect": "^[\\\\s]*Header[\\\\s]+[Aa]lways[\\\\s]+[Ss]et[\\\\s]+Strict-Transport-Security[\\\\s]+[Mm]ax-[Aa]ge=(4[8-9][0-9]|[5-9][0-9][0-9])[\\\\s]*$"
    },
    "custom_item_125": {
        "system": "Linux",
        "description": "8.1 Ensure ServerTokens is Set to 'Prod' or 'ProductOnly'",
        "info": "Configure the Apache 'ServerTokens' directive to provide minimal information by setting the value to 'Prod' or 'ProductOnly'. The only version information given in the server HTTP response header will be 'Apache' rather than details on modules and versions installed.\n\nRationale:\n\nInformation is power, and identifying web server details greatly increases the efficiency of any attack, as security vulnerabilities are extremely dependent upon specific software versions and configurations. Excessive probing and requests may cause too much 'noise' being generated and may tip off an administrator. If an attacker can accurately target exploits, the chances of successful compromise prior to detection increase dramatically. Script kiddies are constantly scanning the Internet and documenting the version information openly provided by web servers. The purpose of this scanning is to accumulate a database of software installed on those hosts, which can then be used when new vulnerabilities are released.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'ServerTokens' directive as shown below to have the value of 'Prod' or 'ProductOnly':\n\nServerTokens Prod",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|18.9,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss]erver[Tt]okens[\\\\s]+",
        "expect": "^[\\\\s]*[Ss]erver[Tt]okens[\\\\s]+([Pp][Rr][Oo][Dd]|[Pp][Rr][Oo][Dd][Uu][Cc][Tt][Oo][Nn][Ll][Yy])[\\\\s]*$"
    },
    "custom_item_126": {
        "system": "Linux",
        "description": "8.2 Ensure ServerSignature Is Not Enabled",
        "info": "Disable the server signatures, which is the generation of a signature line as a trailing footer at the bottom of server-generated documents such as error pages.\n\nRationale:\n\nServer signatures are helpful when the server is acting as a proxy because they help the user distinguish errors from the proxy rather than the destination server. However, in this context there is no need for the additional information.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'ServerSignature' directive as shown below to have the value of 'Off':\n\nServerSignature Off",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ss]erver[Ss]ignature[\\\\s]+",
        "expect": "^[\\\\s]*[Ss]erver[Ss]ignature[\\\\s]+[Oo][Ff][Ff][\\\\s]*$"
    },
    "custom_item_127": {
        "description": "8.3 Ensure All Default Apache Content Is Removed - 'httpd.conf Include conf/extra/httpd-autoindex.conf does not exists'",
        "info": "In previous recommendations, we have removed default content such as the Apache manuals and default CGI programs. However, if you want to further restrict information leakage about the web server, it is important that default content such as icons are not left on the web server.\n\nRationale:\n\nTo identify the type of web servers and versions software installed, it is common for attackers to scan for icons or special content specific to the server type and version. A simple request like [http://example.com/icons/apache\\_pb2.png](http://example.com/icons/apache_pb2.png) may tell the attacker that the server is Apache 2.2. Many icons are used primarily for auto indexing, which is recommended to be disabled.",
        "solution": "Perform either of the following to implement the recommended state:\n\n1. The default source build places the auto-index and icon configurations in the 'extra/httpd-autoindex.conf' file, so it can be disabled by leaving the include line commented out in the main 'httpd.conf' file, as shown below.\n\n # Fancy directory listings\n #Include conf/extra/httpd-autoindex.conf\n\n2. Alternatively, the icon 'alias' directive and the directory access control configuration can be commented out as shown:\n\n # We include the /icons/ alias for FancyIndexed directory listings. If\n # you do not use FancyIndexing, you may comment this out.\n #\n #Alias /icons/ '/var/www/icons/'\n\n #\n # Options Indexes MultiViews FollowSymLinks\n # AllowOverride None\n # Order allow,deny\n # Allow from all\n #",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ii]nclude[\\\\s]+conf\\\\/extra\\\\/httpd-autoindex\\\\\\.conf[\\\\s]*",
        "expect": "^[\\\\s]*[Ii]nclude[\\\\s]+conf\\\\/extra\\\\/httpd-autoindex\\\\\\.conf[\\\\s]*"
    },
    "custom_item_128": {
        "description": "8.3 Ensure All Default Apache Content Is Removed - 'httpd.conf Alias /icons/ /var/www/icons/ does not exists'",
        "info": "In previous recommendations, we have removed default content such as the Apache manuals and default CGI programs. However, if you want to further restrict information leakage about the web server, it is important that default content such as icons are not left on the web server.\n\nRationale:\n\nTo identify the type of web servers and versions software installed, it is common for attackers to scan for icons or special content specific to the server type and version. A simple request like [http://example.com/icons/apache\\_pb2.png](http://example.com/icons/apache_pb2.png) may tell the attacker that the server is Apache 2.2. Many icons are used primarily for auto indexing, which is recommended to be disabled.",
        "solution": "Perform either of the following to implement the recommended state:\n\n1. The default source build places the auto-index and icon configurations in the 'extra/httpd-autoindex.conf' file, so it can be disabled by leaving the include line commented out in the main 'httpd.conf' file, as shown below.\n\n # Fancy directory listings\n #Include conf/extra/httpd-autoindex.conf\n\n2. Alternatively, the icon 'alias' directive and the directory access control configuration can be commented out as shown:\n\n # We include the /icons/ alias for FancyIndexed directory listings. If\n # you do not use FancyIndexing, you may comment this out.\n #\n #Alias /icons/ '/var/www/icons/'\n\n #\n # Options Indexes MultiViews FollowSymLinks\n # AllowOverride None\n # Order allow,deny\n # Allow from all\n #",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Aa]lias[\\\\s]+\\\\/icons\\\\/[\\\\s]+\"\\\\/var\\\\/www\\\\/icons\\\\/\"[\\\\s]*",
        "expect": "^[\\\\s]*[Aa]lias[\\\\s]+\\\\/icons\\\\/[\\\\s]+\"\\\\/var\\\\/www\\\\/icons\\\\/\"[\\\\s]*"
    },
    "custom_item_129": {
        "system": "Linux",
        "description": "8.4 Ensure ETag Response Header Fields Do Not Include Inodes",
        "info": "The FileETag directive configures the file attributes that are used to create the ETag (entity tag) response header field when the document is based on a static file. The ETag value is used in cache management to save network bandwidth. The value returned may be based on combinations of the file inode, the modification time, and the file size.\n\nRationale:\n\nWhen the FileETag is configured to include the file inode number, a remote attacker may be able to discern the inode number from returned values. The inode is considered sensitive information, as it could be useful in assisting in other attacks.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'FileETag' directive in the server and each virtual host configuration to have the value 'None' or 'MTime Size'.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*FileETag[\\\\s]+.*([Aa]ll|[Ii][Nn]ode).*",
        "expect": "^[\\\\s]*FileETag[\\\\s]+.*([Aa]ll|[Ii][Nn]ode).*"
    },
    "custom_item_130": {
        "system": "Linux",
        "description": "9.1 Ensure the TimeOut Is Set Properly",
        "info": "The 'TimeOut' directive controls the maximum time in seconds that Apache HTTP server will wait for an Input/Output call to complete. It is recommended that the 'TimeOut' directive be set to '10' or less.\n\nRationale:\n\nOne common technique for DoS is to initiate many connections to the server. By decreasing the timeout for old connections, the server can free resources more quickly and be more responsive. By making the server more efficient, it will be more resilient to DoS conditions.\n\n**Important Notice**: There is a slow form of DoS attack not adequately mitigated by these control, such as the Slow Loris DoS attack of June 2009 [http://ha.ckers.org/slowloris/](http://ha.ckers.org/slowloris/). Upgrading to Apache 2.4 is recommended.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'Timeout' directive in the Apache configuration files to have a value of '10' seconds or less.\n\nTimeout 10",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Tt]imeout[\\\\s]+",
        "expect": "^[\\\\s]*[Tt]imeout[\\\\s]+(10|[1-9])[\\\\s]*$"
    },
    "custom_item_131": {
        "system": "Linux",
        "description": "9.2 Ensure KeepAlive Is Enabled",
        "info": "The 'KeepAlive' directive controls whether Apache will reuse the same TCP connection per client to process subsequent HTTP requests from that client. It is recommended that the 'KeepAlive' directive be set to 'On'.\n\nRationale:\n\nAllowing per-client reuse of TCP sockets reduces the amount of system and network resources required to serve requests. This efficiency gain may improve a server's resiliency to DoS attacks.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'KeepAlive' directive in the Apache configuration to have a value of 'On'.\n\nKeepAlive On",
        "reference": "800-171|3.1.11,800-53|AC-12,800-53r5|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv6|9,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,LEVEL|2S,NIAv2|NS49",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Kk]eep[Aa]live[\\\\s]+",
        "expect": "^[\\\\s]*[Kk]eep[Aa]live[\\\\s]+[Oo][Nn][\\\\s]*$"
    },
    "custom_item_132": {
        "system": "Linux",
        "description": "9.3 Ensure MaxKeepAliveRequests Is Set Properly",
        "info": "The 'MaxKeepAliveRequests' directive limits the number of requests allowed per connection when 'KeepAlive' is on. If it is set to '0', unlimited requests will be allowed. It is recommended that the 'MaxKeepAliveRequests' directive be set to '100' or greater.\n\nRationale:\n\nLimiting the number of requests per connection may improve a server's resiliency to DoS attacks.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'MaxKeepAliveRequests' directive in the Apache configuration to have a value of '100' or more.\n\nMaxKeepAliveRequests 100",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Mm]ax[Kk]eep[Aa]live[Rr]equests[\\\\s]+",
        "expect": "^[\\\\s]*[Mm]ax[Kk]eep[Aa]live[Rr]equests[\\\\s]+[1-9][0-9][0-9]+[\\\\s]*$"
    },
    "custom_item_133": {
        "system": "Linux",
        "description": "9.4 Ensure the KeepAliveTimeout Is Set Properly",
        "info": "The 'KeepAliveTimeout' directive specifies the number of seconds Apache will wait for a subsequent request before closing a connection that is being kept alive.\n\nRationale:\n\nReducing the number of seconds that Apache HTTP server will keep unused resources allocated will increase the availability of resources to serve other requests. This efficiency gain may improve a server's resiliency to DoS attacks.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'KeepAliveTimeout' directive in the Apache configuration to have a value of '15' or less.\n\nKeepAliveTimeout 15",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Kk]eep[Aa]live[Tt]imeout[\\\\s]+",
        "expect": "^[\\\\s]*[Kk]eep[Aa]live[Tt]imeout[\\\\s]+(1[0-5]|[1-9])[\\\\s]*$"
    },
    "custom_item_134": {
        "system": "Linux",
        "description": "9.5 Ensure the Timeout Limits for Request Headers is Set to 40 or Less - mod_reqtimeout",
        "info": "The 'RequestReadTimeout' directive allows configuration of timeout limits for client requests. The header portion of the directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of '40' seconds or less. Keep in mind that for SSL/TLS virtual hosts, the time for the TLS handshake must fit within the timeout.\n\nRationale:\n\nSetting a request header timeout is vital for mitigating DoS attacks based on slow requests. The slow request attacks are particularly lethal and relative easy to perform, because they require very little bandwidth and can easily be done through anonymous proxies. These attacks started in June 2009 with the Slow Loris DoS attack, which used a slow 'GET' request, as published by Robert Hansen (RSnake) on his blog [http://ha.ckers.org/slowloris/](http://ha.ckers.org/slowloris/). Later in November 2010 at the OWASP App Sec DC conference, Wong Onn Chee demonstrated a slow POST request attack which was even more effective. For details, see: [https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t](https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t)",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_requesttimeout' module in the Apache configuration with the following.\n\n LoadModule reqtimeout_module modules/mod_reqtimeout.so\n\n2. Add a 'RequestReadTimeout' directive similar to the one below with the maximum request header timeout value of '40' seconds or less.\n\n RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'reqtimeout_module'",
        "expect": "^[\\\\s]*reqtimeout_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_135": {
        "system": "Linux",
        "description": "9.5 Ensure the Timeout Limits for Request Headers is Set to 40 or Less - RequestReadTimeout",
        "info": "The 'RequestReadTimeout' directive allows configuration of timeout limits for client requests. The header portion of the directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of '40' seconds or less. Keep in mind that for SSL/TLS virtual hosts, the time for the TLS handshake must fit within the timeout.\n\nRationale:\n\nSetting a request header timeout is vital for mitigating DoS attacks based on slow requests. The slow request attacks are particularly lethal and relative easy to perform, because they require very little bandwidth and can easily be done through anonymous proxies. These attacks started in June 2009 with the Slow Loris DoS attack, which used a slow 'GET' request, as published by Robert Hansen (RSnake) on his blog [http://ha.ckers.org/slowloris/](http://ha.ckers.org/slowloris/). Later in November 2010 at the OWASP App Sec DC conference, Wong Onn Chee demonstrated a slow POST request attack which was even more effective. For details, see: [https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t](https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t)",
        "solution": "Perform the following to implement the recommended state:\n1. Load the 'mod_requesttimeout' module in the Apache configuration with the following.\n\n LoadModule reqtimeout_module modules/mod_reqtimeout.so\n\n2. Add a 'RequestReadTimeout' directive similar to the one below with the maximum request header timeout value of '40' seconds or less.\n\n RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Rr]equest[Rr]ead[Tt]imeout[\\\\s]+",
        "expect": "^[\\\\s]*[Rr]equest[Rr]ead[Tt]imeout[\\\\s]+[Hh]eader=20-(40|[1-3][0-9]|[1-9]),[Mm]in[Rr]ate=500[\\\\s]+[Bb]ody=(20|1[1-9]),[Mm]in[Rr]ate=500[\\\\s]*$"
    },
    "custom_item_136": {
        "system": "Linux",
        "description": "9.6 Ensure Timeout Limits for the Request Body Are Set Properly - mod_reqtimeout",
        "info": "The 'RequestReadTimeout' directive allows setting timeout values for the body portion of a request. The directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of '20' seconds or less.\n\nRationale:\n\nIt is not sufficient to timeout only on the header portion of the request, as the server will still be vulnerable to attacks like the OWASP Slow 'POST' attack, which provide the body of the request very slowly. Therefore, the body portion of the request must have a timeout as well. A timeout of '20' seconds or less is recommended.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_requesttimeout' module in the Apache configuration with the following.\n\n LoadModule reqtimeout_module modules/mod_reqtimeout.so\n\n2. Add a 'RequestReadTimeout' directive similar to the one below with the maximum request body timeout value of '20' seconds or less.\n\n\tRequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "@HTTPD_LOCATION@ -M | /bin/grep 'reqtimeout_module'",
        "expect": "^[\\\\s]*reqtimeout_module[\\\\s]*\\\\((shared|static)\\\\)[\\\\s]*$"
    },
    "custom_item_137": {
        "system": "Linux",
        "description": "9.6 Ensure Timeout Limits for the Request Body Are Set Properly - RequestReadTimeout",
        "info": "The 'RequestReadTimeout' directive allows setting timeout values for the body portion of a request. The directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of '20' seconds or less.\n\nRationale:\n\nIt is not sufficient to timeout only on the header portion of the request, as the server will still be vulnerable to attacks like the OWASP Slow 'POST' attack, which provide the body of the request very slowly. Therefore, the body portion of the request must have a timeout as well. A timeout of '20' seconds or less is recommended.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Load the 'mod_requesttimeout' module in the Apache configuration with the following.\n\n LoadModule reqtimeout_module modules/mod_reqtimeout.so\n\n2. Add a 'RequestReadTimeout' directive similar to the one below with the maximum request body timeout value of '20' seconds or less.\n\n\tRequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Rr]equest[Rr]ead[Tt]imeout[\\\\s]+",
        "expect": "^[\\\\s]*[Rr]equest[Rr]ead[Tt]imeout[\\\\s]+[Hh]eader=20-(40|[1-3][0-9]),[Mm]in[Rr]ate=500[\\\\s]+[Bb]ody=(20|1[1-9]),[Mm]in[Rr]ate=500[\\\\s]*$"
    },
    "custom_item_138": {
        "description": "10.1 Ensure the LimitRequestLine directive is Set to 512 or less",
        "info": "Buffer Overflow attacks attempt to exploit an application by providing more data than the application buffer can contain. If the application allows copying data to the buffer to overflow the boundaries of the buffer, then the application is vulnerable to a buffer overflow. The results of Buffer overflow vulnerabilities vary, and may result in the application crashing, or may allow the attacker to execute instructions provided in the data. The Apache 'LimitRequest*' directives allow the Apache web server to limit the sizes of requests and request fields and can be used to help protect programs and applications processing those requests.\n\nSpecifically, the 'LimitRequestLine' directive limits the allowed size of a client's HTTP request-line, which consists of the HTTP method, URI, and protocol version.\n\nRationale:\n\nThe limiting of the size of the request line is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directive is available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'LimitRequestLine' directive in the Apache configuration to have a value of '512' or less.\n\nLimitRequestLine 512",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]imit[Rr]equest[Ll]ine[\\\\s]*",
        "expect": "^[\\\\s]*[Ll]imit[Rr]equest[Ll]ine[\\\\s]+(51[0-2]|50[0-9]|[1-4][0-9][0-9]|[1-9][0-9]|[1-9])[\\\\s]*$"
    },
    "custom_item_139": {
        "description": "10.2 Ensure the LimitRequestFields Directive is Set to 100 or Less",
        "info": "The 'LimitRequestFields' directive limits the number of fields allowed in an HTTP request.\n\nRationale:\n\nThe limiting of the number of fields is helpful so that the web server can prevent an unexpectedly high number of fields from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'LimitRequestFields' directive in the Apache configuration to have a value of '100' or less. If the directive is not present, the default depends on a compile time configuration, but defaults to a value of '100'.\n\nLimitRequestFields 100",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]imit[Rr]equest[Ff]ields[\\\\s]+",
        "expect": "^[\\\\s]*[Ll]imit[Rr]equest[Ff]ields[\\\\s]+(100|[1-9][0-9]|[1-9])[\\\\s]*$"
    },
    "custom_item_140": {
        "description": "10.3 Ensure the LimitRequestFieldsize Directive is Set to 1024 or Less",
        "info": "The 'LimitRequestFieldSize' directive sets the maximum size of an HTTP request header field. It is recommended that the 'LimitRequestFieldSize' directive be set to '1024' or less.\n\nRationale:\n\nBy limiting of the size of request headers is helpful so that the web server can prevent an unexpectedly long or large value from being passed to exploit a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'LimitRequestFieldSize' directive in the Apache configuration to have a value of '1024' or less.\n\nLimitRequestFieldsize 1024",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]imit[Rr]equest[Ff]ieldsize[\\\\s]*",
        "expect": "^[\\\\s]*[Ll]imit[Rr]equest[Ff]ieldsize[\\\\s]+(102[0-4]|10[0-1][0-9]|[1-9][0-9][0-9]|[1-9][0-9]|[1-9])[\\\\s]*$"
    },
    "custom_item_141": {
        "description": "10.4 Ensure the LimitRequestBody Directive is Set to 102400 or Less",
        "info": "The 'LimitRequestBody' directive limits the number of bytes that are allowed in a request body. Size of requests may vary greatly; for example, during a file upload the size of the file must fit within this limit.\n\nRationale:\n\nThe limiting of the size of the request body is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. The 'LimitRequestBody' may be configured on a per directory, or per location context.\nPlease read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
        "solution": "Perform the following to implement the recommended state:\n\nAdd or modify the 'LimitRequestBody' directive in the Apache configuration to have a value of '102400' (100K) or less. Please read the Apache documentation so it is understood this directive will limit the size of file uploads to the web server.\n\nLimitRequestBody 102400",
        "reference": "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "@HTTPD_CONF_LOCATION@",
        "regex": "^[\\\\s]*[Ll]imit[Rr]equest[Bb]ody[\\\\s]*",
        "expect": "^[\\\\s]*[Ll]imit[Rr]equest[Bb]ody[\\\\s]+(102400|102[1-3][0-9][0-9]|10[0-1][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9]|[1-9])[\\\\s]*$"
    },
    "custom_item_142": {
        "description": "11.1 Ensure SELinux Is Enabled in Enforcing Mode",
        "info": "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.\n\nRationale:\n\nWeb applications and services continue to be one of the leading attack vectors for black-hat criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted.",
        "solution": "Perform the following to implement the recommended state:\n\nIf SELinux is not enabled in the configuration file, edit the file '/etc/selinux/config' and set the value of SELINUX as 'enforcing'. Reboot the system for the new configuration to be effective.\n\nSELINUX=enforcing\n\nIf the current mode is not 'enforcing' and an immediate reboot is not possible, the current mode can be set to 'enforcing' with the command shown below.\n\n# setenforce 1",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "file": "/etc/selinux/config",
        "regex": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=",
        "expect": "^[\\\\s]*[sS][eE][lL][iI][nN][uU][xX][\\\\s]*=[\\\\s]*[eE][nN][fF][oO][rR][cC][iI][nN][gG][\\\\s]*$"
    },
    "custom_item_143": {
        "description": "11.2 Ensure Apache Processes Run in the httpd_t Confined Context - apachectl",
        "info": "SELinux includes customizable targeted policies that may be used to confine the Apache httpd server to enforce least privileges so the httpd server has only the minimal access to specified directories, files, and network ports. Access is controlled by process types (domains) defined for the httpd process. There are over a hundred individual httpd related types defined in a default Apache SELinux policy, which includes many of the common Apache add-ons and applications such as php, nagios, and smokeping. The default SELinux policies work well for a default Apache installation, but implementation of SELinux targeted policies on a complex or highly customized web server requires a rather significant development and testing effort which comprehends both the workings of SELinux and the detailed operations and requirements of the web application.\n\nAll directories and files to be accessed by the web server process must have security labels with appropriate types. The following types are a sample of the most commonly used:\n- 'http_port_t' - Network ports allowed for listening\n- 'httpd_sys_content_t' - Read access to directories and files with web content\n- 'httpd_log_t' - Directories and files to be used for writable log data\n- 'httpd_sys_script_exec_t' - Directories and files for executable content.\n\nRationale:\n\nWith the proper implementation of SELinux, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled as 'httpd_sys_content_t'. Likewise, writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux.",
        "solution": "Perform the following to implement the recommended state:\n\nIf the running httpd processes are not confined to the 'httpd_t' SELinux context, check the context for the httpd binary and the 'apachectl' binary, and set the httpd binary to have a context of 'httpd_exec_t' and the 'apachectl' executable to have a context of 'initrc_exec_t', as shown below. Also note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd.\n\n# ls -alZ /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl\n-rwxr-xr-x. root root system_u:object_r:initrc_exec_t:s0 /usr/sbin/apachectl\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.worker\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.event\n\nIf the executable files are not labeled correctly, they may be relabeled with the 'chcon' command, as shown; however, the file system labeling is based on the SELinux file context policies, and the file systems will on some occasions be relabeled according to the policy.\n\n# chcon -t initrc_exec_t /usr/sbin/apachectl\n# chcon -t httpd_exec_t /usr/sbin/httpd /usr/sbin/httpd.*\n\nSince the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with the 'semanage fcontext -l' option. If the policy is not present, add the pattern to the policy using the '-a' option. The 'restorecon' command shown below will restore the file context label according to the current policy, and is required if a pattern was added.\n\n# ### Check the Policy\n# semanage fcontext -l | fgrep 'apachectl'\n# /usr/sbin/apachectl regular file system_u:object_r:initrc_exec_t:s0\n# semanage fcontext -l | fgrep '/usr/sbin/httpd'\n# /usr/sbin/httpd regular file system_u:object_r:httpd_exec_t:s0\n# /usr/sbin/httpd.worker regular file system_u:object_r:httpd_exec_t:s0\n# /usr/sbin/httpd.event regular file system_u:object_r:httpd_exec_t:s0\n# ### Add to the policy, if not present\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd'\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.worker'\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.event'\n# semanage fcontext -f -- -a -t initrc_exec_t /usr/sbin/apachectl\n\n# ### Restore the file labeling accord to the SELinux policy\n# restorecon -v /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "ls -lZ @APACHECTL_LOCATION@",
        "expect": ":initrc_exec_t:.* @APACHECTL_LOCATION@"
    },
    "custom_item_144": {
        "description": "11.2 Ensure Apache Processes Run in the httpd_t Confined Context - httpd",
        "info": "SELinux includes customizable targeted policies that may be used to confine the Apache httpd server to enforce least privileges so the httpd server has only the minimal access to specified directories, files, and network ports. Access is controlled by process types (domains) defined for the httpd process. There are over a hundred individual httpd related types defined in a default Apache SELinux policy, which includes many of the common Apache add-ons and applications such as php, nagios, and smokeping. The default SELinux policies work well for a default Apache installation, but implementation of SELinux targeted policies on a complex or highly customized web server requires a rather significant development and testing effort which comprehends both the workings of SELinux and the detailed operations and requirements of the web application.\n\nAll directories and files to be accessed by the web server process must have security labels with appropriate types. The following types are a sample of the most commonly used:\n- 'http_port_t' - Network ports allowed for listening\n- 'httpd_sys_content_t' - Read access to directories and files with web content\n- 'httpd_log_t' - Directories and files to be used for writable log data\n- 'httpd_sys_script_exec_t' - Directories and files for executable content.\n\nRationale:\n\nWith the proper implementation of SELinux, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled as 'httpd_sys_content_t'. Likewise, writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux.",
        "solution": "Perform the following to implement the recommended state:\n\nIf the running httpd processes are not confined to the 'httpd_t' SELinux context, check the context for the httpd binary and the 'apachectl' binary, and set the httpd binary to have a context of 'httpd_exec_t' and the 'apachectl' executable to have a context of 'initrc_exec_t', as shown below. Also note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd.\n\n# ls -alZ /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl\n-rwxr-xr-x. root root system_u:object_r:initrc_exec_t:s0 /usr/sbin/apachectl\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.worker\n-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.event\n\nIf the executable files are not labeled correctly, they may be relabeled with the 'chcon' command, as shown; however, the file system labeling is based on the SELinux file context policies, and the file systems will on some occasions be relabeled according to the policy.\n\n# chcon -t initrc_exec_t /usr/sbin/apachectl\n# chcon -t httpd_exec_t /usr/sbin/httpd /usr/sbin/httpd.*\n\nSince the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with the 'semanage fcontext -l' option. If the policy is not present, add the pattern to the policy using the '-a' option. The 'restorecon' command shown below will restore the file context label according to the current policy, and is required if a pattern was added.\n\n# ### Check the Policy\n# semanage fcontext -l | fgrep 'apachectl'\n# /usr/sbin/apachectl regular file system_u:object_r:initrc_exec_t:s0\n# semanage fcontext -l | fgrep '/usr/sbin/httpd'\n# /usr/sbin/httpd regular file system_u:object_r:httpd_exec_t:s0\n# /usr/sbin/httpd.worker regular file system_u:object_r:httpd_exec_t:s0\n# /usr/sbin/httpd.event regular file system_u:object_r:httpd_exec_t:s0\n# ### Add to the policy, if not present\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd'\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.worker'\n# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.event'\n# semanage fcontext -f -- -a -t initrc_exec_t /usr/sbin/apachectl\n\n# ### Restore the file labeling accord to the SELinux policy\n# restorecon -v /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "ls -lZ @HTTPD_LOCATION@",
        "expect": ":httpd_exec_t:.* @HTTPD_LOCATION@"
    },
    "custom_item_145": {
        "description": "11.3 Ensure the httpd_t Type Is Not in Permissive Mode",
        "info": "In addition to setting the entire SELinux configuration in permissive mode, it is possible to set individual process types (domains) such as 'httpd_t' into permissive mode as well. Permissive mode will not prevent any access or actions; instead, any actions that would have been denied are simply logged.\n\nRationale:\n\nUsage of permissive mode is helpful for testing and ensuring that SELinux will not prevent access that is necessary for the proper function of a web application. However, all access is allowed in permissive mode by SELinux.",
        "solution": "Perform the following to implement the recommended state:\n\nIf the 'httpd_t' type is in permissive mode, the customized permissive mode should be deleted with the following 'semanage' command.\n\n# semanage permissive -d httpd_t",
        "reference": "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/semodule -l | /bin/egrep 'permissive_httpd_t' | /bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    },
    "custom_item_146": {
        "description": "11.4 Ensure Only the Necessary SELinux Booleans Are Enabled",
        "info": "SELinux booleans allow or disallow behavior specific to the Apache web server. Common examples include whether CGI execution is allowed, or if the httpd server is allowed to communicate with the current terminal ('tty'). Communication with the terminal may be necessary for entering a passphrase during startup to decrypt a private key.\n\nRationale:\n\nEnabling only the necessary httpd related booleans provides a defense in depth approach that will deny actions that are not in use or expected.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "Perform the following to implement the recommended state:\n\nTo disable the SELinux httpd booleans that are determined to be unnecessary, use the 'setsebool' command as shown below with the '-P' option to make the change persistent.\n\n# setsebool -P httpd_enable_cgi off\n# getsebool httpd_enable_cgi\nhttpd_enable_cgi --> off",
        "reference": "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|18,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/getsebool -a | /bin/grep httpd_ | /bin/grep '> on'"
    },
    "custom_item_147": {
        "description": "Ubuntu is installed",
        "cmd": "/usr/bin/lsb_release -a",
        "expect": "Description:[\\\\s]+Ubuntu[\\\\s]"
    },
    "custom_item_148": {
        "system": "Linux",
        "description": "12.1 Ensure the AppArmor Framework Is Enabled",
        "info": "AppArmor is a Linux kernel security module that provides a named based mandatory access control with security policies. AppArmor can enforce rules on programs for file access and network connections and restrict actions based on defined policies.\n\nRationale:\n\nWeb applications and web services continue to be one of the leading attack vectors for criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The AppArmor mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted.",
        "solution": "Perform the following to implement the recommended state:\n\n- If the 'aa-status' command is not found, then the AppArmor package is not installed and needs to be installed using the appropriate Linux distribution package management. For example:\n\n # apt-get install apparmor\n # apt-get install libapache2-mod-apparmor\n\n- To enable the AppArmor framework, run the 'init.d' script as shown below.\n\n # /etc/init.d/apparmor start",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/aa-status",
        "expect": "^[\\\\s]*apparmor[\\\\s]+module[\\\\s]+is[\\\\s]+loaded"
    },
    "custom_item_149": {
        "system": "Linux",
        "description": "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode",
        "info": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.\n\nRationale:\n\nThe complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.",
        "solution": "Perform the following to implement the recommended state:\n\n1. Set the profile state to enforce mode.\n\n # aa-enforce apache2\n Setting /usr/sbin/apache2 to enforce mode.\n\n2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.\n\n # service apache2 stop\n * Stopping web server apache2\n # service apache2 status\n * apache2 is not running\n\n3. Restart the Apache service.\n\n # service apache2 start\n * Starting web server apache2",
        "reference": "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3",
        "see_also": "https://workbench.cisecurity.org/files/2378",
        "cmd": "/usr/sbin/aa-unconfined --paranoid | /bin/grep apache2 | /usr/bin/awk '{print} END {if (NR == 0) print \"none\"}'",
        "expect": "none"
    }
}