{
    "custom_item_1": {
        "description": "1.1 Ensure that Corporate Login Credentials are Used",
        "info": "Use corporate login credentials instead of consumer accounts, such as Gmail accounts.\n\nRationale:\n\nIt is recommended fully-managed corporate Google accounts be used for increased visibility, auditing, and controlling access to Cloud Platform resources. Email accounts based outside of the user's organization, such as consumer accounts, should not be used for business purposes.\n\nImpact:\n\nThere will be increased overhead as maintaining accounts will now be required. For smaller organizations, this will not be an issue, but will balloon with size.",
        "solution": "Remove all consumer Google accounts from IAM policies. Follow the documentation and setup corporate login accounts.\nPrevention:\nTo ensure that no email addresses outside the organization can be granted IAM permissions to its Google Cloud projects, folders or organization, turn on the Organization Policy for Domain Restricted Sharing. Learn more at: https://cloud.google.com/resource-manager/docs/organization-policy/restricting-domains\n\nDefault Value:\n\nBy default, no email addresses outside the organization's domain have access to its Google Cloud deployments, but any user email account can be added to the IAM policy for Google Cloud Platform projects, folders, or organizations.",
        "reference": "800-171|3.1.1,800-53|AC-2(1),800-53r5|AC-2(1),CN-L3|7.1.3.2(d),CSCv7|16.2,CSCv8|5.6,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2(1),LEVEL|1M,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listProjectIAM",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.bindings[] | .role as $role | .members[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Role: \\($role), Member: \\(.)\"",
        "regex": "Member: user:",
        "expect": "Member: user:.*@ORGANIZATION_DOMAIN@"
    },
    "custom_item_2": {
        "description": "1.4 Ensure That There Are Only GCP-Managed Service Account Keys for Each Service Account",
        "info": "User-managed service accounts should not have user-managed keys.\n\nRationale:\n\nAnyone who has access to the keys will be able to access resources through the service account. GCP-managed keys are used by Cloud Platform services such as App Engine and Compute Engine. These keys cannot be downloaded. Google will keep the keys and automatically rotate them on an approximately weekly basis. User-managed keys are created, downloadable, and managed by users. They expire 10 years from creation.\n\nFor user-managed keys, the user has to take ownership of key management activities which include:\n\nKey storage\n\nKey distribution\n\nKey revocation\n\nKey rotation\n\nProtecting the keys from unauthorized users\n\nKey recovery\n\nEven with key owner precautions, keys can be easily leaked by common development malpractices like checking keys into the source code or leaving them in the Downloads directory, or accidentally leaving them on support blogs/channels.\n\nIt is recommended to prevent user-managed service account keys.\n\nImpact:\n\nDeleting user-managed service account keys may break communication with the applications using the corresponding keys.",
        "solution": "From Google Cloud Console\n\nGo to the IAM page in the GCP Console using https://console.cloud.google.com/iam-admin/iam\n\nIn the left navigation pane, click Service accounts. All service accounts and their corresponding keys are listed.\n\nClick the service account.\n\nClick the edit and delete the keys.\n\nFrom Google Cloud CLI\nTo delete a user managed Service Account Key,\n\ngcloud iam service-accounts keys delete --iam-account=Prevention:\nYou can disable service account key creation through the Disable service account key creation Organization policy by visiting https://console.cloud.google.com/iam-admin/orgpolicies/iam-disableServiceAccountKeyCreation. Learn more at: https://cloud.google.com/resource-manager/docs/organization-policy/restricting-service-accounts\nIn addition, if you do not need to have service accounts in your project, you can also prevent the creation of service accounts through the Disable service account creation Organization policy: https://console.cloud.google.com/iam-admin/orgpolicies/iam-disableServiceAccountCreation.\n\nDefault Value:\n\nBy default, there are no user-managed keys created for user-managed service accounts.",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53r5|IA-5,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listIamServiceAccountKeys",
        "json_transform": ".projects[].value.accounts[].value.keys[] | select(.keyType == \"USER_MANAGED\") | \"Type: \\(.keyType), Name: \\(.name)\"",
        "regex": "Type: USER_MANAGED",
        "not_expect": "Name: .*\\.iam\\.gserviceaccount\\.com/keys/"
    },
    "custom_item_3": {
        "description": "1.5 Ensure That Service Account Has No Admin Privileges",
        "info": "A service account is a special Google account that belongs to an application or a VM, instead of to an individual end-user. The application uses the service account to call the service's Google API so that users aren't directly involved. It's recommended not to use admin access for ServiceAccount.\n\nRationale:\n\nService accounts represent service-level security of the Resources (application or a VM) which can be determined by the roles assigned to it. Enrolling ServiceAccount with Admin rights gives full access to an assigned application or a VM. A ServiceAccount Access holder can perform critical actions like delete, update change settings, etc. without user intervention. For this reason, it's recommended that service accounts not have Admin rights.\n\nImpact:\n\nRemoving *Admin or *admin or Editor or Owner role assignments from service accounts may break functionality that uses impacted service accounts. Required role(s) should be assigned to impacted service accounts in order to restore broken functionalities.",
        "solution": "From Google Cloud Console\n\nGo to IAM & admin/IAM using https://console.cloud.google.com/iam-admin/iam\n\nUnder the IAM Tab look for VIEW BY PRINCIPALS\n\nFilter PRINCIPALS using type : Service account\n\nLook for the Service Account with the Principal nomenclature: SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com\n\nIdentify User-Managed user created service account with roles containing *Admin or *admin or role matching Editor or role matching Owner under Role Column.\n\nClick on Edit (Pencil Icon) for the Service Account, it will open all the roles which are assigned to the Service Account.\n\nClick the Delete bin icon to remove the role from the Principal (service account in this case)\n\nFrom Google Cloud CLI\n\ngcloud projects get-iam-policy PROJECT_ID --format json > iam.json\n\nUsing a text editor, Remove Role which contains roles/*Admin or roles/*admin or matched roles/editor or matches 'roles/owner'. Add a role to the bindings array that defines the group members and the role for those members.\n\nFor example, to grant the role roles/appengine.appViewer to the ServiceAccount which is roles/editor, you would change the example shown below as follows:\n\n{\n'bindings': [\n{\n   'members': [\n     'serviceAccount:our-project-123@appspot.gserviceaccount.com',\n    ],\n    'role': 'roles/appengine.appViewer'\n},\n{\n    'members': [\n     'user:email1@gmail.com'\n    ],\n    'role': 'roles/owner'\n   },\n{\n    'members': [\n      'serviceAccount:our-project-123@appspot.gserviceaccount.com',\n      'serviceAccount:123456789012-compute@developer.gserviceaccount.com'\n    ],\n    'role': 'roles/editor'\n}\n],\n'etag': 'BwUjMhCsNvY='\n}\n\nUpdate the project's IAM policy:\n\ngcloud projects set-iam-policy PROJECT_ID iam.json\n\nDefault Value:\n\nUser Managed (and not user-created) default service accounts have the Editor (roles/editor) role assigned to them to support GCP services they offer.\n\nBy default, there are no roles assigned to User Managed User created service accounts.",
        "reference": "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listProjectIAM",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.bindings[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Member: \\(.members[]), Role: \\(.role)\"",
        "regex": "Member: serviceAccount:.*\\.iam\\.gserviceaccount\\.com",
        "not_expect": "Role: roles/.*(admin|editor|owner)"
    },
    "custom_item_4": {
        "description": "1.6 Ensure That IAM Users Are Not Assigned the Service Account User or Service Account Token Creator Roles at Project Level",
        "info": "It is recommended to assign the Service Account User (iam.serviceAccountUser) and Service Account Token Creator (iam.serviceAccountTokenCreator) roles to a user for a specific service account rather than assigning the role to a user at project level.\n\nRationale:\n\nA service account is a special Google account that belongs to an application or a virtual machine (VM), instead of to an individual end-user. Application/VM-Instance uses the service account to call the service's Google API so that users aren't directly involved. In addition to being an identity, a service account is a resource that has IAM policies attached to it. These policies determine who can use the service account.\n\nUsers with IAM roles to update the App Engine and Compute Engine instances (such as App Engine Deployer or Compute Instance Admin) can effectively run code as the service accounts used to run these instances, and indirectly gain access to all the resources for which the service accounts have access. Similarly, SSH access to a Compute Engine instance may also provide the ability to execute code as that instance/Service account.\n\nBased on business needs, there could be multiple user-managed service accounts configured for a project. Granting the iam.serviceAccountUser or iam.serviceAccountTokenCreator roles to a user for a project gives the user access to all service accounts in the project, including service accounts that may be created in the future. This can result in elevation of privileges by using service accounts and corresponding Compute Engine instances.\n\nIn order to implement least privileges best practices, IAM users should not be assigned the Service Account User or Service Account Token Creator roles at the project level. Instead, these roles should be assigned to a user for a specific service account, giving that user access to the service account. The Service Account User allows a user to bind a service account to a long-running job service, whereas the Service Account Token Creator role allows a user to directly impersonate (or assert) the identity of a service account.\n\nImpact:\n\nAfter revoking Service Account User or Service Account Token Creator roles at the project level from all impacted user account(s), these roles should be assigned to a user(s) for specific service account(s) according to business needs.",
        "solution": "From Google Cloud Console\n\nGo to the IAM page in the GCP Console by visiting: https://console.cloud.google.com/iam-admin/iam.\n\nClick on the filter table text bar. Type Role: Service Account User\n\nClick the Delete Bin icon in front of the role Service Account User for every user listed as a result of a filter.\n\nClick on the filter table text bar. Type Role: Service Account Token Creator\n\nClick the Delete Bin icon in front of the role Service Account Token Creator for every user listed as a result of a filter.\n\nFrom Google Cloud CLI\n\nUsing a text editor, remove the bindings with the roles/iam.serviceAccountUser or roles/iam.serviceAccountTokenCreator.\n\nFor example, you can use the iam.json file shown below as follows:\n\n{\n'bindings': [\n{\n   'members': [\n     'serviceAccount:our-project-123@appspot.gserviceaccount.com',\n    ],\n    'role': 'roles/appengine.appViewer'\n},\n{\n    'members': [\n     'user:email1@gmail.com'\n    ],\n    'role': 'roles/owner'\n   },\n{\n    'members': [\n      'serviceAccount:our-project-123@appspot.gserviceaccount.com',\n      'serviceAccount:123456789012-compute@developer.gserviceaccount.com'\n    ],\n    'role': 'roles/editor'\n}\n],\n'etag': 'BwUjMhCsNvY='\n    }\n\nUpdate the project's IAM policy:\n\ngcloud projects set-iam-policy PROJECT_ID iam.json\n\nDefault Value:\n\nBy default, users do not have the Service Account User or Service Account Token Creator role assigned at project level.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listProjectIAM",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.bindings[] | .role as $role | .members[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Role: \\($role), Member: \\(.)\"",
        "regex": "Member: user",
        "not_expect": "Role: roles/iam.(serviceAccountUser|serviceAccountTokenCreator)"
    },
    "custom_item_5": {
        "description": "1.7 Ensure User-Managed/External Keys for Service Accounts Are Rotated Every 90 Days or Fewer",
        "info": "Service Account keys consist of a key ID (Private_key_Id) and Private key, which are used to sign programmatic requests users make to Google cloud services accessible to that particular service account. It is recommended that all Service Account keys are regularly rotated.\n\nRationale:\n\nRotating Service Account keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Service Account keys should be rotated to ensure that data cannot be accessed with an old key that might have been lost, cracked, or stolen.\n\nEach service account is associated with a key pair managed by Google Cloud Platform (GCP). It is used for service-to-service authentication within GCP. Google rotates the keys daily.\n\nGCP provides the option to create one or more user-managed (also called external key pairs) key pairs for use from outside GCP (for example, for use with Application Default Credentials). When a new key pair is created, the user is required to download the private key (which is not retained by Google). With external keys, users are responsible for keeping the private key secure and other management operations such as key rotation. External keys can be managed by the IAM API, gcloud command-line tool, or the Service Accounts page in the Google Cloud Platform Console. GCP facilitates up to 10 external service account keys per service account to facilitate key rotation.\n\nImpact:\n\nRotating service account keys will break communication for dependent applications. Dependent applications need to be configured manually with the new key ID displayed in the Service account keys section and the private key downloaded by the user.",
        "solution": "From Google Cloud Console\nDelete any external (user-managed) Service Account Key older than 90 days:\n\nGo to APIs & Services\\Credentials using https://console.cloud.google.com/apis/credentials\n\nIn the Section Service Account Keys, for every external (user-managed) service account key where creation date is greater than or equal to the past 90 days, click Delete Bin Icon to Delete Service Account key\n\nCreate a new external (user-managed) Service Account Key for a Service Account:\n\nGo to APIs & Services\\Credentials using https://console.cloud.google.com/apis/credentials\n\nClick Create Credentials and Select Service Account Key.\n\nChoose the service account in the drop-down list for which an External (user-managed) Service Account key needs to be created.\n\nSelect the desired key type format among JSON or P12.\n\nClick Create. It will download the private key. Keep it safe.\n\nClick Close if prompted.\n\nThe site will redirect to the APIs & Services\\Credentials page. Make a note of the new ID displayed in the Service account keys section.\n\nDefault Value:\n\nGCP does not provide an automation option for External (user-managed) Service key rotation.",
        "reference": "800-171|3.5.2,800-53|IA-5f.,800-53r5|IA-5f.,CN-L3|8.1.4.1(a),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5f.,LEVEL|1A,NESA|T5.5.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listIamServiceAccountKeys",
        "json_transform": ".projects[].value.accounts[].value.keys[] | select(.keyType == \"USER_MANAGED\") | \"Type: \\(.keyType), Name: \\(.name), Valid After Time: \\(.validAfterTime), Valid After Days: \\(.validAfterTime | iso_8601_days_ago)\"",
        "regex": "Type: USER_MANAGED",
        "not_expect": "Valid After Days: (9[1-9]|[1-9][0-9]{2,})"
    },
    "custom_item_6": {
        "description": "1.9 Ensure That Cloud KMS Cryptokeys Are Not Anonymously or Publicly Accessible",
        "info": "It is recommended that the IAM policy on Cloud KMS cryptokeys should restrict anonymous and/or public access.\n\nRationale:\n\nGranting permissions to allUsers or allAuthenticatedUsers allows anyone to access the dataset. Such access might not be desirable if sensitive data is stored at the location. In this case, ensure that anonymous and/or public access to a Cloud KMS cryptokey is not allowed.\n\nImpact:\n\nRemoving the binding for allUsers and allAuthenticatedUsers members denies accessing cryptokeys to anonymous or public users.",
        "solution": "From Google Cloud CLI\n\nList all Cloud KMS Cryptokeys.\n\ngcloud kms keys list --keyring=[key_ring_name] --location=global --format=json | jq '.[].name'\n\nRemove IAM policy binding for a KMS key to remove access to allUsers and allAuthenticatedUsers using the below command.\n\ngcloud kms keys remove-iam-policy-binding [key_name] --keyring=[key_ring_name] --location=global --member='allAuthenticatedUsers' --role='[role]'\n\ngcloud kms keys remove-iam-policy-binding [key_name] --keyring=[key_ring_name] --location=global --member='allUsers' --role='[role]'\n\nDefault Value:\n\nBy default Cloud KMS does not allow access to allUsers or allAuthenticatedUsers.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "getKmsKeysIamPolicy",
        "json_transform": ".projects[].value.locations[] | select(.value.keyRings != null) | .value.keyRings[].value.cryptoKeys[] | .name as $name | .value.bindings[] | \"Key: \\($name), Member: \\(.members[]), Role: \\(.role)\"",
        "regex": "Member: ",
        "not_expect": "Member: (allUsers|allAuthenticatedUsers)"
    },
    "custom_item_7": {
        "description": "1.10 Ensure KMS Encryption Keys Are Rotated Within a Period of 90 Days",
        "info": "Google Cloud Key Management Service stores cryptographic keys in a hierarchical structure designed for useful and elegant access control management.\n\nThe format for the rotation schedule depends on the client library that is used. For the gcloud command-line tool, the next rotation time must be in ISO or RFC3339 format, and the rotation period must be in the form INTEGER[UNIT], where units can be one of seconds (s), minutes (m), hours (h) or days (d).\n\nRationale:\n\nSet a key rotation period and starting time. A key can be created with a specified rotation period, which is the time between when new key versions are generated automatically. A key can also be created with a specified next rotation time. A key is a named object representing a cryptographic key used for a specific purpose. The key material, the actual bits used for encryption, can change over time as new key versions are created.\n\nA key is used to protect some corpus of data. A collection of files could be encrypted with the same key and people with decrypt permissions on that key would be able to decrypt those files. Therefore, it's necessary to make sure the rotation period is set to a specific time.\n\nImpact:\n\nAfter a successful key rotation, the older key version is required in order to decrypt the data encrypted by that previous key version.",
        "solution": "From Google Cloud Console\n\nGo to Cryptographic Keys by visiting: https://console.cloud.google.com/security/kms.\n\nClick on the specific key ring\n\nFrom the list of keys, choose the specific key and Click on Right side pop up the blade (3 dots).\n\nClick on Edit rotation period.\n\nOn the pop-up window, Select a new rotation period in days which should be less than 90 and then choose Starting on date (date from which the rotation period begins).\n\nFrom Google Cloud CLI\n\nUpdate and schedule rotation by ROTATION_PERIOD and NEXT_ROTATION_TIME for each key:\n\ngcloud kms keys update new --keyring=KEY_RING --location=LOCATION --next-rotation-time=NEXT_ROTATION_TIME --rotation-period=ROTATION_PERIOD\n\nDefault Value:\n\nBy default, KMS encryption keys are rotated every 90 days.",
        "reference": "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "getKmsKeys",
        "json_transform": ".projects[].value.locations[] | select(.value.keyRings != null) | .value.keyRings[].value.cryptoKeys[] | \"Key: \\(.name), Rotation Period: \\(.rotationPeriod)\"",
        "regex": "Rotation Period:",
        "expect": "Rotation Period: (([1-9][0-9]{0,4}|1[0-1][0-9]{4}|12[0-8][0-9]{3}|129[0-5][0-9]{2}|129600)m|([1-9][0-9]{0,5}|[1-6][0-9]{6}|7[0-6][0-9]{5}||77[0-6][0-9]{4}|777[0-5][0-9]{3}|7776000)s|([1-9][0-9]{0,2}|[1-2][0-9][0-9][0-9]|2[0-1][0-9][0-9]|21[0-5][0-9]|2160)h|([1-8][0-9]?|90)d)"
    },
    "custom_item_8": {
        "description": "1.16 Ensure Essential Contacts is Configured for Organization",
        "info": "It is recommended that Essential Contacts is configured to designate email addresses for Google Cloud services to notify of important technical or security information.\n\nRationale:\n\nMany Google Cloud services, such as Cloud Billing, send out notifications to share important information with Google Cloud users. By default, these notifications are sent to members with certain Identity and Access Management (IAM) roles. With Essential Contacts, you can customize who receives notifications by providing your own list of contacts.\n\nImpact:\n\nThere is no charge for Essential Contacts except for the 'Technical Incidents' category that is only available to premium support customers.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "reference": "800-171|3.6.1,800-171|3.6.2,800-53|IR-6,800-53|IR-6(3),800-53r5|IR-6,800-53r5|IR-6(3),CSCv7|19.5,CSCv8|17.2,CSF|RS.CO-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|IR-6,LEVEL|1A,NESA|M1.3.3,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listEssentialContacts",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.contacts[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Email: \\(.email), Notification Category Subscriptions: \\(.notificationCategorySubscriptions)\"",
        "regex": "Email:",
        "expect": "Email: MANUAL_REVIEW"
    },
    "custom_item_9": {
        "description": "allServices",
        "request": "listProjectIAM",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | if (.value.auditConfigs | length) > 0 then .value.auditConfigs[] else {\"service\": \"allServices\"} end | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Service: \\(.service), Log Types: \\(.auditLogConfigs | map(.logType) | sort | join(\",\"))\"",
        "regex": "Service: allServices",
        "expect": "Log Types: ADMIN_READ,DATA_READ,DATA_WRITE"
    },
    "custom_item_10": {
        "description": "exemptedMembers",
        "request": "listProjectIAM",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.auditConfigs[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Service: \\(.service), Audit Log Configs: \\(.auditLogConfigs[])\"",
        "regex": "exemptedMembers",
        "not_expect": "exemptedMembers"
    },
    "custom_item_11": {
        "description": "2.2 Ensure That Sinks Are Configured for All Log Entries",
        "info": "It is recommended to create a sink that will export copies of all the log entries. This can help aggregate logs from multiple projects and export them to a Security Information and Event Management (SIEM).\n\nRationale:\n\nLog entries are held in Cloud Logging. To aggregate logs, export them to a SIEM. To keep them longer, it is recommended to set up a log sink. Exporting involves writing a filter that selects the log entries to export, and choosing a destination in Cloud Storage, BigQuery, or Cloud Pub/Sub. The filter and destination are held in an object called a sink. To ensure all log entries are exported to sinks, ensure that there is no filter configured for a sink. Sinks can be created in projects, organizations, folders, and billing accounts.\n\nImpact:\n\nThere are no costs or limitations in Cloud Logging for exporting logs, but the export destinations charge for storing or transmitting the log data.",
        "solution": "From Google Cloud Console\n\nGo to Logs Router by visiting https://console.cloud.google.com/logs/router.\n\nClick on the arrow symbol with CREATE SINK text.\n\nFill out the fields for Sink details.\n\nChoose Cloud Logging bucket in the Select sink destination drop down menu.\n\nChoose a log bucket in the next drop down menu.\n\nIf an inclusion filter is not provided for this sink, all ingested logs will be routed to the destination provided above. This may result in higher than expected resource usage.\n\nClick Create Sink.\n\nFor more information, see https://cloud.google.com/logging/docs/export/configure_export_v2#dest-create.\nFrom Google Cloud CLI\nTo create a sink to export all log entries in a Google Cloud Storage bucket:\n\ngcloud logging sinks createstorage.googleapis.com/DESTINATION_BUCKET_NAME\n\nSinks can be created for a folder or organization, which will include all projects.\n\ngcloud logging sinks createstorage.googleapis.com/DESTINATION_BUCKET_NAME --include-children --folder=FOLDER_ID | --organization=ORGANIZATION_ID\n\nNote:\n\nA sink created by the command-line above will export logs in storage buckets. However, sinks can be configured to export logs into BigQuery, or Cloud Pub/Sub, or Custom Destination.\n\nWhile creating a sink, the sink option --log-filter is not used to ensure the sink exports all log entries.\n\nA sink can be created at a folder or organization level that collects the logs of all the projects underneath bypassing the option --include-children in the gcloud command.\n\nDefault Value:\n\nBy default, there are no sinks configured.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-4,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-4,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.4,CSCv8|8.2,CSCv8|8.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.DS-4,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-4,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|M1.2.2,NESA|M5.5.1,NESA|T3.3.1,NESA|T3.6.2,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listLoggingSinks",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Sinks: \\([.value.sinks[] | {name, filter}])\"",
        "expect": "\"filter\":null"
    },
    "custom_item_12": {
        "description": "metric",
        "request": "listLoggingMetrics",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Metrics: \\([.value.metrics[] | {name, filter}])\"",
        "expect": "\"filter\":\"\\(protoPayload\\.serviceName[\\s]*=[\\s]*\\\\\"cloudresourcemanager\\.googleapis\\.com\\\\\"\\).*AND.*\\(ProjectOwnership.*OR.*projectOwnerInvitee\\).*OR.*\\(protoPayload\\.serviceData\\.policyDelta\\.bindingDeltas\\.action[\\s]*=[\\s]*\\\\\"REMOVE\\\\\".*AND.*protoPayload\\.serviceData\\.policyDelta\\.bindingDeltas\\.role[\\s]*=[\\s]*\\\\\"roles/owner\\\\\"\\).*OR.*\\(protoPayload\\.serviceData\\.policyDelta\\.bindingDeltas\\.action[\\s]*=[\\s]*\\\\\"ADD\\\\\".*AND.*protoPayload\\.serviceData\\.policyDelta\\.bindingDeltas\\.role[\\s]*=[\\s]*\\\\\"roles/owner\\\\\"\\)\""
    },
    "custom_item_13": {
        "description": "alert",
        "request": "listAlertPolicies",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Alert Policies: \\([.value.alertPolicies[] | select(.enabled == true) | .conditions[] | {name, \"filter\": .conditionThreshold.filter}])\"",
        "expect": "\"filter\":\"metric\\.type=\\\\\"logging\\.googleapis\\.com/user/"
    },
    "custom_item_14": {
        "description": "metric",
        "request": "listLoggingMetrics",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Metrics: \\([.value.metrics[] | {name, filter}])\"",
        "expect": "\"filter\":\"protoPayload\\.methodName[\\s]*=[\\s]*\\\\\"SetIamPolicy\\\\\".*AND.*protoPayload\\.serviceData\\.policyDelta\\.auditConfigDeltas:\\*\""
    },
    "custom_item_15": {
        "description": "alert",
        "request": "listAlertPolicies",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Alert Policies: \\([.value.alertPolicies[] | select(.enabled == true) | .conditions[] | {name, \"filter\": .conditionThreshold.filter}])\"",
        "expect": "\"filter\":\"metric\\.type=\\\\\"logging\\.googleapis\\.com/user/"
    },
    "custom_item_16": {
        "description": "metric",
        "request": "listLoggingMetrics",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Metrics: \\([.value.metrics[] | {name, filter}])\"",
        "expect": "\"filter\":\"resource\\.type[\\s]*=[\\s]*\\\\\"iam_role\\\\\".*AND.*\\([\\s]*protoPayload\\.methodName[\\s]*=[\\s]*\\\\\"google\\.iam\\.admin\\.v1\\.CreateRole\\\\\".*OR.*protoPayload\\.methodName=\\\\\"google\\.iam\\.admin\\.v1\\.DeleteRole\\\\\".*OR.*protoPayload\\.methodName[\\s]*=[\\s]*\\\\\"google\\.iam\\.admin\\.v1\\.UpdateRole\\\\\"[\\s]*\\).*\""
    },
    "custom_item_17": {
        "description": "alert",
        "request": "listAlertPolicies",
        "json_transform": ".projects[] | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Alert Policies: \\([.value.alertPolicies[] | select(.enabled == true) | .conditions[] | {name, \"filter\": .conditionThreshold.filter}])\"",
        "expect": "\"filter\":\"metric\\.type=\\\\\"logging\\.googleapis\\.com/user/"
    },
    "custom_item_18": {
        "description": "vpc networks",
        "request": "listComputeNetworks",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.items[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Network: \\(.selfLink)\"",
        "expect": "MANUAL REVIEW REQUIRED"
    },
    "custom_item_19": {
        "description": "dns policies",
        "request": "listDnsPolicies",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.policies[] | .name as $policy | .enableLogging as $enableLogging | .networks[] | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Policy: \\($policy), Enable Logging: \\($enableLogging), Network: \\(.networkUrl)\"",
        "regex": "Enable Logging: true",
        "expect": "MANUAL REVIEW REQUIRED"
    },
    "custom_item_20": {
        "description": "2.13 Ensure Cloud Asset Inventory Is Enabled",
        "info": "GCP Cloud Asset Inventory is services that provides a historical view of GCP resources and IAM policies through a time-series database. The information recorded includes metadata on Google Cloud resources, metadata on policies set on Google Cloud projects or resources, and runtime information gathered within a Google Cloud resource.\n\nCloud Asset Inventory Service (CAIS) API enablement is not required for operation of the service, but rather enables the mechanism for searching/exporting CAIS asset data directly.\n\nRationale:\n\nThe GCP resources and IAM policies captured by GCP Cloud Asset Inventory enables security analysis, resource change tracking, and compliance auditing.\n\nIt is recommended GCP Cloud Asset Inventory be enabled for all GCP projects.",
        "solution": "From Google Cloud Console\nEnable the Cloud Asset API:\n\nGo to API & Services/Library by visiting https://console.cloud.google.com/apis/library\n\nSearch for Cloud Asset API and select the result for Cloud Asset API\n\nClick the ENABLE button.\n\nFrom Google Cloud CLI\nEnable the Cloud Asset API:\n\nEnable the Cloud Asset API through the services interface:\n\ngcloud services enable cloudasset.googleapis.com\n\nDefault Value:\n\nThe Cloud Asset Inventory API is disabled by default in each project.",
        "reference": "800-171|3.4.1,800-53|CM-8,800-53|CM-8(1),800-53|PM-5,800-53r5|CM-8,800-53r5|CM-8(1),800-53r5|PM-5,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.4,CSCv7|11.2,CSCv7|16.1,CSCv8|1.1,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|CM-8,ITSG-33|CM-8(1),LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listServices",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.services[] | select(.config.name == \"cloudasset.googleapis.com\") | \"Project Number: \\($projectNumber), Project ID: \\($projectId), Service Name: \\(.config.name), State: \\(.state)\"",
        "regex": "State",
        "expect": "State: ENABLED"
    },
    "custom_item_21": {
        "description": "3.2 Ensure Legacy Networks Do Not Exist for Older Projects",
        "info": "In order to prevent use of legacy networks, a project should not have a legacy network configured. As of now, Legacy Networks are gradually being phased out, and you can no longer create projects with them. This recommendation is to check older projects to ensure that they are not using Legacy Networks.\n\nRationale:\n\nLegacy networks have a single network IPv4 prefix range and a single gateway IP address for the whole network. The network is global in scope and spans all cloud regions. Subnetworks cannot be created in a legacy network and are unable to switch from legacy to auto or custom subnet networks. Legacy networks can have an impact for high network traffic projects and are subject to a single point of contention or failure.\n\nImpact:\n\nNone.",
        "solution": "From Google Cloud CLI\nFor each Google Cloud Platform project,\n\nFollow the documentation and create a non-legacy network suitable for the organization's requirements.\n\nFollow the documentation and delete the networks in the legacy mode.\n\nDefault Value:\n\nBy default, networks are not created in the legacy mode.",
        "reference": "800-171|3.1.16,800-171|3.1.17,800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|AC-18,800-53|AC-18(1),800-53|AC-18(3),800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53r5|AC-18,800-53r5|AC-18(1),800-53r5|AC-18(3),800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,CSCv7|11.1,CSCv8|4.2,CSF|DE.AE-1,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-18,ITSG-33|AC-18(1),ITSG-33|AC-18(3),ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T5.4.2,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|NS33,NIAv2|NS34,NIAv2|NS38,NIAv2|SS15a,NIAv2|SS16,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeNetworks",
        "json_transform": ".projects[].value.items[] | \"Network: \\(.selfLink), IPv4 Range: \\(.IPv4Range)\"",
        "regex": "IPv4 Range",
        "expect": "IPv4 Range: null"
    },
    "custom_item_22": {
        "description": "3.3 Ensure That DNSSEC Is Enabled for Cloud DNS",
        "info": "Cloud Domain Name System (DNS) is a fast, reliable and cost-effective domain name system that powers millions of domains on the internet. Domain Name System Security Extensions (DNSSEC) in Cloud DNS enables domain owners to take easy steps to protect their domains against DNS hijacking and man-in-the-middle and other attacks.\n\nRationale:\n\nDomain Name System Security Extensions (DNSSEC) adds security to the DNS protocol by enabling DNS responses to be validated. Having a trustworthy DNS that translates a domain name like www.example.com into its associated IP address is an increasingly important building block of today's web-based applications. Attackers can hijack this process of domain/IP lookup and redirect users to a malicious site through DNS hijacking and man-in-the-middle attacks. DNSSEC helps mitigate the risk of such attacks by cryptographically signing DNS records. As a result, it prevents attackers from issuing fake DNS responses that may misdirect browsers to nefarious websites.",
        "solution": "From Google Cloud Console\n\nGo to Cloud DNS by visiting https://console.cloud.google.com/net-services/dns/zones.\n\nFor each zone of Type Public, set DNSSEC to On.\n\nFrom Google Cloud CLI\nUse the below command to enable DNSSEC for Cloud DNS Zone Name.\n\ngcloud dns managed-zones update ZONE_NAME --dnssec-state on\n\nDefault Value:\n\nBy default DNSSEC is not enabled.",
        "reference": "800-171|3.1.16,800-171|3.1.17,800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|AC-18,800-53|AC-18(1),800-53|AC-18(3),800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53r5|AC-18,800-53r5|AC-18(1),800-53r5|AC-18(3),800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,CSCv7|11.1,CSCv8|4.2,CSF|DE.AE-1,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-18,ITSG-33|AC-18(1),ITSG-33|AC-18(3),ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T5.4.2,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|NS33,NIAv2|NS34,NIAv2|NS38,NIAv2|SS15a,NIAv2|SS16,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listDnsManagedZones",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.managedZones[] | select(.visibility == \"public\") | \"Project Number: \\($projectNumber), Project ID: \\($projectId), DNS Name: \\(.dnsName), DNSSEC: \\(.dnssecConfig.state)\"",
        "regex": "DNSSEC:",
        "expect": "DNSSEC: on"
    },
    "custom_item_23": {
        "description": "3.4 Ensure That RSASHA1 Is Not Used for the Key-Signing Key in Cloud DNS DNSSEC",
        "info": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.\n\nDNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.\n\nRationale:\n\nDomain Name System Security Extensions (DNSSEC) algorithm numbers in this registry may be used in CERT RRs. Zonesigning (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms.\n\nThe algorithm used for key signing should be a recommended one and it should be strong. When enabling DNSSEC for a managed zone, or creating a managed zone with DNSSEC, the user can select the DNSSEC signing algorithms and the denial-of-existence type. Changing the DNSSEC settings is only effective for a managed zone if DNSSEC is not already enabled. If there is a need to change the settings for a managed zone where it has been enabled, turn DNSSEC off and then re-enable it with different settings.",
        "solution": "From Google Cloud CLI\n\nIf it is necessary to change the settings for a managed zone where it has been enabled, DNSSEC must be turned off and re-enabled with different settings. To turn off DNSSEC, run the following command:\n\ngcloud dns managed-zones update ZONE_NAME --dnssec-state off\n\nTo update key-signing for a reported managed DNS Zone, run the following command:\n\ngcloud dns managed-zones update ZONE_NAME --dnssec-state on --ksk-algorithm KSK_ALGORITHM --ksk-key-length KSK_KEY_LENGTH --zsk-algorithm ZSK_ALGORITHM --zsk-key-length ZSK_KEY_LENGTH --denial-of-existence DENIAL_OF_EXISTENCE\n\nSupported algorithm options and key lengths are as follows.\n\nAlgorithm                        KSK Length               ZSK Length\n---------                        ----------               ----------\nRSASHA1                          1024,2048                1024,2048\nRSASHA256                        1024,2048                1024,2048\nRSASHA512                        1024,2048                1024,2048\nECDSAP256SHA256                  256                      256\nECDSAP384SHA384                  384                      384",
        "reference": "800-171|3.1.16,800-171|3.1.17,800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|AC-18,800-53|AC-18(1),800-53|AC-18(3),800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53r5|AC-18,800-53r5|AC-18(1),800-53r5|AC-18(3),800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,CSCv7|11.1,CSCv8|4.2,CSF|DE.AE-1,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-18,ITSG-33|AC-18(1),ITSG-33|AC-18(3),ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T5.4.2,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|NS33,NIAv2|NS34,NIAv2|NS38,NIAv2|SS15a,NIAv2|SS16,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listDnsManagedZones",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.managedZones[] | select(.visibility == \"public\") | .dnsName as $dnsName | .dnssecConfig.defaultKeySpecs[] | select(.keyType == \"keySigning\") | \"Project Number: \\($projectNumber), Project ID: \\($projectId), DNS Name: \\($dnsName), DNSSEC Algorithm: \\(.algorithm)\"",
        "regex": "DNSSEC Algorithm:",
        "not_expect": "DNSSEC Algorithm: rsasha1"
    },
    "custom_item_24": {
        "description": "3.5 Ensure That RSASHA1 Is Not Used for the Zone-Signing Key in Cloud DNS DNSSEC",
        "info": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.\n\nDNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.\n\nRationale:\n\nDNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms.\n\nThe algorithm used for key signing should be a recommended one and it should be strong. When enabling DNSSEC for a managed zone, or creating a managed zone with DNSSEC, the DNSSEC signing algorithms and the denial-of-existence type can be selected. Changing the DNSSEC settings is only effective for a managed zone if DNSSEC is not already enabled. If the need exists to change the settings for a managed zone where it has been enabled, turn DNSSEC off and then re-enable it with different settings.",
        "solution": "From Google Cloud CLI\n\nIf the need exists to change the settings for a managed zone where it has been enabled, DNSSEC must be turned off and then re-enabled with different settings. To turn off DNSSEC, run following command:\n\ngcloud dns managed-zones update ZONE_NAME --dnssec-state off\n\nTo update zone-signing for a reported managed DNS Zone, run the following command:\n\ngcloud dns managed-zones update ZONE_NAME --dnssec-state on --ksk-algorithm KSK_ALGORITHM --ksk-key-length KSK_KEY_LENGTH --zsk-algorithm ZSK_ALGORITHM --zsk-key-length ZSK_KEY_LENGTH --denial-of-existence DENIAL_OF_EXISTENCE\n\nSupported algorithm options and key lengths are as follows.\n\nAlgorithm                 KSK Length            ZSK Length\n---------                 ----------            ----------\nRSASHA1                   1024,2048             1024,2048\nRSASHA256                 1024,2048             1024,2048\nRSASHA512                 1024,2048             1024,2048\nECDSAP256SHA256           256                   384\nECDSAP384SHA384           384                   384",
        "reference": "800-171|3.1.16,800-171|3.1.17,800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|AC-18,800-53|AC-18(1),800-53|AC-18(3),800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53r5|AC-18,800-53r5|AC-18(1),800-53r5|AC-18(3),800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,CSCv7|11.1,CSCv8|4.2,CSF|DE.AE-1,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.PT-3,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-18,ITSG-33|AC-18(1),ITSG-33|AC-18(3),ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T5.4.2,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NIAv2|NS33,NIAv2|NS34,NIAv2|NS38,NIAv2|SS15a,NIAv2|SS16,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listDnsManagedZones",
        "json_transform": ".projects[] | .projectNumber as $projectNumber | .projectId as $projectId | .value.managedZones[] | select(.visibility == \"public\") | .dnsName as $dnsName | .dnssecConfig.defaultKeySpecs[] | select(.keyType == \"zoneSigning\") | \"Project Number: \\($projectNumber), Project ID: \\($projectId), DNS Name: \\($dnsName), DNSSEC Algorithm: \\(.algorithm)\"",
        "regex": "DNSSEC Algorithm:",
        "not_expect": "DNSSEC Algorithm: rsasha1"
    },
    "custom_item_25": {
        "description": "4.1 Ensure That Instances Are Not Configured To Use the Default Service Account",
        "info": "It is recommended to configure your instance to not use the default Compute Engine service account because it has the Editor role on the project.\n\nRationale:\n\nWhen a default Compute Engine service account is created, it is automatically granted the Editor role (roles/editor) on your project which allows read and write access to most Google Cloud Services. This role includes a very large number of permissions. To defend against privilege escalations if your VM is compromised and prevent an attacker from gaining access to all of your project, you should either revoke the Editor role from the default Compute Engine service account or create a new service account and assign only the permissions needed by your instance. To mitigate this at scale, we strongly recommend that you disable the automatic role grant by adding a constraint to your organization policy.\n\nThe default Compute Engine service account is named [PROJECT_NUMBER]-compute@developer.gserviceaccount.com.",
        "solution": "From Google Cloud Console\n\nGo to the VM instances page by visiting: https://console.cloud.google.com/compute/instances.\n\nClick on the instance name to go to its VM instance details page.\n\nClick STOP and then click EDIT.\n\nUnder the section API and identity management, select a service account other than the default Compute Engine service account. You may first need to create a new service account.\n\nClick Save and then click START.\n\nFrom Google Cloud CLI\n\nStop the instance:\n\ngcloud compute instances stopUpdate the instance:\n\ngcloud compute instances set-service-account--service-account=Restart the instance:\n\ngcloud compute instances startDefault Value:\n\nBy default, Compute instances are configured to use the default Compute Engine service account.",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53r5|IA-5,CSCv7|4.7,CSCv8|4.7,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | \"Instance: \\(.selfLink), Service Account: \\(.serviceAccounts[].email)\"",
        "regex": "Service Account:",
        "not_expect": "Service Account: .*-compute@developer.gserviceaccount.com"
    },
    "custom_item_26": {
        "description": "4.2 Ensure That Instances Are Not Configured To Use the Default Service Account With Full Access to All Cloud APIs",
        "info": "To support principle of least privileges and prevent potential privilege escalation it is recommended that instances are not assigned to default service account Compute Engine default service account with Scope Allow full access to all Cloud APIs.\n\nRationale:\n\nAlong with ability to optionally create, manage and use user managed custom service accounts, Google Compute Engine provides default service account Compute Engine default service account for an instances to access necessary cloud services. Project Editor role is assigned to Compute Engine default service account hence, This service account has almost all capabilities over all cloud services except billing. However, when Compute Engine default service account assigned to an instance it can operate in 3 scopes.\n\n1. Allow default access: Allows only minimum access required to run an Instance (Least Privileges)\n\n2. Allow full access to all Cloud APIs: Allow full access to all the cloud APIs/Services (Too much access)\n\n3. Set access for each API: Allows Instance administrator to choose only those APIs that are needed to perform specific business functionality expected by instance\n\nWhen an instance is configured with Compute Engine default service account with Scope Allow full access to all Cloud APIs, based on IAM roles assigned to the user(s) accessing Instance, it may allow user to perform cloud operations/API calls that user is not supposed to perform leading to successful privilege escalation.\n\nImpact:\n\nIn order to change service account or scope for an instance, it needs to be stopped.",
        "solution": "From Google Cloud Console\n\nGo to the VM instances page by visiting: https://console.cloud.google.com/compute/instances.\n\nClick on the impacted VM instance.\n\nIf the instance is not stopped, click the Stop button. Wait for the instance to be stopped.\n\nNext, click the Edit button.\n\nScroll down to the Service Account section.\n\nSelect a different service account or ensure that Allow full access to all Cloud APIs is not selected.\n\nClick the Save button to save your changes and then click START.\n\nFrom Google Cloud CLI\n\nStop the instance:\n\ngcloud compute instances stopUpdate the instance:\n\ngcloud compute instances set-service-account--service-account=--scopes [SCOPE1, SCOPE2...]\n\nRestart the instance:\n\ngcloud compute instances startDefault Value:\n\nWhile creating an VM instance, default service account is used with scope Allow default access.",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53r5|IA-5,CSCv7|4.7,CSCv8|4.7,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | \"Instance: \\(.selfLink), Service Account: \\(.serviceAccounts[].email), Scope: \\(.serviceAccounts[].scopes[])\"",
        "regex": "Service Account:",
        "not_expect": "Service Account: .*-compute@developer.gserviceaccount.com, Scope: https://www.googleapis.com/auth/cloud-platform"
    },
    "custom_item_27": {
        "description": "4.3 Ensure 'Block Project-Wide SSH Keys' Is Enabled for VM Instances",
        "info": "It is recommended to use Instance specific SSH key(s) instead of using common/shared project-wide SSH key(s) to access Instances.\n\nRationale:\n\nProject-wide SSH keys are stored in Compute/Project-meta-data. Project wide SSH keys can be used to login into all the instances within project. Using project-wide SSH keys eases the SSH key management but if compromised, poses the security risk which can impact all the instances within project. It is recommended to use Instance specific SSH keys which can limit the attack surface if the SSH keys are compromised.\n\nImpact:\n\nUsers already having Project-wide ssh key pairs and using third party SSH clients will lose access to the impacted Instances. For Project users using gcloud or GCP Console based SSH option, no manual key creation and distribution is required and will be handled by GCE (Google Compute Engine) itself. To access Instance using third party SSH clients Instance specific SSH key pairs need to be created and distributed to the required users.",
        "solution": "From Google Cloud Console\n\nGo to the VM instances page by visiting: https://console.cloud.google.com/compute/instances. It will list all the instances in your project.\n\nClick on the name of the Impacted instance\n\nClick Edit in the toolbar\n\nUnder SSH Keys, go to the Block project-wide SSH keys checkbox\n\nTo block users with project-wide SSH keys from connecting to this instance, select Block project-wide SSH keys\n\nClick Save at the bottom of the page\n\nRepeat steps for every impacted Instance\n\nFrom Google Cloud CLI\nTo block project-wide public SSH keys, set the metadata value to TRUE:\n\ngcloud compute instances add-metadata--metadata block-project-ssh-keys=TRUE\n\nDefault Value:\n\nBy Default Block Project-wide SSH keys is not enabled.",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|4.4,CSCv7|16.5,CSCv8|3.10,CSCv8|5.2,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | [.metadata.items[] | select(.key == \"block-project-ssh-keys\").value] as $value | \"Instance: \\(.selfLink), Block Project SSH Keys: \\($value[0])\"",
        "regex": "Block Project SSH Keys:",
        "expect": "Block Project SSH Keys: true"
    },
    "custom_item_28": {
        "description": "project",
        "request": "listComputeProjectInfo",
        "json_transform": ".projects[] | [.commonInstanceMetadata.items[] | select(.key == \"enable-oslogin\").value] as $value | \"Project Number: \\(.projectNumber), Project ID: \\(.projectId), Enable OS Login: \\($value[0])\"",
        "regex": "Enable OS Login:",
        "expect": "Enable OS Login: true"
    },
    "custom_item_29": {
        "description": "instances",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | [.metadata.items[] | select(.key == \"enable-oslogin\").value] as $value | \"Instance: \\(.selfLink), Enable OS Login: \\($value[0])\"",
        "regex": "Enable OS Login:",
        "not_expect": "Enable OS Login: false"
    },
    "custom_item_30": {
        "description": "4.5 Ensure 'Enable Connecting to Serial Ports' Is Not Enabled for VM Instance",
        "info": "Interacting with a serial port is often referred to as the serial console, which is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support.\n\nIf you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. Therefore interactive serial console support should be disabled.\n\nRationale:\n\nA virtual machine instance has four virtual serial ports. Interacting with a serial port is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support. The instance's operating system, BIOS, and other system-level entities often write output to the serial ports, and can accept input such as commands or answers to prompts. Typically, these system-level entities use the first serial port (port 1) and serial port 1 is often referred to as the serial console.\n\nThe interactive serial console does not support IP-based access restrictions such as IP whitelists. If you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. This allows anybody to connect to that instance if they know the correct SSH key, username, project ID, zone, and instance name.\n\nTherefore interactive serial console support should be disabled.",
        "solution": "From Google Cloud CLI\n\nLogin to Google Cloud console\n\nGo to Computer Engine\n\nGo to VM instances\n\nClick on the Specific VM\n\nClick EDIT\n\nUnselect Enable connecting to serial ports below Remote access block.\n\nClick Save\n\nFrom Google Cloud Console\nUse the below command to disable\n\ngcloud compute instances add-metadata--zone=--metadata=serial-port-enable=false\n\nor\n\ngcloud compute instances add-metadata--zone=--metadata=serial-port-enable=0\n\nPrevention:\nYou can prevent VMs from having serial port access enable by Disable VM serial port access organization policy:\n\nhttps://console.cloud.google.com/iam-admin/orgpolicies/compute-disableSerialPortAccess.\n\nDefault Value:\n\nBy default, connecting to serial ports is not enabled.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|9.2,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | [.metadata.items[] | select(.key == \"serial-port-enable\").value] as $value | \"Instance: \\(.selfLink), Serial Port Enable: \\($value[0])\"",
        "regex": "Serial Port Enable:",
        "expect": "Serial Port Enable: (0|false)"
    },
    "custom_item_31": {
        "description": "4.6 Ensure That IP Forwarding Is Not Enabled on Instances",
        "info": "Compute Engine instance cannot forward a packet unless the source IP address of the packet matches the IP address of the instance. Similarly, GCP won't deliver a packet whose destination IP address is different than the IP address of the instance receiving the packet. However, both capabilities are required if you want to use instances to help route packets.\n\nForwarding of data packets should be disabled to prevent data loss or information disclosure.\n\nRationale:\n\nCompute Engine instance cannot forward a packet unless the source IP address of the packet matches the IP address of the instance. Similarly, GCP won't deliver a packet whose destination IP address is different than the IP address of the instance receiving the packet. However, both capabilities are required if you want to use instances to help route packets. To enable this source and destination IP check, disable the canIpForward field, which allows an instance to send and receive packets with non-matching destination or source IPs.\n\nImpact:\n\nDeleting instance(s) acting as routers/packet forwarders may break the network connectivity.",
        "solution": "You only edit the canIpForward setting at instance creation time. Therefore, you need to delete the instance and create a new one where canIpForward is set to false.\nFrom Google Cloud Console\n\nGo to the VM Instances page by visiting: https://console.cloud.google.com/compute/instances.\n\nSelect the VM Instance you want to remediate.\n\nClick the Delete button.\n\nOn the 'VM Instances' page, click 'CREATE INSTANCE'.\n\nCreate a new instance with the desired configuration. By default, the instance is configured to not allow IP forwarding.\n\nFrom Google Cloud CLI\n\nDelete the instance:\n\ngcloud compute instances delete INSTANCE_NAME\n\nCreate a new instance to replace it, with IP forwarding set to Off\n\ngcloud compute instances create\n\nDefault Value:\n\nBy default, instances are not configured to allow IP forwarding.",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.13.6,800-53|CA-9,800-53|SC-7,800-53|SC-7(5),800-53r5|CA-9,800-53r5|SC-7,800-53r5|SC-7(5),CN-L3|7.1.2.2(c),CN-L3|8.1.10.6(j),CSCv7|11.1,CSCv7|11.2,CSCv8|4.4,CSCv8|4.5,CSF|DE.CM-1,CSF|ID.AM-3,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SC-7(5),LEVEL|1A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,NIAv2|GS7b,NIAv2|NS25,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,SWIFT-CSCv1|2.1,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listComputeInstances",
        "json_transform": ".projects[].value.items[] | select(.value.items | length > 0) | .value.items[] | \"Instance: \\(.selfLink), Can IP Forward: \\(.canIpForward)\"",
        "regex": "Can IP Forward:",
        "not_expect": "Can IP Forward: true"
    },
    "custom_item_32": {
        "description": "5.1 Ensure That Cloud Storage Bucket Is Not Anonymously or Publicly Accessible",
        "info": "It is recommended that IAM policy on Cloud Storage bucket does not allows anonymous or public access.\n\nRationale:\n\nAllowing anonymous or public access grants permissions to anyone to access bucket content. Such access might not be desired if you are storing any sensitive data. Hence, ensure that anonymous or public access to a bucket is not allowed.\n\nImpact:\n\nNo storage buckets would be publicly accessible. You would have to explicitly administer bucket access.",
        "solution": "From Google Cloud Console\n\nGo to Storage browser by visiting https://console.cloud.google.com/storage/browser.\n\nClick on the bucket name to go to its Bucket details page.\n\nClick on the Permissions tab.\n\nClick Delete button in front of allUsers and allAuthenticatedUsers to remove that particular role assignment.\n\nFrom Google Cloud CLI\nRemove allUsers and allAuthenticatedUsers access.\n\ngsutil iam ch -d allUsers gs://BUCKET_NAME\ngsutil iam ch -d allAuthenticatedUsers gs://BUCKET_NAME\n\nPrevention:\nYou can prevent Storage buckets from becoming publicly accessible by setting up the Domain restricted sharing organization policy at: https://console.cloud.google.com/iam-admin/orgpolicies/iam-allowedPolicyMemberDomains .\n\nDefault Value:\n\nBy Default, Storage buckets are not publicly shared.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|12.4,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listBucketsIam",
        "json_transform": ".projects[].value.items[] | .selfLink as $selfLink | .value.bindings[] | \"Bucket: \\($selfLink), Role: \\(.role), Member: \\(.members[])\"",
        "regex": "Member:",
        "not_expect": "Member: (allUsers|allAuthenticatedUsers)"
    },
    "custom_item_33": {
        "description": "6.1.1 Ensure That a MySQL Database Instance Does Not Allow Anyone To Connect With Administrative Privileges",
        "info": "It is recommended to set a password for the administrative user (root by default) to prevent unauthorized access to the SQL database instances.\n\nThis recommendation is applicable only for MySQL Instances. PostgreSQL does not offer any setting for No Password from the cloud console.\n\nRationale:\n\nAt the time of MySQL Instance creation, not providing an administrative password allows anyone to connect to the SQL database instance with administrative privileges. The root password should be set to ensure only authorized users have these privileges.\n\nImpact:\n\nConnection strings for administrative clients need to be reconfigured to use a password.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Platform Console using https://console.cloud.google.com/sql/\n\nSelect the instance to open its Overview page.\n\nSelect Access Control > Users.\n\nClick the More actions icon for the user to be updated.\n\nSelect Change password, specify a New password, and click OK.\n\nFrom Google Cloud CLI\n\nSet a password to a MySql instance:\n\ngcloud sql users set-password root --host=--instance=--prompt-for-password\n\nA prompt will appear, requiring the user to enter a password:\n\nInstance Password:\n\nWith a successful password configured, the following message should be seen:\n\nUpdating Cloud SQL user...done.\n\nDefault Value:\n\nFrom the Google Cloud Platform Console, the Create Instance workflow enforces the rule to enter the root password unless the option No Password is selected explicitly.",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53r5|IA-5,CSCv7|4.2,CSCv8|4.7,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), IP Addresses: \\(.ipAddresses[])\"",
        "regex": "Database Version: MYSQL",
        "expect": "MANUAL REVIEW REQUIRED"
    },
    "custom_item_34": {
        "description": "6.1.2 Ensure 'Skip_show_database' Database Flag for Cloud SQL MySQL Instance Is Set to 'On'",
        "info": "It is recommended to set skip_show_database database flag for Cloud SQL Mysql instance to on\n\nRationale:\n\nskip_show_database database flag prevents people from using the SHOW DATABASES statement if they do not have the SHOW DATABASES privilege. This can improve security if you have concerns about users being able to see databases belonging to other users. Its effect depends on the SHOW DATABASES privilege: If the variable value is ON, the SHOW DATABASES statement is permitted only to users who have the SHOW DATABASES privilege, and the statement displays all database names. If the value is OFF, SHOW DATABASES is permitted to all users, but displays the names of only those databases for which the user has the SHOW DATABASES or other privilege. This recommendation is applicable to Mysql database instances.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the Mysql instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add a Database Flag, choose the flag skip_show_database from the drop-down menu, and set its value to on.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nList all Cloud SQL database Instances\n\ngcloud sql instances list\n\nConfigure the skip_show_database database flag for every Cloud SQL Mysql database instance using the below command.\n\ngcloud sql instances patch--database-flags skip_show_database=on\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"skip_show_database\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Show Skip Database: \\($value[0])\"",
        "regex": "Database Version: MYSQL",
        "expect": "Show Skip Database: on"
    },
    "custom_item_35": {
        "description": "6.1.3 Ensure That the 'Local_infile' Database Flag for a Cloud SQL MySQL Instance Is Set to 'Off'",
        "info": "It is recommended to set the local_infile database flag for a Cloud SQL MySQL instance to off.\n\nRationale:\n\nThe local_infile flag controls the server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.\n\nTo explicitly cause the server to refuse LOAD DATA LOCAL statements (regardless of how client programs and libraries are configured at build time or runtime), start mysqld with local_infile disabled. local_infile can also be set at runtime.\n\nDue to security issues associated with the local_infile flag, it is recommended to disable it. This recommendation is applicable to MySQL database instances.\n\nImpact:\n\nDisabling local_infile makes the server refuse local data loading by clients that have LOCAL enabled on the client side.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the MySQL instance where the database flag needs to be enabled.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add a Database Flag, choose the flag local_infile from the drop-down menu, and set its value to off.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nList all Cloud SQL database instances using the following command:\n\ngcloud sql instances list\n\nConfigure the local_infile database flag for every Cloud SQL Mysql database instance using the below command:\n\ngcloud sql instances patch--database-flags local_infile=off\n\nNote:\nThis command will overwrite all database flags that were previously set. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default local_infile is on.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|16.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"local_infile\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Local Infile: \\($value[0])\"",
        "regex": "Database Version: MYSQL",
        "expect": "Local Infile: off"
    },
    "custom_item_36": {
        "description": "6.2.2 Ensure That the 'Log_connections' Database Flag for Cloud SQL PostgreSQL Instance Is Set to 'On'",
        "info": "Enabling the log_connections setting causes each attempted connection to the server to be logged, along with successful completion of client authentication. This parameter cannot be changed after the session starts.\n\nRationale:\n\nPostgreSQL does not log attempted connections by default. Enabling the log_connections setting will create log entries for each attempted connection as well as successful completion of client authentication which can be useful in troubleshooting issues and to determine any unusual connection attempts to the server. This recommendation is applicable to PostgreSQL database instances.\n\nImpact:\n\nTurning on logging will increase the required storage over time. Mismanaged logs may cause your storage costs to increase. Setting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the PostgreSQL instance for which you want to enable the database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add a Database Flag, choose the flag log_connections from the drop-down menu and set the value as on.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the log_connections database flag for every Cloud SQL PosgreSQL database instance using the below command.\n\ngcloud sql instances patch--database-flags 'log_connections'=on\n\nNote:\nThis command will overwrite all previously set database flags. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default log_connections is off.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"log_connections\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Log Connections: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "Log Connections: on"
    },
    "custom_item_37": {
        "description": "6.2.3 Ensure That the 'Log_disconnections' Database Flag for Cloud SQL PostgreSQL Instance Is Set to 'On'",
        "info": "Enabling the log_disconnections setting logs the end of each session, including the session duration.\n\nRationale:\n\nPostgreSQL does not log session details such as duration and session end by default. Enabling the log_disconnections setting will create log entries at the end of each session which can be useful in troubleshooting issues and determine any unusual activity across a time period. The log_disconnections and log_connections work hand in hand and generally, the pair would be enabled/disabled together. This recommendation is applicable to PostgreSQL database instances.\n\nImpact:\n\nTurning on logging will increase the required storage over time. Mismanaged logs may cause your storage costs to increase. Setting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the PostgreSQL instance where the database flag needs to be enabled.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add a Database Flag, choose the flag log_disconnections from the drop-down menu and set the value as on.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the log_disconnections database flag for every Cloud SQL PosgreSQL database instance using the below command:\n\ngcloud sql instances patch--database-flags log_disconnections=on\n\nNote: This command will overwrite all previously set database flags. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default log_disconnections is off.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"log_disconnections\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Log Disconnections: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "Log Disconnections: on"
    },
    "custom_item_38": {
        "description": "6.2.5 Ensure that the 'Log_min_messages' Flag for a Cloud SQL PostgreSQL Instance is set at minimum to 'Warning'",
        "info": "The log_min_messages flag defines the minimum message severity level that is considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include (from lowest to highest severity) DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, and PANIC. Each severity level includes the subsequent levels mentioned above. ERROR is considered the best practice setting. Changes should only be made in accordance with the organization's logging policy.\n\nRationale:\n\nAuditing helps in troubleshooting operational problems and also permits forensic analysis. If log_min_messages is not set to the correct value, messages may not be classified as error messages appropriately. An organization will need to decide their own threshold for logging log_min_messages flag.\n\nThis recommendation is applicable to PostgreSQL database instances.\n\nImpact:\n\nSetting the threshold too low will might result in increased log storage size and length, making it difficult to find actual errors. Setting the threshold to 'Warning' will log messages for the most needed error messages. Higher severity levels may cause errors needed to troubleshoot to not be logged.\n\nNote: To effectively turn off logging failing statements, set this parameter to PANIC.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances\n\nSelect the PostgreSQL instance for which you want to enable the database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add a Database Flag, choose the flag log_min_messages from the drop-down menu and set appropriate value.\n\nClick Save to save the changes.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the log_min_messages database flag for every Cloud SQL PosgreSQL database instance using the below command.\n\ngcloud sql instances patch--database-flags log_min_messages=Note: This command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default log_min_messages is ERROR.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"log_min_messages\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Log Min Messages: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "Log Min Messages: (warning|error|log|fatal|panic)"
    },
    "custom_item_39": {
        "description": "6.2.6 Ensure 'Log_min_error_statement' Database Flag for Cloud SQL PostgreSQL Instance Is Set to 'Error' or Stricter",
        "info": "The log_min_error_statement flag defines the minimum message severity level that are considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include (from lowest to highest severity) DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, and PANIC. Each severity level includes the subsequent levels mentioned above. Ensure a value of ERROR or stricter is set.\n\nRationale:\n\nAuditing helps in troubleshooting operational problems and also permits forensic analysis. If log_min_error_statement is not set to the correct value, messages may not be classified as error messages appropriately. Considering general log messages as error messages would make is difficult to find actual errors and considering only stricter severity levels as error messages may skip actual errors to log their SQL statements. The log_min_error_statement flag should be set to ERROR or stricter. This recommendation is applicable to PostgreSQL database instances.\n\nImpact:\n\nTurning on logging will increase the required storage over time. Mismanaged logs may cause your storage costs to increase. Setting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the PostgreSQL instance for which you want to enable the database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag log_min_error_statement from the drop-down menu and set appropriate value.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the log_min_error_statement database flag for every Cloud SQL PosgreSQL database instance using the below command.\n\ngcloud sql instances patch--database-flags log_min_error_statement=Note: This command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default log_min_error_statement is ERROR.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"log_min_error_statement\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Log Min Error Statement: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "Log Min Error Statement: (error|log|fatal|panic)"
    },
    "custom_item_40": {
        "description": "6.2.7 Ensure That the 'Log_min_duration_statement' Database Flag for Cloud SQL PostgreSQL Instance Is Set to '-1' (Disabled)",
        "info": "The log_min_duration_statement flag defines the minimum amount of execution time of a statement in milliseconds where the total duration of the statement is logged. Ensure that log_min_duration_statement is disabled, i.e., a value of -1 is set.\n\nRationale:\n\nLogging SQL statements may include sensitive information that should not be recorded in logs. This recommendation is applicable to PostgreSQL database instances.\n\nImpact:\n\nTurning on logging will increase the required storage over time. Mismanaged logs may cause your storage costs to increase. Setting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the PostgreSQL instance where the database flag needs to be enabled.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag log_min_duration_statement from the drop-down menu and set a value of -1.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nList all Cloud SQL database instances using the following command:\n\ngcloud sql instances list\n\nConfigure the log_min_duration_statement flag for every Cloud SQL PosgreSQL database instance using the below command:\n\ngcloud sql instances patch--database-flags log_min_duration_statement=-1\n\nNote: This command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default log_min_duration_statement is -1.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"log_min_duration_statement\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Log Min Duration Statement: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "Log Min Duration Statement: -1"
    },
    "custom_item_41": {
        "description": "6.2.8 Ensure That 'cloudsql.enable_pgaudit' Database Flag for each Cloud Sql Postgresql Instance Is Set to 'on' For Centralized Logging",
        "info": "Ensure cloudsql.enable_pgaudit database flag for Cloud SQL PostgreSQL instance is set to on to allow for centralized logging.\n\nRationale:\n\nAs numerous other recommendations in this section consist of turning on flags for logging purposes, your organization will need a way to manage these logs. You may have a solution already in place. If you do not, consider installing and enabling the open source pgaudit extension within PostgreSQL and enabling its corresponding flag of cloudsql.enable_pgaudit. This flag and installing the extension enables database auditing in PostgreSQL through the open-source pgAudit extension. This extension provides detailed session and object logging to comply with government, financial, & ISO standards and provides auditing capabilities to mitigate threats by monitoring security events on the instance. Enabling the flag and settings later in this recommendation will send these logs to Google Logs Explorer so that you can access them in a central location. to This recommendation is applicable only to PostgreSQL database instances.\n\nImpact:\n\nEnabling the pgAudit extension can lead to increased data storage requirements and to ensure durability of pgAudit log records in the event of unexpected storage issues, it is recommended to enable the Enable automatic storage increases setting on the instance. Enabling flags via the command line will also overwrite all existing flags, so you should apply all needed flags in the CLI command. Also flags may require a restart of the server to be implemented or will break existing functionality so update your servers at a time of low usage.",
        "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.5,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-6(3),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-6(3),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(d),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv7|6.5,CSCv8|8.5,CSCv8|8.9,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.AN-3,CSF|RS.CO-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-6(3),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|M5.2.5,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"cloudsql.enable_pgaudit\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), CloudSQL Enable PG Audit: \\($value[0])\"",
        "regex": "Database Version: POSTGRES",
        "expect": "CloudSQL Enable PG Audit: on"
    },
    "custom_item_42": {
        "description": "6.3.1 Ensure 'external scripts enabled' database flag for Cloud SQL SQL Server instance is set to 'off'",
        "info": "It is recommended to set external scripts enabled database flag for Cloud SQL SQL Server instance to off\n\nRationale:\n\nexternal scripts enabled enable the execution of scripts with certain remote language extensions. This property is OFF by default. When Advanced Analytics Services is installed, setup can optionally set this property to true. As the External Scripts Enabled feature allows scripts external to SQL such as files located in an R library to be executed, which could adversely affect the security of the system, hence this should be disabled. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nSetting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag external scripts enabled from the drop-down menu, and set its value to off.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the external scripts enabled database flag for every Cloud SQL SQL Server database instance using the below command.\n\ngcloud sql instances patch--database-flags 'external scripts enabled'=off\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default external scripts enabled is off",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53|CM-7(1),800-53|SI-7,800-53|SI-7(1),800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|SI-7,800-53r5|SI-7(1),CN-L3|7.1.3.5(b),CSCv7|2.9,CSCv8|2.7,CSF|PR.DS-6,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|SI-7,ITSG-33|SI-7a.,ITSG-33|SI-7(1),LEVEL|1A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,PCI-DSSv3.2.1|10.5.5,QCSC-v1|3.2,SWIFT-CSCv1|2.3,SWIFT-CSCv1|6.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"external scripts enabled\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), External Scripts Enabled: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "External Scripts Enabled: off"
    },
    "custom_item_43": {
        "description": "6.3.2 Ensure that the 'cross db ownership chaining' database flag for Cloud SQL SQL Server instance is set to 'off'",
        "info": "It is recommended to set cross db ownership chaining database flag for Cloud SQL SQL Server instance to off.\n\nThis flag is deprecated for all SQL Server versions in CGP. Going forward, you can't set its value to on. However, if you have this flag enabled, we strongly recommend that you either remove the flag from your database or set it to off. For cross-database access, use the Microsoft tutorial for signing stored procedures with a certificate.\n\nRationale:\n\nUse the cross db ownership for chaining option to configure cross-database ownership chaining for an instance of Microsoft SQL Server. This server option allows you to control cross-database ownership chaining at the database level or to allow cross-database ownership chaining for all databases. Enabling cross db ownership is not recommended unless all of the databases hosted by the instance of SQL Server must participate in cross-database ownership chaining and you are aware of the security implications of this setting. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nUpdating flags may cause the database to restart. This may cause it to unavailable for a short amount of time, so this is best done at a time of low usage. You should also determine if the tables in your databases reference another table without using credentials for that database, as turning off cross database ownership will break this relationship.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag cross db ownership chaining from the drop-down menu, and set its value to off.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the cross db ownership chaining database flag for every Cloud SQL SQL Server database instance using the below command:\n\ngcloud sql instances patch--database-flags 'cross db ownership chaining'=off\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nThis flag is deprecated for all SQL Server versions. Going forward, you can't set its value to on.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"cross db ownership chaining\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Cross DB Ownership Chaining: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "Cross DB Ownership Chaining: off"
    },
    "custom_item_44": {
        "description": "6.3.3 Ensure 'user Connections' Database Flag for Cloud Sql Sql Server Instance Is Set to a Non-limiting Value",
        "info": "It is recommended to check the user connections for a Cloud SQL SQL Server instance to ensure that it is not artificially limiting connections.\n\nRationale:\n\nThe user connections option specifies the maximum number of simultaneous user connections that are allowed on an instance of SQL Server. The actual number of user connections allowed also depends on the version of SQL Server that you are using, and also the limits of your application or applications and hardware. SQL Server allows a maximum of 32,767 user connections. Because user connections is by default a self-configuring value, with SQL Server adjusting the maximum number of user connections automatically as needed, up to the maximum value allowable. For example, if only 10 users are logged in, 10 user connection objects are allocated. In most cases, you do not have to change the value for this option. The default is 0, which means that the maximum (32,767) user connections are allowed. However if there is a number defined here that limits connections, SQL Server will not allow anymore above this limit. If the connections are at the limit, any new requests will be dropped, potentially causing lost data or outages for those using the database.\n\nImpact:\n\nSetting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag user connections from the drop-down menu, and set its value to your organization recommended value.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the user connections database flag for every Cloud SQL SQL Server database instance using the below command.\n\ngcloud sql instances patch--database-flags 'user connections=[0-32,767]'\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default user connections is set to '0' which does not limit the number of connections, giving the server free reign to facilitate a max of 32,767 connections.",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"user connections\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), User Connections: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "User Connections: @SQLSERVER_USER_CONNECTIONS@"
    },
    "custom_item_45": {
        "description": "6.3.4 Ensure 'user options' database flag for Cloud SQL SQL Server instance is not configured",
        "info": "It is recommended that, user options database flag for Cloud SQL SQL Server instance should not be configured.\n\nRationale:\n\nThe user options option specifies global defaults for all users. A list of default query processing options is established for the duration of a user's work session. The user options option allows you to change the default values of the SET options (if the server's default settings are not appropriate).\n\nA user can override these defaults by using the SET statement. You can configure user options dynamically for new logins. After you change the setting of user options, new login sessions use the new setting; current login sessions are not affected. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nSetting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nClick the X next user options flag shown\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nList all Cloud SQL database Instances\n\ngcloud sql instances list\n\nClear the user options database flag for every Cloud SQL SQL Server database instance using either of the below commands.\n\nClearing all flags to their default value\n\ngcloud sql instances patch--clear-database-flags\n\nOR\nTo clear only user options database flag, configure the database flag by overriding the user options. Exclude user options flag and its value, and keep all other flags you want to configure.\n\ngcloud sql instances patch--database-flags [FLAG1=VALUE1,FLAG2=VALUE2]\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default 'user options' is not configured.",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"user options\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), User Options: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "User Options: null"
    },
    "custom_item_46": {
        "description": "6.3.5 Ensure 'remote access' database flag for Cloud SQL SQL Server instance is set to 'off'",
        "info": "It is recommended to set remote access database flag for Cloud SQL SQL Server instance to off.\n\nRationale:\n\nThe remote access option controls the execution of stored procedures from local or remote servers on which instances of SQL Server are running. This default value for this option is 1. This grants permission to run local stored procedures from remote servers or remote stored procedures from the local server. To prevent local stored procedures from being run from a remote server or remote stored procedures from being run on the local server, this must be disabled. The Remote Access option controls the execution of local stored procedures on remote servers or remote stored procedures on local server. 'Remote access' functionality can be abused to launch a Denial-of-Service (DoS) attack on remote servers by off-loading query processing to a target, hence this should be disabled. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nSetting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag remote access from the drop-down menu, and set its value to off.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the remote access database flag for every Cloud SQL SQL Server database instance using the below command\n\ngcloud sql instances patch--database-flags 'remote access'=off\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nBy default 'remote access' is 'on'.",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|9.2,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"remote access\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Remote Access: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "Remote Access: off"
    },
    "custom_item_47": {
        "description": "6.3.6 Ensure '3625 (trace flag)' database flag for all Cloud SQL Server instances is set to 'on'",
        "info": "It is recommended to set 3625 (trace flag) database flag for Cloud SQL SQL Server instance to on.\n\nRationale:\n\nMicrosoft SQL Trace Flags are frequently used to diagnose performance issues or to debug stored procedures or complex computer systems, but they may also be recommended by Microsoft Support to address behavior that is negatively impacting a specific workload. All documented trace flags and those recommended by Microsoft Support are fully supported in a production environment when used as directed. 3625(trace log) Limits the amount of information returned to users who are not members of the sysadmin fixed server role, by masking the parameters of some error messages using '******'. Setting this in a Google Cloud flag for the instance allows for security through obscurity and prevents the disclosure of sensitive information, hence this is recommended to set this flag globally to on to prevent the flag having been left off, or changed by bad actors. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nChanging flags on a database may cause it to be restarted. The best time to do this is at a time where there is low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n\nTo set a flag that has not been set on the instance before, click Add item, choose the flag 3625 from the drop-down menu, and set its value to on.\n\nClick Save to save your changes.\n\nConfirm your changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nConfigure the 3625 database flag for every Cloud SQL SQL Server database instance using the below command.\n\ngcloud sql instances patch--database-flags '3625=on'\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags you want set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').\n\nDefault Value:\n\nMySQL implementations by default have trace flags turned off, as they are used for logging purposes.",
        "reference": "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"3625\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), 3625: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "3625: on"
    },
    "custom_item_48": {
        "description": "6.3.7 Ensure that the 'contained database authentication' database flag for Cloud SQL on the SQL Server instance is not set to 'on'",
        "info": "It is recommended not to set contained database authentication database flag for Cloud SQL on the SQL Server instance to on.\n\nRationale:\n\nA contained database includes all database settings and metadata required to define the database and has no configuration dependencies on the instance of the Database Engine where the database is installed. Users can connect to the database without authenticating a login at the Database Engine level. Isolating the database from the Database Engine makes it possible to easily move the database to another instance of SQL Server. Contained databases have some unique threats that should be understood and mitigated by SQL Server Database Engine administrators. Most of the threats are related to the USER WITH PASSWORD authentication process, which moves the authentication boundary from the Database Engine level to the database level, hence this is recommended not to enable this flag. This recommendation is applicable to SQL Server database instances.\n\nImpact:\n\nWhen contained database authentication is off (0) for the instance, contained databases cannot be created, or attached to the Database Engine. Turning on logging will increase the required storage over time. Mismanaged logs may cause your storage costs to increase. Setting custom flags via command line on certain instances will cause all omitted flags to be reset to defaults. This may cause you to lose custom flags and could result in unforeseen complications or instance restarts. Because of this, it is recommended you apply these flags changes during a period of low usage.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the SQL Server instance for which you want to enable to database flag.\n\nClick Edit.\n\nScroll down to the Flags section.\n5.If the flag contained database authentication is present and its value is set to 'on', then change it to 'off'.\n\nClick Save.\n\nConfirm the changes under Flags on the Overview page.\n\nFrom Google Cloud CLI\n\nIf any Cloud SQL for SQL Server instance has the database flag contained database authentication set to 'on', then change it to 'off' using the below command:\n\ngcloud sql instances patch--database-flags 'contained database authentication=off'\n\nNote:\nThis command will overwrite all database flags previously set. To keep those and add new ones, include the values for all flags to be set on the instance; any flag not specifically included is set to its default value. For flags that do not take a value, specify the flag name followed by an equals sign ('=').",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | [.settings.databaseFlags[] | select(.name == \"contained database authentication\").value] as $value | \"Instance: \\(.selfLink), Database Version: \\(.databaseVersion), Contained Database Authentication: \\($value[0])\"",
        "regex": "Database Version: SQLSERVER",
        "expect": "Contained Database Authentication: off"
    },
    "custom_item_49": {
        "description": "6.4 Ensure That the Cloud SQL Database Instance Requires All Incoming Connections To Use SSL",
        "info": "It is recommended to enforce all incoming connections to SQL database instance to use SSL.\n\nRationale:\n\nSQL database connections if successfully trapped (MITM); can reveal sensitive data like credentials, database queries, query outputs etc. For security, it is recommended to always use SSL encryption when connecting to your instance. This recommendation is applicable for Postgresql, MySql generation 1, MySql generation 2 and SQL Server 2017 instances.\n\nImpact:\n\nAfter enforcing SSL requirement for connections, existing client will not be able to communicate with Cloud SQL database instance unless they use SSL encrypted connections to communicate to Cloud SQL database instance.",
        "solution": "From Google Cloud Console\n\nGo to https://console.cloud.google.com/sql/instances.\n\nClick on an instance name to see its configuration overview.\n\nIn the left-side panel, select Connections.\n\nIn the security section, select SSL mode as Allow only SSL connections.\n\nUnder Configure SSL server certificates click Create new certificate and save the setting\n\nFrom Google Cloud CLI\nTo enforce SSL encryption for an instance run the command:\n\ngcloud sql instances patch INSTANCE_NAME --ssl-mode= ENCRYPTED_ONLY\n\nNote:\nRESTART is required for type MySQL Generation 1 Instances (backendType: FIRST_GEN) to get this configuration in effect.\n\nDefault Value:\n\nBy default parameter settings: ipConfiguration: sslMode is not set which is equivalent to sslMode:ALLOW_UNENCRYPTED_AND_ENCRYPTED.",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv7|16.5,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | \"Instance: \\(.selfLink), Require SSL: \\(.settings.ipConfiguration.requireSsl)\"",
        "regex": "Require SSL:",
        "expect": "Require SSL: true"
    },
    "custom_item_50": {
        "description": "6.5 Ensure That Cloud SQL Database Instances Do Not Implicitly Whitelist All Public IP Addresses",
        "info": "Database Server should accept connections only from trusted Network(s)/IP(s) and restrict access from public IP addresses.\n\nRationale:\n\nTo minimize attack surface on a Database server instance, only trusted/known and required IP(s) should be white-listed to connect to it.\n\nAn authorized network should not have IPs/networks configured to 0.0.0.0/0 which will allow access to the instance from anywhere in the world. Note that authorized networks apply only to instances with public IPs.\n\nImpact:\n\nThe Cloud SQL database instance would not be available to public IP addresses.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nClick the instance name to open its Instance details page.\n\nUnder the Configuration section click Edit configurations\n\nUnder Configuration options expand the Connectivity section.\n\nClick the delete icon for the authorized network 0.0.0.0/0.\n\nClick Save to update the instance.\n\nFrom Google Cloud CLI\nUpdate the authorized network list by dropping off any addresses.\n\ngcloud sql instances patch--authorized-networks=IP_ADDR1,IP_ADDR2...\n\nPrevention:\nTo prevent new SQL instances from being configured to accept incoming connections from any IP addresses, set up a Restrict Authorized Networks on Cloud SQL instances Organization Policy at: https://console.cloud.google.com/iam-admin/orgpolicies/sql-restrictAuthorizedNetworks.\n\nDefault Value:\n\nBy default, authorized networks are not configured. Remote connection to Cloud SQL database instance is not possible unless authorized networks are configured.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | \"Instance: \\(.selfLink), Authorized Networks: \\(.settings.ipConfiguration.authorizedNetworks[].value)\"",
        "regex": "Authorized Networks:",
        "not_expect": "0.0.0.0/0"
    },
    "custom_item_51": {
        "description": "6.7 Ensure That Cloud SQL Database Instances Are Configured With Automated Backups",
        "info": "It is recommended to have all SQL database instances set to enable automated backups.\n\nRationale:\n\nBackups provide a way to restore a Cloud SQL instance to recover lost data or recover from a problem with that instance. Automated backups need to be set for any instance that contains data that should be protected from loss or damage. This recommendation is applicable for SQL Server, PostgreSql, MySql generation 1 and MySql generation 2 instances.\n\nImpact:\n\nAutomated Backups will increase required size of storage and costs associated with it.",
        "solution": "From Google Cloud Console\n\nGo to the Cloud SQL Instances page in the Google Cloud Console by visiting https://console.cloud.google.com/sql/instances.\n\nSelect the instance where the backups need to be configured.\n\nClick Edit.\n\nIn the Backups section, check 'Enable automated backups', and choose a backup window.\n\nClick Save.\n\nFrom Google Cloud CLI\n\nList all Cloud SQL database instances using the following command:\n\ngcloud sql instances list --format=json | jq '. | map(select(.instanceType != 'READ_REPLICA_INSTANCE')) | .[].name'\n\nNOTE: gcloud command has been added with the filter to exclude read-replicas instances, as GCP do not provide Automated Backups for read-replica instances.\n\nEnable Automated backups for every Cloud SQL database instance using the below command:\n\ngcloud sql instances patch--backup-start-time <[HH:MM]>\n\nThe backup-start-time parameter is specified in 24-hour time, in the UTC +-00 time zone, and specifies the start of a 4-hour backup window. Backups can start any time during the backup window.\n\nDefault Value:\n\nBy default, automated backups are not configured for Cloud SQL instances. Data backup is not possible on any Cloud SQL instance unless Automated Backup is configured.",
        "reference": "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.1,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1A,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "listSqlInstances",
        "json_transform": ".projects[].value.items[] | \"Instance: \\(.selfLink), Backup Enabled: \\(.settings.backupConfiguration.enabled)\"",
        "regex": "Backup Enabled:",
        "expect": "Backup Enabled: true"
    },
    "custom_item_52": {
        "description": "7.1 Ensure That BigQuery Datasets Are Not Anonymously or Publicly Accessible",
        "info": "It is recommended that the IAM policy on BigQuery datasets does not allow anonymous and/or public access.\n\nRationale:\n\nGranting permissions to allUsers or allAuthenticatedUsers allows anyone to access the dataset. Such access might not be desirable if sensitive data is being stored in the dataset. Therefore, ensure that anonymous and/or public access to a dataset is not allowed.\n\nImpact:\n\nThe dataset is not publicly accessible. Explicit modification of IAM privileges would be necessary to make them publicly accessible.",
        "solution": "From Google Cloud Console\n\nGo to BigQuery by visiting: https://console.cloud.google.com/bigquery.\n\nSelect the dataset from 'Resources'.\n\nClick SHARING near the right side of the window and select Permissions.\n\nReview each attached role.\n\nClick the delete icon for each member allUsers or allAuthenticatedUsers. On the popup click Remove.\n\nFrom Google Cloud CLI\nList the name of all datasets.\n\nbq ls\n\nRetrieve the data set details:\n\nbq show --format=prettyjson PROJECT_ID:DATASET_NAME > PATH_TO_FILE\n\nIn the access section of the JSON file, update the dataset information to remove all roles containing allUsers or allAuthenticatedUsers.\nUpdate the dataset:\n\nbq update --source PATH_TO_FILE PROJECT_ID:DATASET_NAME\n\nPrevention:\nYou can prevent Bigquery dataset from becoming publicly accessible by setting up the Domain restricted sharing organization policy at: https://console.cloud.google.com/iam-admin/orgpolicies/iam-allowedPolicyMemberDomains .\n\nDefault Value:\n\nBy default, BigQuery datasets are not publicly accessible.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/11843",
        "request": "getBqDataset",
        "json_transform": ".projects[].value.datasets[] | .selfLink as $selfLink | .value.access[] | \"Bucket: \\($selfLink), Role: \\(.role), Special Group: \\(.specialGroup)\"",
        "regex": "Special Group: (allUsers|allAuthenticatedUsers)",
        "not_expect": "Special Group: (allUsers|allAuthenticatedUsers)"
    }
}