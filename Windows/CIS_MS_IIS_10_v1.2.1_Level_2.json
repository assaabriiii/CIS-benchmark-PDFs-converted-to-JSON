{
    "custom_item_1": {
        "description": "Verify IIS is installed.",
        "value_data": "(internet|iis)",
        "reg_key": "HKLM\\SYSTEM\\CurrentControlSet\\Services\\W3SVC",
        "reg_item": "ImagePath"
    },
    "custom_item_2": {
        "description": "Verify IIS 10 installed.",
        "value_data": "^Version @PRODUCT_VERSION@[\\s]*$",
        "reg_key": "HKLM\\Software\\Microsoft\\Inetstp",
        "reg_item": "VersionString"
    },
    "custom_item_3": {
        "description": "Windows Server 2016/2019/2022 and Windows 10",
        "value_data": "^[a-zA-Z0-9\\(\\)\\s]*@PLATFORM_VERSION@[a-zA-Z0-9\\(\\)\\s]*$",
        "reg_key": "HKLM\\Software\\Microsoft\\Windows Nt\\Currentversion",
        "reg_item": "ProductName"
    },
    "custom_item_4": {
        "description": "Verify .net extensibility is installed - NetFxExtensibility45",
        "reg_key": "HKLM\\Software\\Microsoft\\Inetstp\\Components",
        "reg_item": "NetFxExtensibility45"
    },
    "custom_item_5": {
        "description": "Verify .net extensibility is installed - ASPNET45",
        "reg_key": "HKLM\\Software\\Microsoft\\Inetstp\\Components",
        "reg_item": "ASPNET45"
    },
    "custom_item_6": {
        "description": "2.4 Ensure 'forms authentication' is set to use cookies - Default",
        "info": "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.\n\nRationale:\n\nUsing cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.\n\nImpact:\n\nSite visitor's session identifier will be stored via cookies.",
        "solution": "Open IIS Manager and navigate to the level where Forms Authentication is enabled\n\nIn Features View, double-click Authentication\n\nOn the Authentication page, select Forms Authentication\n\nIn the Actions pane, click Edit\n\nIn the Cookie settings section, select Use cookies from the Mode dropdown\n\nOR\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'\n\nDefault Value:\n\nThe default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "UseCookies",
        "appcmd_args": "list config /section:system.web/authentication /text:forms.cookieless"
    },
    "custom_item_7": {
        "description": "2.4 Ensure 'forms authentication' is set to use cookies - Application",
        "info": "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.\n\nRationale:\n\nUsing cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.\n\nImpact:\n\nSite visitor's session identifier will be stored via cookies.",
        "solution": "Open IIS Manager and navigate to the level where Forms Authentication is enabled\n\nIn Features View, double-click Authentication\n\nOn the Authentication page, select Forms Authentication\n\nIn the Actions pane, click Edit\n\nIn the Cookie settings section, select Use cookies from the Mode dropdown\n\nOR\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'\n\nDefault Value:\n\nThe default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "UseCookies",
        "appcmd_args": "list config {} /section:system.web/authentication /text:forms.cookieless",
        "appcmd_filter": "list config {} /section:system.web/authentication /text:mode",
        "appcmd_filter_value": "Forms",
        "appcmd_list": "list apps"
    },
    "custom_item_8": {
        "description": "2.8 Ensure 'credentials' are not stored in configuration files - Default",
        "info": "Theelement of theelement allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization.\n\nNote: Theelement only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider.\n\nIt is recommended to avoid storing passwords in the configuration file even in form of hash.\n\nRationale:\n\nAuthentication credentials should always be protected to reduce the risk of stolen authentication credentials. For security reasons, it is recommended that user credentials not be stored an any IIS configuration files.\n\nImpact:\n\nPasswords in the configuration file will be stored in form of a hash.",
        "solution": "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:\n\nLocate and open the configuration file where the credentials are stored\n\nFind theelement\n\nIf present, remove the section\n\nThis will remove all references to stored users in the configuration files.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nRemove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/authentication/forms/credentials' -name '.'",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": ".*user.*",
        "appcmd_args": "list config /section:system.web/authentication"
    },
    "custom_item_9": {
        "description": "2.8 Ensure 'credentials' are not stored in configuration files - Applications",
        "info": "Theelement of theelement allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization.\n\nNote: Theelement only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider.\n\nIt is recommended to avoid storing passwords in the configuration file even in form of hash.\n\nRationale:\n\nAuthentication credentials should always be protected to reduce the risk of stolen authentication credentials. For security reasons, it is recommended that user credentials not be stored an any IIS configuration files.\n\nImpact:\n\nPasswords in the configuration file will be stored in form of a hash.",
        "solution": "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:\n\nLocate and open the configuration file where the credentials are stored\n\nFind theelement\n\nIf present, remove the section\n\nThis will remove all references to stored users in the configuration files.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nRemove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/authentication/forms/credentials' -name '.'",
        "reference": "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": ".*user.*",
        "appcmd_args": "list config /section:system.web/authentication",
        "appcmd_filter": "list config {} /section:system.web/authentication /text:mode",
        "appcmd_filter_value": "Forms",
        "appcmd_list": "list apps"
    },
    "custom_item_10": {
        "description": "Verify .net extensibility is installed - ASPNET45",
        "reg_key": "HKLM\\Software\\Microsoft\\Inetstp\\Components",
        "reg_item": "ASPNET45"
    },
    "custom_item_11": {
        "description": "Verify .net extensibility is installed - NetFxExtensibility45",
        "reg_key": "HKLM\\Software\\Microsoft\\Inetstp\\Components",
        "reg_item": "NetFxExtensibility45"
    },
    "custom_item_12": {
        "description": "3.2 Ensure 'debug' is turned off - Default",
        "info": "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.\n\nThis is a defense in depth recommendation due to thein the machine.config configuration file overriding any debug settings.\n\nIt is recommended that debugging still be turned off.\n\nRationale:\n\nSettingto false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.\n\nImpact:\n\nDebugging will be disabled.",
        "solution": "To use the UI to make this change:\n\nOpen IIS Manager and navigate desired server, site, or application\n\nIn Features View, double-click .NET Compilation\n\nOn the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False\n\nWhen finished, click Apply in the Actions pane\n\nNote: Theswitch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/compilation' -name 'debug' -value 'False'\n\nDefault Value:\n\nThe compilation of debug binaries is not enabled by default.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config /section:system.web/compilation /text:debug"
    },
    "custom_item_13": {
        "description": "3.2 Ensure 'debug' is turned off - Applications",
        "info": "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.\n\nThis is a defense in depth recommendation due to thein the machine.config configuration file overriding any debug settings.\n\nIt is recommended that debugging still be turned off.\n\nRationale:\n\nSettingto false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.\n\nImpact:\n\nDebugging will be disabled.",
        "solution": "To use the UI to make this change:\n\nOpen IIS Manager and navigate desired server, site, or application\n\nIn Features View, double-click .NET Compilation\n\nOn the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False\n\nWhen finished, click Apply in the Actions pane\n\nNote: Theswitch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/compilation' -name 'debug' -value 'False'\n\nDefault Value:\n\nThe compilation of debug binaries is not enabled by default.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config {} /section:system.web/compilation /text:debug",
        "appcmd_list": "list apps"
    },
    "custom_item_14": {
        "description": "3.3 Ensure custom error messages are not off - Default",
        "info": "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. Thetag in the web.config has three modes:\n\nOn: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host\n\nOff: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host\n\nRemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value\n\nThis is a defense in depth recommendation due to thein the machine.config file overriding any settings for customErrors to be turned Off.\n\nIt is recommended that customErrors still be turned to On or RemoteOnly.\n\nRationale:\n\ncustomErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.\n\nImpact:\n\nN/A",
        "solution": "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:\n\nOpen the IIS Manager GUI and navigate to the site to be configured\n\nIn Features View, find and double-click .NET Error Pages icon\n\nIn the Actions Pane, click Edit Feature Settings\n\nIn modal dialog, choose On or Remote Only for Mode settings\n\nClick OK\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'\n\nDefault Value:\n\nThe default value is.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "RemoteOnly",
        "appcmd_args": "list config /section:system.web/customErrors /text:mode"
    },
    "custom_item_15": {
        "description": "3.3 Ensure custom error messages are not off - Applications",
        "info": "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. Thetag in the web.config has three modes:\n\nOn: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host\n\nOff: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host\n\nRemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value\n\nThis is a defense in depth recommendation due to thein the machine.config file overriding any settings for customErrors to be turned Off.\n\nIt is recommended that customErrors still be turned to On or RemoteOnly.\n\nRationale:\n\ncustomErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.\n\nImpact:\n\nN/A",
        "solution": "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:\n\nOpen the IIS Manager GUI and navigate to the site to be configured\n\nIn Features View, find and double-click .NET Error Pages icon\n\nIn the Actions Pane, click Edit Feature Settings\n\nIn modal dialog, choose On or Remote Only for Mode settings\n\nClick OK\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'\n\nDefault Value:\n\nThe default value is.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "RemoteOnly",
        "appcmd_args": "list config {} /section:system.web/customErrors /text:mode",
        "appcmd_list": "list apps"
    },
    "custom_item_16": {
        "description": "3.5 Ensure ASP.NET stack tracing is not enabled - Default",
        "info": "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.\n\nThis is a defense in depth recommendation due to thein the machine.config file overriding any settings for ASP.NET stack tracing that are left on.\n\nIt is recommended that ASP.NET stack tracing still be turned off.\n\nRationale:\n\nIn an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.\n\nIf necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.\n\nImpact:\n\nASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site.",
        "solution": "Ensureis enabled in the machine.config.\n\nRemove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.\n\nPer Page:\n\nRemove any references to:\n\nTrace='true'\n\nPer Application:OR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/trace' -name 'enabled' -value 'False'\n\nDefault Value:\n\nThe default value for ASP.NET tracing is off.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config /section:system.web/trace /text:enabled"
    },
    "custom_item_17": {
        "description": "3.5 Ensure ASP.NET stack tracing is not enabled - Applications",
        "info": "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.\n\nThis is a defense in depth recommendation due to thein the machine.config file overriding any settings for ASP.NET stack tracing that are left on.\n\nIt is recommended that ASP.NET stack tracing still be turned off.\n\nRationale:\n\nIn an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.\n\nIf necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.\n\nImpact:\n\nASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site.",
        "solution": "Ensureis enabled in the machine.config.\n\nRemove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.\n\nPer Page:\n\nRemove any references to:\n\nTrace='true'\n\nPer Application:OR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/trace' -name 'enabled' -value 'False'\n\nDefault Value:\n\nThe default value for ASP.NET tracing is off.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config {} /section:system.web/trace /text:enabled",
        "appcmd_list": "list apps"
    },
    "custom_item_18": {
        "description": "3.6 Ensure 'httpcookie' mode is configured for session state - Default",
        "info": "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.\n\nSession information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.\n\nIt is recommended that session state be configured to UseCookies.\n\nRationale:\n\nCookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.\n\nImpact:\n\nSession information in URI session IDs will not show up in proxy logs.",
        "solution": "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:\n\nOpen the IIS Manager GUI and navigate desired server, site, or application\n\nIn Features View, find and double-click the Session State icon\n\nIn the Cookie Settings section, choose Use Cookies from the Mode dropdown\n\nIn the Actions Pane, click Apply\n\nTo use AppCmd.exe to configure sessionState at the server level, the command would look like this:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20\n\nWhen Appcmd.exe is used to configure theelement at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'\n\nDefault Value:\n\nBy default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "UseCookies",
        "appcmd_args": "list config /section:system.web/sessionState /text:cookieless"
    },
    "custom_item_19": {
        "description": "3.6 Ensure 'httpcookie' mode is configured for session state - Applications",
        "info": "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.\n\nSession information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.\n\nIt is recommended that session state be configured to UseCookies.\n\nRationale:\n\nCookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.\n\nImpact:\n\nSession information in URI session IDs will not show up in proxy logs.",
        "solution": "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:\n\nOpen the IIS Manager GUI and navigate desired server, site, or application\n\nIn Features View, find and double-click the Session State icon\n\nIn the Cookie Settings section, choose Use Cookies from the Mode dropdown\n\nIn the Actions Pane, click Apply\n\nTo use AppCmd.exe to configure sessionState at the server level, the command would look like this:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20\n\nWhen Appcmd.exe is used to configure theelement at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'\n\nDefault Value:\n\nBy default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "UseCookies",
        "appcmd_args": "list config {} /section:system.web/sessionState /text:cookieless",
        "appcmd_list": "list apps"
    },
    "custom_item_20": {
        "description": "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Default",
        "info": "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.\n\nThe following validation methods are available:\n\nAdvanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys\n\nMessage Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data\n\nSecure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest\n\nTriple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES\n\nIt is recommended that AES or SHA1 methods be configured for use at the global level.\n\nRationale:\n\nSetting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.\n\nImpact:\n\nN/A",
        "solution": "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1\n\nNote: When Appcmd.exe is used to configure theelement at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.\n\nDefault Value:\n\nThe default Machine Key validation method is SHA1.",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(SHA1|AES|HMACSHA256|HMACSHA512)[\\s]*$",
        "appcmd_args": "list config /section:machineKey /text:validation"
    },
    "custom_item_21": {
        "description": "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Applications",
        "info": "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.\n\nThe following validation methods are available:\n\nAdvanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys\n\nMessage Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data\n\nSecure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest\n\nTriple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES\n\nIt is recommended that AES or SHA1 methods be configured for use at the global level.\n\nRationale:\n\nSetting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.\n\nImpact:\n\nN/A",
        "solution": "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1\n\nNote: When Appcmd.exe is used to configure theelement at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.\n\nDefault Value:\n\nThe default Machine Key validation method is SHA1.",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(SHA1|AES|HMACSHA256|HMACSHA512)[\\s]*$",
        "appcmd_args": "list config {} /section:machineKey /text:validation",
        "appcmd_list": "list apps"
    },
    "custom_item_22": {
        "description": "3.11 Ensure X-Powered-By Header is removed - Default",
        "info": "The x-powered-by headers specify the underlying technology used by the webserver.\n\nRationale:\n\nAttackers are able to conduct reconnaissance on a website using these response headers. This header could be used to target attacks for specific known vulnerabilities associated with the underlying technology. Removing this header will prevent targeting of your application for specific exploits by non-determined attackers.\n\nWhile this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers.\n\nImpact:\n\nX-powered-by headers will not be available on the webserver.",
        "solution": "Enter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config  -section:system.webServer/httpProtocol /-'customHeaders.[name='X-Powered-By']' /commit:apphost\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nRemove-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webserver/httpProtocol/customHeaders' -name '.' -AtElement @{name='X-Powered-By'}",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "X-powered-by",
        "appcmd_args": "list config /section:system.webServer/httpProtocol"
    },
    "custom_item_23": {
        "description": "3.11 Ensure X-Powered-By Header is removed - Applications",
        "info": "The x-powered-by headers specify the underlying technology used by the webserver.\n\nRationale:\n\nAttackers are able to conduct reconnaissance on a website using these response headers. This header could be used to target attacks for specific known vulnerabilities associated with the underlying technology. Removing this header will prevent targeting of your application for specific exploits by non-determined attackers.\n\nWhile this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers.\n\nImpact:\n\nX-powered-by headers will not be available on the webserver.",
        "solution": "Enter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config  -section:system.webServer/httpProtocol /-'customHeaders.[name='X-Powered-By']' /commit:apphost\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nRemove-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webserver/httpProtocol/customHeaders' -name '.' -AtElement @{name='X-Powered-By'}",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "X-powered-by",
        "appcmd_args": "list config {} /section:system.webServer/httpProtocol",
        "appcmd_list": "list apps"
    },
    "custom_item_24": {
        "description": "3.12 Ensure Server Header is removed - Default",
        "info": "The server header headers specify the underlying technology used by the application.\n\nRationale:\n\nWhile this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. The server header removal directive is a new feature in IIS 10 that can assist in mitigating this risk.\n\nImpact:\n\nThis will remove the server header.",
        "solution": "Enter the following command to use AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/security/requestFiltering /removeServerHeader:'True'  /commit:apphost\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/' -filter 'system.webServer/security/requestFiltering' -name 'removeServerHeader' -value 'True'\n\nDefault Value:\n\nMicrosoft-IIS/10.0",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "appcmd_args": "list config /section:system.webServer/security/requestFiltering"
    },
    "custom_item_25": {
        "description": "3.12 Ensure Server Header is removed - Applications",
        "info": "The server header headers specify the underlying technology used by the application.\n\nRationale:\n\nWhile this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. The server header removal directive is a new feature in IIS 10 that can assist in mitigating this risk.\n\nImpact:\n\nThis will remove the server header.",
        "solution": "Enter the following command to use AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/security/requestFiltering /removeServerHeader:'True'  /commit:apphost\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/' -filter 'system.webServer/security/requestFiltering' -name 'removeServerHeader' -value 'True'\n\nDefault Value:\n\nMicrosoft-IIS/10.0",
        "reference": "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "appcmd_args": "list config {} /section:system.webServer/security/requestFiltering",
        "appcmd_list": "list apps"
    },
    "custom_item_26": {
        "description": "4.1 Ensure 'maxAllowedContentLength' is configured - Default",
        "info": "The maxAllowedContentLength Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the server. Configuring this value enables the total request size to be restricted to a configured value.\n\nIt is recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or application.\n\nRationale:\n\nSetting an appropriate value that has been tested for the maxAllowedContentLength filter will lower the impact an abnormally large request would otherwise have on IIS and/or web applications. This helps to ensure availability of web content and services, and may also help mitigate the risk of buffer overflow type attacks in unmanaged components.\n\nImpact:\n\nSize of requests be restricted to the maximum value set.",
        "solution": "The MaxAllowedContentLength Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, click on the server, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key the maximum content length in bytes that will allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB)\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxAllowedContentLength:30000000\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxAllowedContentLength' -value 30000000\n\nDefault Value:\n\nWhen request filtering is installed on a system, the default value is: maxAllowedContentLength='30000000', which is approximately 28.6MB.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2M,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(3[0]{7}|[0-2][0-9]{7}|[0-9]{1,7})$",
        "appcmd_args": "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxAllowedContentLength"
    },
    "custom_item_27": {
        "description": "4.1 Ensure 'maxAllowedContentLength' is configured - Applications",
        "info": "The maxAllowedContentLength Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the server. Configuring this value enables the total request size to be restricted to a configured value.\n\nIt is recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or application.\n\nRationale:\n\nSetting an appropriate value that has been tested for the maxAllowedContentLength filter will lower the impact an abnormally large request would otherwise have on IIS and/or web applications. This helps to ensure availability of web content and services, and may also help mitigate the risk of buffer overflow type attacks in unmanaged components.\n\nImpact:\n\nSize of requests be restricted to the maximum value set.",
        "solution": "The MaxAllowedContentLength Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, click on the server, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key the maximum content length in bytes that will allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB)\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxAllowedContentLength:30000000\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxAllowedContentLength' -value 30000000\n\nDefault Value:\n\nWhen request filtering is installed on a system, the default value is: maxAllowedContentLength='30000000', which is approximately 28.6MB.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2M,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(3[0]{7}|[0-2][0-9]{7}|[0-9]{1,7})$",
        "appcmd_args": "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxAllowedContentLength",
        "appcmd_list": "list apps"
    },
    "custom_item_28": {
        "description": "4.2 Ensure 'maxURL request filter' is configured - Default",
        "info": "The maxURL attribute of theproperty is the maximum length (in Bytes) in which a requested URL can be (excluding query string) in order for IIS to accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server will accept.\n\nIt is recommended that a limit be put on the length of URL.\n\nRationale:\n\nWith a properly configured Request Filter limiting the amount of data accepted in the URL, chances of undesired application behaviors affecting the availability of content and services are reduced.\n\nImpact:\n\nLength of the URL will be restricted to the maximum value set.",
        "solution": "The MaxURL Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, click on the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key the maximum URL length in bytes that has been tested with web applications\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxUrl' -value 4096\n\nDefault Value:\n\nWhen Request Filtering is installed on a system, the default value for maxURL='4096'.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(409[0-6]|40[0-8][0-9]|[0-3][0-9]{3}|[0-9]{1,3})$",
        "appcmd_args": "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxURL"
    },
    "custom_item_29": {
        "description": "4.2 Ensure 'maxURL request filter' is configured - Applications",
        "info": "The maxURL attribute of theproperty is the maximum length (in Bytes) in which a requested URL can be (excluding query string) in order for IIS to accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server will accept.\n\nIt is recommended that a limit be put on the length of URL.\n\nRationale:\n\nWith a properly configured Request Filter limiting the amount of data accepted in the URL, chances of undesired application behaviors affecting the availability of content and services are reduced.\n\nImpact:\n\nLength of the URL will be restricted to the maximum value set.",
        "solution": "The MaxURL Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, click on the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key the maximum URL length in bytes that has been tested with web applications\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxUrl' -value 4096\n\nDefault Value:\n\nWhen Request Filtering is installed on a system, the default value for maxURL='4096'.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(409[0-6]|40[0-8][0-9]|[0-3][0-9]{3}|[0-9]{1,3})$",
        "appcmd_args": "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxURL",
        "appcmd_list": "list apps"
    },
    "custom_item_30": {
        "description": "4.3 Ensure 'MaxQueryString request filter' is configured - Default",
        "info": "The MaxQueryString Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow for websites or applications.\n\nIt is recommended that values always be established to limit the amount of data that can be accepted in the query string.\n\nRationale:\n\nWith a properly configured Request Filter limiting the amount of data accepted in the query string, chances of undesired application behaviors such as app pool failures are reduced.\n\nImpact:\n\nThe amount of data to be accepted in the query string will be limited.",
        "solution": "The MaxQueryString Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, go to the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key in a safe upper bound in the Maximum query string (Bytes) textbox\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxQueryString:2048\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxQueryString' -value 2048\n\nDefault Value:\n\nWhen request filtering is installed on a system, the default value is maxQueryString='2048'.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(204[0-8]|20[0-3][0-9]|[0-1][0-9]{3}|[0-9]{1,3})$",
        "appcmd_args": "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxQueryString"
    },
    "custom_item_31": {
        "description": "4.3 Ensure 'MaxQueryString request filter' is configured - Applications",
        "info": "The MaxQueryString Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow for websites or applications.\n\nIt is recommended that values always be established to limit the amount of data that can be accepted in the query string.\n\nRationale:\n\nWith a properly configured Request Filter limiting the amount of data accepted in the query string, chances of undesired application behaviors such as app pool failures are reduced.\n\nImpact:\n\nThe amount of data to be accepted in the query string will be limited.",
        "solution": "The MaxQueryString Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, go to the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the Request Limits section, key in a safe upper bound in the Maximum query string (Bytes) textbox\n\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxQueryString:2048\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxQueryString' -value 2048\n\nDefault Value:\n\nWhen request filtering is installed on a system, the default value is maxQueryString='2048'.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "^(204[0-8]|20[0-3][0-9]|[0-1][0-9]{3}|[0-9]{1,3})$",
        "appcmd_args": "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxQueryString",
        "appcmd_list": "list apps"
    },
    "custom_item_32": {
        "description": "4.4 Ensure non-ASCII characters in URLs are not allowed - Default",
        "info": "This feature is used to allow or reject all requests to IIS that contain non-ASCII characters. When using this feature, Request Filtering will deny the request if high-bit characters are present in the URL. The UrlScan equivalent is AllowHighBitCharacters.\n\nIt is recommended that requests containing non-ASCII characters be rejected, where possible.\n\nRationale:\n\nThis feature can help defend against canonicalization attacks, reducing the potential attack surface of servers, sites, and/or applications.\n\nImpact:\n\nRequests containing non-ASCII characters be rejected.",
        "solution": "The AllowHighBitCharacters Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, go to the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the General section, uncheck Allow high-bit characters\n\nNote: Disallowing high-bit ASCII characters in the URL may negatively impact the functionality of sites requiring international language support.\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /allowHighBitCharacters:false\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowHighBitCharacters' -value 'False'\n\nDefault Value:\n\nWhen Request Filtering is installed on a system, the default behavior is to allow high-bit characters in URI.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config /section:system.webServer/security/requestFiltering /text:allowHighBitCharacters"
    },
    "custom_item_33": {
        "description": "4.4 Ensure non-ASCII characters in URLs are not allowed - Applications",
        "info": "This feature is used to allow or reject all requests to IIS that contain non-ASCII characters. When using this feature, Request Filtering will deny the request if high-bit characters are present in the URL. The UrlScan equivalent is AllowHighBitCharacters.\n\nIt is recommended that requests containing non-ASCII characters be rejected, where possible.\n\nRationale:\n\nThis feature can help defend against canonicalization attacks, reducing the potential attack surface of servers, sites, and/or applications.\n\nImpact:\n\nRequests containing non-ASCII characters be rejected.",
        "solution": "The AllowHighBitCharacters Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:\n\nOpen Internet Information Services (IIS) Manager\n\nIn the Connections pane, go to the connection, site, application, or directory to be configured\n\nIn the Home pane, double-click Request Filtering\n\nClick Edit Feature Settings... in the Actions pane\n\nUnder the General section, uncheck Allow high-bit characters\n\nNote: Disallowing high-bit ASCII characters in the URL may negatively impact the functionality of sites requiring international language support.\nEnter the following command in AppCmd.exe to configure:\n\n%systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /allowHighBitCharacters:false\n\nOR\n\nEnter the following command in PowerShell to configure:\n\nSet-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowHighBitCharacters' -value 'False'\n\nDefault Value:\n\nWhen Request Filtering is installed on a system, the default behavior is to allow high-bit characters in URI.",
        "reference": "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "false",
        "appcmd_args": "list config {} /section:system.webServer/security/requestFiltering /text:allowHighBitCharacters",
        "appcmd_list": "list apps"
    },
    "custom_item_34": {
        "description": "7.1 Ensure HSTS Header is set - Server",
        "info": "HTTP Strict Transport Security (HSTS) allows a site to inform the user agent to communicate with the site only over HTTPS. This header takes two parameters: max-age, 'specifies the number of seconds, after the reception of the STS header field, during which the user agent regards the host (from whom the message was received) as a Known HSTS Host [speaks only HTTPS]'; and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains. If includeSubDomains is included in the header, it provides the following definition: this HSTS Policy also applies to any hosts whose domain names are subdomains of the Known HSTS Host's domain name.\n\nRationale:\n\nHTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from http:// to https:// URLs. HSTS relies on the User Agent/Browser to enforce the required behavior. All major browsers support it. If the browser doesn't support HSTS, it will be ignored.\n\nWhen a browser knows that a domain has enabled HSTS, it does two things:\n\nAlways uses an https:// connection, even when clicking on an http:// link or after typing a domain into the location bar without specifying a protocol.\n\nRemoves the ability for users to click through warnings about invalid certificates.\n\nA domain instructs browsers that it has enabled HSTS by returning an HTTP header over an HTTPS connection.\n\nImpact:\n\nThe user agent will only be able to communicate with the site over HTTPS.",
        "solution": "Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to meet your requirements.\n\nTo set the HTTP Header at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'\n\nTo set the HTTP Header and include subdomains at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'\n\nTo set the HTTP Header at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config 'Website'-section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'\n\nTo set the HTTP Header and include subdomains at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config 'Website'-section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|18,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "appcmd_args": "list config /section:system.webServer/httpProtocol /xml:*"
    },
    "custom_item_35": {
        "description": "7.1 Ensure HSTS Header is set - Sites",
        "info": "HTTP Strict Transport Security (HSTS) allows a site to inform the user agent to communicate with the site only over HTTPS. This header takes two parameters: max-age, 'specifies the number of seconds, after the reception of the STS header field, during which the user agent regards the host (from whom the message was received) as a Known HSTS Host [speaks only HTTPS]'; and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains. If includeSubDomains is included in the header, it provides the following definition: this HSTS Policy also applies to any hosts whose domain names are subdomains of the Known HSTS Host's domain name.\n\nRationale:\n\nHTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from http:// to https:// URLs. HSTS relies on the User Agent/Browser to enforce the required behavior. All major browsers support it. If the browser doesn't support HSTS, it will be ignored.\n\nWhen a browser knows that a domain has enabled HSTS, it does two things:\n\nAlways uses an https:// connection, even when clicking on an http:// link or after typing a domain into the location bar without specifying a protocol.\n\nRemoves the ability for users to click through warnings about invalid certificates.\n\nA domain instructs browsers that it has enabled HSTS by returning an HTTP header over an HTTPS connection.\n\nImpact:\n\nThe user agent will only be able to communicate with the site over HTTPS.",
        "solution": "Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to meet your requirements.\n\nTo set the HTTP Header at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'\n\nTo set the HTTP Header and include subdomains at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'\n\nTo set the HTTP Header at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config 'Website'-section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'\n\nTo set the HTTP Header and include subdomains at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:\n\n%systemroot%\\system32\\inetsrv\\appcmd.exe set config 'Website'-section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|18,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "appcmd_args": "list config {} /section:system.webServer/httpProtocol /xml:*",
        "appcmd_list": "list sites"
    },
    "custom_item_36": {
        "description": "7.12 Ensure TLS Cipher Suite ordering is Configured",
        "info": "Cipher suites are a named combination of authentication, encryption, message authentication code, and key exchange algorithms used for the security settings of a network connection using TLS protocol. Clients send a cipher list and a list of ciphers that it supports in order of preference to a server. The server then replies with the cipher suite that it selects from the client cipher suite list.\n\nRationale:\n\nCipher suites should be ordered from strongest to weakest in order to ensure that the more secure configuration is used for encryption between the server and client.\n\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n\nAvoid cipher suits that do not provide Perfect Forward Secrecy or use weak hashing function, use them only if you need to support backwards compatibility and in the bottom of the list and you will have to create exceptions for the items that cause this to become out of compliance:\n\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (uses SHA-1)\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (uses SHA-1)\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (uses SHA-1)\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (uses SHA-1)\nTLS_RSA_WITH_AES_256_GCM_SHA384 (lack of Perfect Forward Secrecy)\nTLS_RSA_WITH_AES_128_GCM_SHA256 (lack of Perfect Forward Secrecy)\nTLS_RSA_WITH_AES_256_CBC_SHA256 (lack of Perfect Forward Secrecy)\nTLS_RSA_WITH_AES_128_CBC_SHA256 (lack of Perfect Forward Secrecy)\nTLS_RSA_WITH_AES_256_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy)\nTLS_RSA_WITH_AES_128_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy)\n\nNote: HTTP/2 compatibility: first 4 ciphers (in bold) in the top part list are compatible with HTTP/2\n\nImpact:\n\nCipher ordering is important to ensure that the most secure ciphers are listed first and will be applied over weaker ciphers when possible.",
        "solution": "Perform the following to configure TLS cipher suite order:\n\nSet the following Registry key to TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.\n\nHKLM\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002:Functions\n\nTo configure TLS cipher suite order using PowerShell enter the following command:\n\nNew-Item 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002' -Force | Out-Null\n\nNew-ItemProperty -path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002' -name 'Functions' -value 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' -PropertyType 'MultiString' -Force | Out-Null",
        "reference": "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/13949",
        "value_data": "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
        "powershell_args": "$output=([string](Get-ItemProperty -Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002).Functions); foreach-object { if(!$output){ $result='No entries found' } else { $result=$output }; $result };"
    }
}