{
    "custom_item_1": {
        "description": "1.6 Enforce password complexity - minimum password length",
        "info": "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:\n\n. Setting the login mode to Integrated Mode so that password policy is enforced by\nthe Windows domain.\n\n. A configuration parameter to enforce server-wide, per user account and per role\nminimum password length (set to 0 by default)\n. A configuration parameter to enforce at least one digit in a password (disabled by\ndefault)\n\nSybase ASE 15.0.2 supports the above settings as well as more granular password\ncomplexity via:\n\n. A setting to enforce that a login name cannot be a substring of the password.\n. A setting to enforce the minimum number of special characters for the password.\n. A setting to enforce the minimum number of alphabetic characters for the password\n. A setting to enforce the minimum number of upper-case letters for the password.\n. A setting to enforce the minimum number of lower-case letters for the password.\n. A setting to enforce that the password must be reset is the first time a login is used.\n. A setting to enforce the minimum number of digits for the password.\n\n\nIn addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce\ncustom password complexity requirements.\n\n\nIt is recommended that strong password complexity is enforced in accordance with your\norganizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and\nASE 15.0.1; if this is the case the System Security Officer should consider one of the\nfollowing solutions:\n\n. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password\ncomplexity options.\n. Enable Integrated Mode to rely on the Windows domain password policy.\n. Accept the risk associated with the policy conflict and regularly audit password\nstrength using a password cracking tool.\n\nRationale:\n\nArguably the most common cause of database compromise is weak passwords. Setting\npassword complexity is essential step to ensuring the security and integrity of the data\nwithin the database.",
        "solution": "1. Connect to the ASE server as a user with the sso_role and execute the following\nSQL statement in order to set a system-wide minimum password length according\nto your organizations password (substitute 8 for an acceptable value):\n\nexec sp_configure 'minimum password length', 8\n\n2. Set a custom minimum password length for specific users and roles as required.\nThis should not be less than the system-wide length. This can be accomplished via\nthe sp_modifylogin stored procedure.\n\n3. Execute the following statement to enforce at least one digit in passwords:\n\nexec sp_configure 'check password for digit', 1",
        "reference": "800-171|3.5.7,800-53|IA-5(1)(a),800-53r5|IA-5(1)(a),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(a),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'minimum password length'",
        "sql_expect": "minimum password length"
    },
    "custom_item_2": {
        "description": "1.6 Enforce password complexity - check password for digit",
        "info": "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:\n\n. Setting the login mode to Integrated Mode so that password policy is enforced by\nthe Windows domain.\n\n. A configuration parameter to enforce server-wide, per user account and per role\nminimum password length (set to 0 by default)\n. A configuration parameter to enforce at least one digit in a password (disabled by\ndefault)\n\nSybase ASE 15.0.2 supports the above settings as well as more granular password\ncomplexity via:\n\n. A setting to enforce that a login name cannot be a substring of the password.\n. A setting to enforce the minimum number of special characters for the password.\n. A setting to enforce the minimum number of alphabetic characters for the password\n. A setting to enforce the minimum number of upper-case letters for the password.\n. A setting to enforce the minimum number of lower-case letters for the password.\n. A setting to enforce that the password must be reset is the first time a login is used.\n. A setting to enforce the minimum number of digits for the password.\n\n\nIn addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce\ncustom password complexity requirements.\n\n\nIt is recommended that strong password complexity is enforced in accordance with your\norganizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and\nASE 15.0.1; if this is the case the System Security Officer should consider one of the\nfollowing solutions:\n\n. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password\ncomplexity options.\n. Enable Integrated Mode to rely on the Windows domain password policy.\n. Accept the risk associated with the policy conflict and regularly audit password\nstrength using a password cracking tool.\n\nRationale:\n\nArguably the most common cause of database compromise is weak passwords. Setting\npassword complexity is essential step to ensuring the security and integrity of the data\nwithin the database.",
        "solution": "1. Connect to the ASE server as a user with the sso_role and execute the following\nSQL statement in order to set a system-wide minimum password length according\nto your organizations password (substitute 8 for an acceptable value):\n\nexec sp_configure 'minimum password length', 8\n\n2. Set a custom minimum password length for specific users and roles as required.\nThis should not be less than the system-wide length. This can be accomplished via\nthe sp_modifylogin stored procedure.\n\n3. Execute the following statement to enforce at least one digit in passwords:\n\nexec sp_configure 'check password for digit', 1",
        "reference": "800-171|3.5.7,800-53|IA-5(1)(a),800-53r5|IA-5(1)(a),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(a),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'check password for digit'",
        "sql_expect": "check password for digit"
    },
    "custom_item_3": {
        "description": "1.6 Enforce password complexity - exec sp_passwordpolicy 'list'",
        "info": "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:\n\n. Setting the login mode to Integrated Mode so that password policy is enforced by\nthe Windows domain.\n\n. A configuration parameter to enforce server-wide, per user account and per role\nminimum password length (set to 0 by default)\n. A configuration parameter to enforce at least one digit in a password (disabled by\ndefault)\n\nSybase ASE 15.0.2 supports the above settings as well as more granular password\ncomplexity via:\n\n. A setting to enforce that a login name cannot be a substring of the password.\n. A setting to enforce the minimum number of special characters for the password.\n. A setting to enforce the minimum number of alphabetic characters for the password\n. A setting to enforce the minimum number of upper-case letters for the password.\n. A setting to enforce the minimum number of lower-case letters for the password.\n. A setting to enforce that the password must be reset is the first time a login is used.\n. A setting to enforce the minimum number of digits for the password.\n\n\nIn addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce\ncustom password complexity requirements.\n\n\nIt is recommended that strong password complexity is enforced in accordance with your\norganizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and\nASE 15.0.1; if this is the case the System Security Officer should consider one of the\nfollowing solutions:\n\n. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password\ncomplexity options.\n. Enable Integrated Mode to rely on the Windows domain password policy.\n. Accept the risk associated with the policy conflict and regularly audit password\nstrength using a password cracking tool.\n\nRationale:\n\nArguably the most common cause of database compromise is weak passwords. Setting\npassword complexity is essential step to ensuring the security and integrity of the data\nwithin the database.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "1. Connect to the ASE server as a user with the sso_role and execute the following\nSQL statement in order to set a system-wide minimum password length according\nto your organizations password (substitute 8 for an acceptable value):\n\nexec sp_configure 'minimum password length', 8\n\n2. Set a custom minimum password length for specific users and roles as required.\nThis should not be less than the system-wide length. This can be accomplished via\nthe sp_modifylogin stored procedure.\n\n3. Execute the following statement to enforce at least one digit in passwords:\n\nexec sp_configure 'check password for digit', 1",
        "reference": "800-171|3.5.7,800-53|IA-5(1)(a),800-53r5|IA-5(1)(a),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(a),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_passwordpolicy 'list'"
    },
    "custom_item_4": {
        "description": "1.7 Set lockout thresholds",
        "info": "Sybase ASE supports setting lockout thresholds that define the number of incorrect\nconsecutive login attempts that will result in the account or role being locked. These can be\nspecified on a global basis (i.e. applicable to all user accounts), on a per user basis and on a\nper role basis with individual settings overriding server-wide settings.\n\nThe default lockout threshold in Sybase ASE allows unlimited incorrect login attempts. At a\nminimum, a global lockout threshold should be set in accordance with your organizations\npassword policy. It is recommended that user accounts that have powerful roles such as\nsa_role or sso_role should have a stricter threshold set.\n\nRationale:\n\nAllowing an attacker unlimited attempts to login to an account permits a brute force attack\nto proceed unhindered, potentially leading to compromise of the database.",
        "solution": "1. Connect to the ASE server with a user that has the sso_role and execute the\nfollowing SQL statement (note 5 should be substituted for the lockout threshold\nrequired within your organization):\n\nexec sp_configure 'maximum failed logins', 5",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'maximum failed logins'",
        "sql_expect": "maximum failed logins"
    },
    "custom_item_5": {
        "description": "1.8 Set a system-wide password expiration",
        "info": "Sybase ASE supports expiring passwords after a set interval. The interval can be set on a\nglobal, per user or per role basis. Password expiration is disabled by default.\n\nIt is recommended that a system-wide password expiration is set according to your\norganizations requirements.\n\nRationale:\n\nPassword expiration potentially mitigates the damage from a compromised account. It also\nassists in identifying accounts that are no longer in use.",
        "solution": "1. Connect to the ASE server with a user that has the sso_role and execute the\nfollowing SQL statement to set the system-wide password expiration (substitute 90\nfor a suitable password expiration value based on your organizations\nrequirements):\n\nexec sp_configure 'systemwide password expiration', 90",
        "reference": "800-171|3.5.2,800-53|IA-5(1)(d),800-53r5|IA-5(1)(d),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1)(d),LEVEL|2S,NESA|T5.2.3,NIAv2|AM20,NIAv2|AM21,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.2",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'systemwide password expiration'",
        "sql_expect": "systemwide password expiration"
    },
    "custom_item_6": {
        "description": "1.9 Set passwords on important roles",
        "info": "Sybase ASE supports setting role passwords to ensure that all users have to enter a\npassword before using a protected role. Powerful roles such sa_role and sso_role should\nbe password protected to provide as an additional layer of security.\n\nRationale:\n\nPassword protecting powerful roles means that even if a user is granted that role (which\nmight have been granted through error or indirectly via the WITH GRANT option) they must\nknow the password to use it.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "1. Connect to the ASE server with a user that has the sa_role and execute the\nfollowing SQL statement (whereshould be substituted for the role that is to\nbe password protected andfor the new password):\n\nset role '' with password ''",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "select name from syssrvroles where password = NULL"
    },
    "custom_item_7": {
        "description": "1.10 Use login triggers to validate users IP addresses - exec sp_logintrigger",
        "info": "Sybase ASE supports login triggers; these execute a specified stored procedure every time a\nuser logs in. Login triggers can be used to carry out additional verification steps such as\nchecking the IP address that the user is logging in from is as expected.\n\nNote: Global login triggers are available on ASE 15.0.2 and greater.\n\nRationale:\n\nLogin triggers can provide an additional layer of security through verification of criterion\nsuch as IP address. Note that the IP address may be subject to spoofing or may indicate a\ncompromised client and as such should not be exclusively relied upon.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "1. Connect to the ASE server with a user that has the sso_role and execute the\nfollowing SQL statement whereshould be substituted for the\nusername on which the login trigger will fire andfor the specific\nstored procedure. Ifis set to NULL, a global login trigger is registered\n(i.e. for all users). Global login triggers can also be set via the sp_logintrigger\nstored procedure.\n\nexec sp_modifylogin, 'login script',Note that the stored procedure registered as a login trigger must be available in the users\ndefault database since Sybase ASE searches the sysobjects table in the users default\ndatabase in order to find the login trigger object.",
        "reference": "LEVEL|2NS",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_logintrigger"
    },
    "custom_item_8": {
        "description": "1.10 Use login triggers to validate users IP addresses - exec sp_displaylogin",
        "info": "Sybase ASE supports login triggers; these execute a specified stored procedure every time a\nuser logs in. Login triggers can be used to carry out additional verification steps such as\nchecking the IP address that the user is logging in from is as expected.\n\nNote: Global login triggers are available on ASE 15.0.2 and greater.\n\nRationale:\n\nLogin triggers can provide an additional layer of security through verification of criterion\nsuch as IP address. Note that the IP address may be subject to spoofing or may indicate a\ncompromised client and as such should not be exclusively relied upon.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "1. Connect to the ASE server with a user that has the sso_role and execute the\nfollowing SQL statement whereshould be substituted for the\nusername on which the login trigger will fire andfor the specific\nstored procedure. Ifis set to NULL, a global login trigger is registered\n(i.e. for all users). Global login triggers can also be set via the sp_logintrigger\nstored procedure.\n\nexec sp_modifylogin, 'login script',Note that the stored procedure registered as a login trigger must be available in the users\ndefault database since Sybase ASE searches the sysobjects table in the users default\ndatabase in order to find the login trigger object.",
        "reference": "LEVEL|2NS",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_displaylogin '%'",
        "sql_expect": "ManualReviewRequired"
    },
    "custom_item_9": {
        "description": "2.1 Enable Secure Socket Layer (SSL) Encryption - enable ssl",
        "info": "Sybase ASE supports SSL encryption as a means of ensuring confidentiality between clients and servers. SSL is a widely accepted standard for securing the transmission of sensitive information, such as credit card numbers, stock trades, and banking transactions over the Internet. It relies on public-key cryptography and allows the client and server to negotiate a mutually acceptable cipher.\nSybase ASE 15.0.2 also supports the NIST-approved AES algorithm and new options for setting cipher suite preference via the sp_ssladmin stored procedure.\nSSL encryption of connections is disabled by default. When it is enabled, a client can potentially negotiate a cryptographically weak cipher suite. It is recommended that SSL support is enabled and that the cipher suite preference is set to strong (or FIPS if your organization mandates FIPS-compliance).\nRationale:\nSSL encryption prevents passive sniffing attacking from capturing sensitive data that may be transmitted between client applications and the server such as credit cards and SSNs. A strong cipher suite is required to prevent cryptographic attacks on clients that force the server to use weak algorithms.",
        "solution": "There are several steps involved to enable SSL. The information below is provided as an outline only; it is recommended that the System Security Officer consult the Sybase ASE 15.0 Administration Guide, Volume 1, Chapter 19 for detailed advice.\n1. Generate a certificate for the server.\n2. Create a trusted roots file.\n3. Connect to the ASE server as a user with the sso_role and execute the following SQL statement to enable SSL:\n\nexec sp_configure 'enable ssl' 1\n\n4. Add the SSL filter to the interfaces file.\n5. Use sp_ssladmin stored procedure to add a certificate to the certificates file. See Administering certificates.\n6. Execute the following SQL statement to enforce strong cipher suites (note strong should be substituted for FIPS if your organization mandates the use of FIPS-compliant algorithms):\n\nexec sp_ssladmin setcipher, 'strong'",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'enable ssl'",
        "sql_expect": "enable ssl"
    },
    "custom_item_10": {
        "description": "2.1 Enable Secure Socket Layer (SSL) Encryption - lsciphers",
        "info": "Sybase ASE supports SSL encryption as a means of ensuring confidentiality between clients and servers. SSL is a widely accepted standard for securing the transmission of sensitive information, such as credit card numbers, stock trades, and banking transactions over the Internet. It relies on public-key cryptography and allows the client and server to negotiate a mutually acceptable cipher.\nSybase ASE 15.0.2 also supports the NIST-approved AES algorithm and new options for setting cipher suite preference via the sp_ssladmin stored procedure.\nSSL encryption of connections is disabled by default. When it is enabled, a client can potentially negotiate a cryptographically weak cipher suite. It is recommended that SSL support is enabled and that the cipher suite preference is set to strong (or FIPS if your organization mandates FIPS-compliance).\nRationale:\nSSL encryption prevents passive sniffing attacking from capturing sensitive data that may be transmitted between client applications and the server such as credit cards and SSNs. A strong cipher suite is required to prevent cryptographic attacks on clients that force the server to use weak algorithms.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "There are several steps involved to enable SSL. The information below is provided as an outline only; it is recommended that the System Security Officer consult the Sybase ASE 15.0 Administration Guide, Volume 1, Chapter 19 for detailed advice.\n1. Generate a certificate for the server.\n2. Create a trusted roots file.\n3. Connect to the ASE server as a user with the sso_role and execute the following SQL statement to enable SSL:\n\nexec sp_configure 'enable ssl' 1\n\n4. Add the SSL filter to the interfaces file.\n5. Use sp_ssladmin stored procedure to add a certificate to the certificates file. See Administering certificates.\n6. Execute the following SQL statement to enforce strong cipher suites (note strong should be substituted for FIPS if your organization mandates the use of FIPS-compliant algorithms):\n\nexec sp_ssladmin setcipher, 'strong'",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_ssladmin lscipher"
    },
    "custom_item_11": {
        "description": "2.5.2 Consider disabling remote access",
        "info": "Sybase ASE allows server-to-server RPC to be disabled via the allow remote access\nconfiguration parameter. By default server-to-server RPC is enabled since it is required for\ncommunication with the Backup Server; disabling server-to-server RPC will make it\nimpossible to back up a database.\n\nThe Sybase System Administrator Guide for ASE 15.0, Volume 1 Chapter 5 claims:\n\nSince other system administration actions are required to enable remote servers other than\nBackup Server to execute RPCs, leaving this option set to 1 does not constitute a security risk.\n\n\nNonetheless, if communication with remote servers including the Backup Server is not\nrequired then this configuration parameter can be set to 0 to disable server-to-server RPC.\n\nRationale:\n\nDisabling remote access will reduce the remote attack surface of system.",
        "solution": "1. Connect to the database as a user with the sso_role and execute the following SQL\nstatement to disable server-to-server RPC:\nexec sp_configure 'allow remote access', 0",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'allow remote access'",
        "sql_expect": "allow remote access"
    },
    "custom_item_12": {
        "description": "3.2.1 Review use of the guest user in databases",
        "info": "Adding a guest entry to the sysusers table of any database effectively permits any database\nuser to use the database with the permissions of the guest user (which by default inherits\nthe permissions of the public role).\n\nRather than using the guest user it is recommended that roles be set up within Sybase ASE\nto facilitate multiuser access to databases.\n\nRationale:\n\nAdding a guest entry to a database goes against the security best practice principle of least\nprivilege and makes it harder to audit operations.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "1. Identify the databases that contain a guest user.\n\n2. Identify the users that access objects in these databases.\n\n3. Either grant each user specific access to each database as required or create\nappropriate roles and grant each role specific access to each database.",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_helpuser guest"
    },
    "custom_item_13": {
        "description": "4.7 Review suspend audit configuration when device is full",
        "info": "Sybase ASE is configured by default to suspend auditing when the device is full. This is\ncontrolled via the suspend audit when device full configuration parameter. suspend\naudit when device full is enabled by default.\n\nIf this option has been disabled (i.e. database operations continue when the audit device is\nfull), older events will be overwritten which could allow an attacker to mask evidence of an\nattack.\n\nNote that this is a potentially disruptive setting as it will suspend the audit process and all\nuser processes that cause an auditable event when the audit device is full. To resume\nnormal operation, an administrator with the sso_role must log in and set up an empty\ntable as the current audit table.\n\nIt is advised that this configuration is enabled for databases where maintaining an accurate\naudit trail is more important than the database availability. If this setting is enabled, it is\nrecommended that audit device resources are checked regularly.\n\nRationale:\n\nEnabling this configuration will ensure that an attacker cannot simply overwrite audit logs\nby submitting a large number of events.",
        "solution": "1. Connect to the ASE server as a user with the sso_role and execute the following\nSQL statement:\n\nexec sp_configure 'suspend audit when device full', 1",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "exec sp_configure 'suspend audit when device full'",
        "sql_expect": "suspend audit when device full"
    },
    "custom_item_14": {
        "description": "5.3.1 Remove operating system related ESPs",
        "info": "Sybase ASE installs a number of powerful ESPs that allow interaction with the operating\nsystem. A common target for an attacker is the xp_cmdshell ESP, which executes a native\noperating system command on the host system running Sybase ASE.\n\nThe operating system user context under which the command executes is controlled by the\nxp_cmdshell context configuration parameter. Though by default, this is set to only\npermit execution by users with System Administration privileges at the operating system\nlevel, it should be noted that this is insufficient since an attacker who compromised an\naccount with the sa_role could reconfigure the configuration parameter so that\nxp_cmdshell executes commands under the user context that the database server itself is\nrunning as.\n\nBy default, execution of the xp_cmdshell ESP is restricted to users with the sa_role. It is\nrecommended that it is removed, along with the other operating system related ESPs;\nxp_freedll, xp_logevent (Windows only) and xp_enumgroups (Windows only).\n\nFurthermore the library that houses each of these ESPs, sybsyesp.dll (Windows) or\nsybsyesp.so (Unix), should be deleted from the file system to prevent them from being\nrecreated by an attacker.\n\nRationale:\n\nThe xp_cmdshell ESP provides a clear path for privilege escalation from the database to the\noperating system. An attacker could use this functionality in conjunction with a SQL\ninjection attack to gain a foothold on the database host using it as a launch pad to\ncompromise other systems. If this ESP is not used, it is prudent to therefore remove it.",
        "solution": "1. Connect to the ASE server with a user that has the sa_role and execute the\nfollowing statements:\n\nexec sp_dropextendedproc 'xp_cmdshell'\n\nexec sp_dropextendedproc 'xp_freedll'\n\nIn addition, the following statements should be executed on Windows systems:\n\nexec sp_dropextendedproc 'xp_logevent'\n\nexec sp_dropextendedproc 'xp_enumgroups'\n\nIf the above statements return Access is denied, stop the ASE server and repeat the\ncommand.\n\n2. On Windows systems, execute the following command from a command prompt to\ndelete sybsyesp.dll. It is prudent to keep a copy of the file offline in case it needs\nthe xp_cmdshell functionality needs to be restored.\n\ndel %SYBASE%\\%SYBASE_ASE%\\dll\\sybsyesp.dll\n\nOn Unix systems, execute the following command from a command shell (assuming\nthe SYBASE environment variables have been set):\n\nrm $SYBASE\\$SYBASE_ASE\\lib\\sybsyesp.so\n\nOn Unix systems it may be necessary to stop and restart the ASE server for the\nchanges to take effect.",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "select name from sybsystemprocs.dbo.sysobjects where type='XP' and name='xp_cmdshell' or name='xp_freedll' or name='xp_logevent' or name='xp_enumgroups'"
    },
    "custom_item_15": {
        "description": "5.3.2 Remove mail related ESPs",
        "info": "On Windows systems, Sybase ASE installs a number of powerful ESPs that allow access to\nemail via the Adaptive Server inbox. These are xp_sendmail, xp_readmail, xp_deletemail,\nxp_findnextmsg, xp_startmail and xp_stopmail.\n\nBy default, execution of these ESPs is restricted to users with the sa_role. It is\nrecommended they are removed as a defense in depth measure if they are not in use.\nFurthermore the DLL that houses each of these ESPs, sybmail.dll, should be deleted from\nthe file system to prevent them from being recreated by an attacker.\n\nRationale:\n\nThe email ESPs provide an attacker with suitable privileges additional means of\ncommunicating with other systems on the network and exfiltrating data. Given that ESPs\nhave previously had a number of associated security flaws it is prudent to remove those\nthat are not in use.",
        "solution": "1. Connect to the ASE server with a user that has the sa_role and execute the\nfollowing query:\n\nexec sp_dropextendedproc 'xp_sendmail'\n\nexec sp_dropextendedproc 'xp_readmail'\n\nexec sp_dropextendedproc 'xp_deletemail'\n\nexec sp_dropextendedproc 'xp_findnextmsg'\n\nexec sp_dropextendedproc 'xp_startmail'\n\nexec sp_dropextendedproc 'xp_stopmail'\n\n2. From a command prompt execute the following command to delete sybsyesp.dll:\n\ndel %SYBASE%\\%SYBASE_ASE%\\dll\\sybmail.dll\n\n3. If the above statement returns Access is denied, stop the ASE server and repeat the\ncommand.",
        "reference": "LEVEL|2S",
        "see_also": "https://workbench.cisecurity.org/files/1612",
        "sql_request": "select name from sybsystemprocs.dbo.sysobjects where type='XP' and name='xp_sendmail' or name='xp_readmail' or name='xp_deletemail' or name='xp_findnextmsg' or name='xp_startmail' or name='xp_stopmail'"
    }
}