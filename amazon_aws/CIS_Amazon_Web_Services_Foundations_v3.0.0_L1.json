{
    "custom_item_1": {
        "description": "'Access Key 1'",
        "aws_action": "GetCredentialReport",
        "xsl_stmt": "[root_account] : Access Key 1 Active =[root_account] : Not Found",
        "regex": "\\[root_account\\] :",
        "expect": "\\[root_account\\] : Access Key 1 Active = false"
    },
    "custom_item_2": {
        "description": "'Access Key 2'",
        "aws_action": "GetCredentialReport",
        "xsl_stmt": "[root_account] : Access Key 2 Active =[root_account] : Not Found",
        "regex": "\\[root_account\\] :",
        "expect": "\\[root_account\\] : Access Key 2 Active = false"
    },
    "custom_item_3": {
        "description": "1.5 Ensure MFA is enabled for the 'root' user account",
        "info": "The 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.\n\nNote: When virtual MFA is used for 'root' accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. ('non-personal virtual MFA') This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.\n\nRationale:\n\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
        "solution": "Perform the following to establish MFA for the 'root' user account:\n\nSign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\nNote: to manage MFA devices for the 'root' AWS account, you must use your 'root' account credentials to sign in to AWS. You cannot manage MFA devices for the 'root' account using other credentials.\n\nChoose Dashboard , and under Security Status , expand Activate MFA on your root account.\n\nChoose Activate MFA\n\nIn the wizard, choose A virtual MFA device and then choose Next Step .\n\nIAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n\nOpen your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n\nDetermine whether the MFA app supports QR codes, and then do one of the following:\n\nUse the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n\nIn the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\nWhen you are finished, the virtual MFA device starts generating one-time passwords.\nIn the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Assign Virtual MFA.",
        "reference": "800-171|3.5.3,800-53|IA-2(1),800-53r5|IA-2(1),CCE|CCE-78911-5,CN-L3|7.1.2.7(b),CSCv7|4.5,CSCv8|6.5,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),LEVEL|1A,NESA|T5.4.2,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetAccountSummary",
        "xsl_stmt": "AccountMFAEnabled :AccountMFAEnabled : Not Found",
        "regex": "AccountMFAEnabled :",
        "expect": "AccountMFAEnabled : 1$"
    },
    "custom_item_4": {
        "description": "1.8 Ensure IAM password policy requires minimum length of 14 or greater",
        "info": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.\n\nRationale:\n\nSetting a password complexity policy increases account resiliency against brute force login attempts.",
        "solution": "Perform the following to set the password policy as prescribed:\nFrom Console:\n\nLogin to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n\nGo to IAM Service on the AWS Console\n\nClick on Account Settings on the Left Pane\n\nSet 'Minimum password length' to 14 or greater.\n\nClick 'Apply password policy'\n\nFrom Command Line:\n\n aws iam update-account-password-policy --minimum-password-length 14\n\nNote: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command.",
        "reference": "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CCE|CCE-78907-3,CSCv7|16,CSCv8|5,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetAccountPasswordPolicy",
        "xsl_stmt": "MinimumPasswordLength :MinimumPasswordLength : Not Found",
        "regex": "MinimumPasswordLength :",
        "expect": "MinimumPasswordLength : (1[4-9]|[2-9][0-9]|1[01][0-9]|12[0-8])$"
    },
    "custom_item_5": {
        "description": "1.9 Ensure IAM password policy prevents password reuse",
        "info": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\n\nRationale:\n\nPreventing password reuse increases account resiliency against brute force login attempts.",
        "solution": "Perform the following to set the password policy as prescribed:\nFrom Console:\n\nLogin to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n\nGo to IAM Service on the AWS Console\n\nClick on Account Settings on the Left Pane\n\nCheck 'Prevent password reuse'\n\nSet 'Number of passwords to remember' is set to 24\n\nFrom Command Line:\n\n aws iam update-account-password-policy --password-reuse-prevention 24\n\nNote: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command.",
        "reference": "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CCE|CCE-78908-1,CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetAccountPasswordPolicy",
        "xsl_stmt": "PasswordReusePrevention :PasswordReusePrevention : Not Found",
        "regex": "PasswordReusePrevention :",
        "expect": "PasswordReusePrevention : (2[4-9]|[3-9][0-9])$"
    },
    "custom_item_6": {
        "description": "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
        "info": "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.\n\nRationale:\n\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that displays a time-sensitive key and have knowledge of a credential.\n\nImpact:\n\nAWS will soon end support for SMS multi-factor authentication (MFA). New customers are not allowed to use this feature. We recommend that existing customers switch to one of the following alternative methods of MFA.",
        "solution": "Perform the following to enable MFA:\nFrom Console:\n\nSign in to the AWS Management Console and open the IAM console at 'https://console.aws.amazon.com/iam/'\n\nIn the left pane, select Users.\n\nIn the User Name list, choose the name of the intended MFA user.\n\nChoose the Security Credentials tab, and then choose Manage MFA Device.\n\nIn the Manage MFA Device wizard, choose Virtual MFA device, and then choose Continue.\n\nIAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n\nOpen your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications at https://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications). If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n\nDetermine whether the MFA app supports QR codes, and then do one of the following:\n\nUse the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n\nIn the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\nWhen you are finished, the virtual MFA device starts generating one-time passwords.\n\nIn the Manage MFA Device wizard, in the MFA Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the MFA Code 2 box.\n\nClick Assign MFA.",
        "reference": "800-171|3.5.3,800-53|IA-2(1),800-53r5|IA-2(1),CCE|CCE-78901-6,CN-L3|7.1.2.7(b),CSCv7|4.5,CSCv8|6.5,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),LEVEL|1A,NESA|T5.4.2,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetCredentialReport",
        "xsl_stmt": "Console userdoes not have MFA enabledAll console users have MFA enabled.",
        "regex": ".+",
        "expect": "All console users have MFA enabled."
    },
    "custom_item_7": {
        "description": "1.12 Ensure credentials unused for 45 days or greater are disabled",
        "info": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.\n\nRationale:\n\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.",
        "solution": "From Console:\nPerform the following to manage Unused Password (IAM user console access)\n\nLogin to the AWS Management Console:\n\nClick Services\n\nClick IAM\n\nClick on Users\n\nClick on Security Credentials\n\nSelect user whose Console last sign-in is greater than 45 days\n\nClick Security credentials\n\nIn section Sign-in credentials, Console password click Manage\n\nUnder Console Access select Disable\n10.Click Apply\n\nPerform the following to deactivate Access Keys:\n\nLogin to the AWS Management Console:\n\nClick Services\n\nClick IAM\n\nClick on Users\n\nClick on Security Credentials\n\nSelect any access keys that are over 45 days old and that have been used and\n\nClick on Make Inactive\n\nSelect any access keys that are over 45 days old and that have not been used and\n\nClick the X to Delete",
        "reference": "800-171|3.1.1,800-53|AC-2(3),800-53r5|AC-2(3),CCE|CCE-78900-8,CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv7|16.9,CSCv8|5.3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|1A,NIAv2|AM26,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,TBA-FIISB|36.2.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "days": "@INACTIVE_ACCOUNT_DAYS@"
    },
    "custom_item_8": {
        "description": "1.13 Ensure there is only one active access key available for any single IAM user",
        "info": "Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK)\n\nRationale:\n\nAccess keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.",
        "solution": "From Console:\n\nSign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.\n\nIn the left navigation panel, choose Users.\n\nClick on the IAM user name that you want to examine.\n\nOn the IAM user configuration page, select Security Credentials tab.\n\nIn Access Keys section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.\n\nIn the same Access Keys section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the Make Inactive link.\n\nIf you receive the Change Key Status confirmation box, click Deactivate to switch off the selected key.\n\nRepeat steps no. 3 - 7 for each IAM user in your AWS account.\n\nFrom Command Line:\n\nUsing the IAM user and access key information provided in the Audit CLI, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.\n\nRun the update-access-key command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user\n\nNote - the command does not return any output:\n\naws iam update-access-key --access-key-id--status Inactive --user-nameTo confirm that the selected access key pair has been successfully deactivated run the list-access-keys audit command again for that IAM User:\n\naws iam list-access-keys --user-nameThe command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) Status is set to Inactive, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.\n\nRepeat steps no. 1 - 3 for each IAM user in your AWS account.",
        "reference": "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|4,CSCv8|5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetCredentialReport",
        "xsl_stmt": ": Multiple access keys activeNo users with multiple access keys active",
        "not_expect": ".+ : Multiple access keys active"
    },
    "custom_item_9": {
        "description": "1.14 Ensure access keys are rotated every 90 days or less",
        "info": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\n\nRationale:\n\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.\n\nAccess keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
        "solution": "Perform the following to rotate access keys:\n\nFrom Console:\n\nGo to Management Console (https://console.aws.amazon.com/iam)\n\nClick on Users\n\nClick on Security Credentials\n\nAs an Administrator\n\nClick on Make Inactive for keys that have not been rotated in 90 Days\n\nAs an IAM User\n\nClick on Make Inactive or Delete for keys which have not been rotated or used in 90 Days\n\nClick on Create Access Key\n\nUpdate programmatic call with new Access Key credentials\n\nFrom Command Line:\n\nWhile the first access key is still active, create a second access key, which is active by default. Run the following command:\n\naws iam create-access-key\n\nAt this point, the user has two active access keys.\n\nUpdate all applications and tools to use the new access key.\n\nDetermine whether the first access key is still in use by using this command:\n\naws iam get-access-key-last-used\n\nOne approach is to wait several days and then check the old access key for any use before proceeding.\n\nEven if step Step 3 indicates no use of the old key, it is recommended that you do not immediately delete the first access key. Instead, change the state of the first access key to Inactive using this command:\n\naws iam update-access-key\n\nUse only the new access key to confirm that your applications are working. Any applications and tools that still use the original access key will stop working at this point because they no longer have access to AWS resources. If you find such an application or tool, you can switch its state back to Active to reenable the first access key. Then return to step Step 2 and update this application to use the new key.\n\nAfter you wait some period of time to ensure that all applications and tools have been updated, you can delete the first access key with this command:\n\naws iam delete-access-key",
        "reference": "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CCE|CCE-78902-4,CN-L3|7.1.3.2(d),CSCv7|16,CSCv8|5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetJSONCredentialReport",
        "json_transform": ".[] | if ((.access_key_1_last_rotated | iso_8601_days_ago) > 90) or ((.access_key_2_last_rotated | iso_8601_days_ago) > 90) then \"user has access keys older than 90 days: \" + .user else \"\" end",
        "regex": ".+",
        "not_expect": "user has access keys older than 90 days:"
    },
    "custom_item_10": {
        "description": "1.15 Ensure IAM Users Receive Permissions Only Through Groups",
        "info": "IAM users are granted access to services, functions, and data through IAM policies. There are four ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy; 4) add the user to an IAM group that has an inline policy.\n\nOnly the third implementation is recommended.\n\nRationale:\n\nAssigning IAM policy only through groups unifies permissions management to a single, flexible layer consistent with organizational functional roles. By unifying permissions management, the likelihood of excessive permissions is reduced.",
        "solution": "Perform the following to create an IAM group and assign a policy to it:\n\nSign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\nIn the navigation pane, click Groups and then click Create New Group .\n\nIn the Group Name box, type the name of the group and then click Next Step .\n\nIn the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click Next Step .\n\nClick Create Group\n\nPerform the following to add a user to a given group:\n\nSign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\nIn the navigation pane, click Groups\n\nSelect the group to add a user to\n\nClick Add Users To Group\n\nSelect the users to be added to the group\n\nClick Add Users\n\nPerform the following to remove a direct association between a user and policy:\n\nSign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\nIn the left navigation pane, click on Users\n\nFor each user:\n\nSelect the user\n\nClick on the Permissions tab\n\nExpand Permissions policies\n\nClick X for each policy; then click Detach or Remove (depending on policy type)",
        "reference": "800-171|3.1.1,800-171|3.1.5,800-171|3.3.8,800-171|3.3.9,800-53|AC-2,800-53|AC-3,800-53|AC-6,800-53|AC-6(1),800-53|AC-6(7),800-53|AU-9(4),800-53r5|AC-2,800-53r5|AC-3,800-53r5|AC-6,800-53r5|AC-6(1),800-53r5|AC-6(7),800-53r5|AU-9(4),CCE|CCE-78912-3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.3(d),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|16,CSCv8|6.8,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.5,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.4,ISO/IEC-27001|A.9.4.5,ISO/IEC-27001|A.12.4.2,ITSG-33|AC-2,ITSG-33|AC-3,ITSG-33|AC-6,ITSG-33|AC-6(1),ITSG-33|AU-9(4),ITSG-33|AU-9(4)(a),ITSG-33|AU-9(4)(b),LEVEL|1A,NESA|M1.1.3,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|AM28,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|NS5j,NIAv2|SM5,NIAv2|SM6,NIAv2|SS13c,NIAv2|SS14e,NIAv2|SS15c,NIAv2|SS29,NIAv2|VL3b,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.5,PCI-DSSv3.2.1|10.5.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,PCI-DSSv4.0|10.3.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "ListUserPolicies",
        "xsl_stmt": "has inline policyhas no inline policies",
        "not_expect": ".* has inline policy"
    },
    "custom_item_11": {
        "description": "1.16 Ensure IAM policies that allow full '*:*' administrative privileges are not attached",
        "info": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.\n\nRationale:\n\nIt's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.\n\nProviding full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.\n\nIAM policies that have a statement with 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*' should be removed.",
        "solution": "From Console:\nPerform the following to detach the policy that has full administrative privileges:\n\nSign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\nIn the navigation pane, click Policies and then search for the policy name found in the audit step.\n\nSelect the policy that needs to be deleted.\n\nIn the policy action menu, select first Detach\n\nSelect all Users, Groups, Roles that have this policy attached\n\nClick Detach Policy\n\nIn the policy action menu, select Detach\n\nSelect the newly detached policy and select Delete\n\nFrom Command Line:\nPerform the following to detach the policy that has full administrative privileges as found in the audit step:\n\nLists all IAM users, groups, and roles that the specified managed policy is attached to.\n\n  aws iam list-entities-for-policy --policy-arnDetach the policy from all IAM Users:\n\n  aws iam detach-user-policy --user-name--policy-arnDetach the policy from all IAM Groups:\n\n  aws iam detach-group-policy --group-name--policy-arnDetach the policy from all IAM Roles:\n\n  aws iam detach-role-policy --role-name--policy-arn",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CCE|CCE-78912-3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|4,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetPolicyVersion_OnlyAttached",
        "not_expect": "full admin privileges allowed on ."
    },
    "custom_item_12": {
        "description": "1.17 Ensure a support role has been created to manage incidents with AWS Support",
        "info": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role, with the appropriate policy assigned, to allow authorized users to manage incidents with AWS Support.\n\nRationale:\n\nBy implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.\n\nImpact:\n\nAll AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance.\n\nWhen assigning rights, keep in mind that other policies may grant access to Support as well. This may include AdministratorAccess and other policies including customer managed policies. Utilizing the AWS managed 'AWSSupportAccess' role is one simple way of ensuring that this permission is properly granted.\n\nTo better support the principle of separation of duties, it would be best to only attach this role where necessary.",
        "solution": "From Command Line:\n\nCreate an IAM role for managing incidents with AWS:\n\nCreate a trust relationship policy document that allowsto manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\n\n      {\n        'Version': '2012-10-17',\n        'Statement': [\n          {\n            'Effect': 'Allow',\n            'Principal': {\n              'AWS': ''\n            },\n            'Action': 'sts:AssumeRole'\n          }\n        ]\n      }\n\nCreate the IAM role using the above trust policy:\n\naws iam create-role --role-name--assume-role-policy-document file:///tmp/TrustPolicy.json\n\nAttach 'AWSSupportAccess' managed policy to the created IAM role:\n\naws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name",
        "reference": "800-171|3.6.1,800-171|3.6.2,800-53|IR-1,800-53|IR-7,800-53|IR-8,800-53r5|IR-1,800-53r5|IR-7,800-53r5|IR-8,CSCv7|14,CSCv8|17.1,CSF|DE.AE-3,CSF|DE.AE-5,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.IP-7,CSF|PR.IP-9,CSF|RC.IM-1,CSF|RC.IM-2,CSF|RC.RP-1,CSF|RS.AN-4,CSF|RS.CO-1,CSF|RS.CO-2,CSF|RS.CO-3,CSF|RS.CO-4,CSF|RS.IM-1,CSF|RS.IM-2,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|IR-1,ITSG-33|IR-7,ITSG-33|IR-7a.,ITSG-33|IR-8,LEVEL|1A,NESA|M1.2.2,NESA|T8.2.6,NIAv2|IM9,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|7.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "ListEntitiesForPolicy",
        "xsl_stmt": "Pass - member is found under PolicyRolesFail - member is not found under PolicyRoles",
        "regex": "(Pass|Fail)",
        "expect": "Pass - member is found under PolicyRoles",
        "policy_arn": "arn:aws:iam::aws:policy/AWSSupportAccess"
    },
    "custom_item_13": {
        "description": "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
        "info": "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.\n\nRationale:\n\nRemoving expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.\n\nImpact:\n\nDeleting the certificate could have implications for your application if you are using an expired server certificate with Elastic Load Balancing, CloudFront, etc. One has to make configurations at respective services to ensure there is no interruption in application functionality.\n\nNOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.",
        "solution": "From Console:\nRemoving expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).\nFrom Command Line:\nTo delete Expired Certificate run following command by replacingwith the name of the certificate to delete:\n\naws iam delete-server-certificate --server-certificate-nameWhen the preceding command is successful, it does not return any output.\n\nDefault Value:\n\nBy default, expired certificates won't get deleted.",
        "reference": "800-53|AU-11,800-53|SI-12,800-53r5|AU-11,800-53r5|SI-12,CSCv7|13,CSCv8|3.1,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-11,ITSG-33|SI-12,ITSG-33|SI-12a.,LEVEL|1A,NESA|M5.2.3,NESA|M5.2.4,NESA|M5.3.1,NESA|T3.6.2,NIAv2|DR1,NIAv2|DR1a,NIAv2|DR1b,NIAv2|DR1c,NIAv2|DR2,NIAv2|DR3,NIAv2|DR4,NIAv2|DR5,NIAv2|DR6,NIAv2|SM7,PCI-DSSv3.2.1|3.1,PCI-DSSv3.2.1|10.7,PCI-DSSv4.0|3.2.1,PCI-DSSv4.0|10.5.1,QCSC-v1|8.2.1,QCSC-v1|13.2",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "ListServerCertificates",
        "xsl_stmt": "Certificate Expiration::Server Certificates Not Found",
        "regex": ".+",
        "expect": "Server Certificates Not Found"
    },
    "custom_item_14": {
        "description": "2.1.4 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
        "info": "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.\n\nRationale:\n\nAmazon S3 Block public access (bucket settings) prevents the accidental or malicious public exposure of data contained within the respective bucket(s).\n\nAmazon S3 Block public access (account settings) prevents the accidental or malicious public exposure of data contained within all buckets of the respective AWS account.\n\nWhether blocking public access to all or some buckets is an organizational decision that should be based on data sensitivity, least privilege, and use case.\n\nImpact:\n\nWhen you apply Block Public Access settings to an account, the settings apply to all AWS Regions globally. The settings might not take effect in all Regions immediately or simultaneously, but they eventually propagate to all Regions.",
        "solution": "If utilizing Block Public Access (bucket settings)\nFrom Console:\n\nLogin to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/\n\nSelect the Check box next to the Bucket.\n\nClick on 'Edit public access settings'.\n\nClick 'Block all public access'\n\nRepeat for all the buckets in your AWS account that contain sensitive data.\n\nFrom Command Line:\n\nList all of the S3 Buckets\n\naws s3 ls\n\nSet the Block Public Access to true on that bucket\n\naws s3api put-public-access-block --bucket--public-access-block-configuration 'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'\n\nIf utilizing Block Public Access (account settings)\nFrom Console:\nIf the output reads true for the separate configuration settings then it is set on the account.\n\nLogin to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/\n\nChoose Block Public Access (account settings)\n\nChoose Edit to change the block public access settings for all the buckets in your AWS account\n\nChoose the settings you want to change, and then choose Save. For details about each setting, pause on the i icons.\n\nWhen you're asked for confirmation, enter confirm. Then Click Confirm to save your changes.\n\nFrom Command Line:\nTo set Block Public access settings for this account, run the following command:\n\naws s3control put-public-access-block\n--public-access-block-configuration BlockPublicAcls=true, IgnorePublicAcls=true, BlockPublicPolicy=true, RestrictPublicBuckets=true\n--account-id",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetAllPublicAccessBlock",
        "xsl_stmt": "Bucket:BlockPublicAcls =falseIgnorePublicAcls =falseBlockPublicPolicy =falseRestrictPublicBuckets =falseNo buckets found",
        "regex": ".+",
        "not_expect": "(BlockPublicAcls|IgnorePublicAcls|BlockPublicPolicy|RestrictPublicBuckets) = false"
    },
    "custom_item_15": {
        "description": "2.2.1 Ensure EBS Volume Encryption is Enabled in all Regions",
        "info": "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.\n\nRationale:\n\nEncrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.\n\nImpact:\n\nLosing access or removing the KMS key in use by the EBS volumes will result in no longer being able to access the volumes.",
        "solution": "From Console:\n\nLogin to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/\n\nUnder Account attributes, click EBS encryption.\n\nClick Manage.\n\nClick the Enable checkbox.\n\nClick Update EBS encryption\n\nRepeat for every region requiring the change.\n\nNote: EBS volume encryption is configured per region.\nFrom Command Line:\n\nRun\n\naws --regionec2 enable-ebs-encryption-by-default\n\nVerify that 'EbsEncryptionByDefault': true is displayed.\n\nRepeat every region requiring the change.\n\nNote: EBS volume encryption is configured per region.",
        "reference": "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetEbsEncryptionByDefault",
        "xsl_stmt": "GetEbsEncryptionByDefault =GetEbsEncryptionByDefault = false",
        "regex": "GetEbsEncryptionByDefault =",
        "not_expect": "GetEbsEncryptionByDefault = false"
    },
    "custom_item_16": {
        "description": "2.3.1 Ensure that encryption-at-rest is enabled for RDS Instances",
        "info": "Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.\n\nRationale:\n\nDatabases are likely to hold sensitive and critical data, it is highly recommended to implement encryption in order to protect your data from unauthorized access or disclosure. With RDS encryption enabled, the data stored on the instance's underlying storage, the automated backups, read replicas, and snapshots, are all encrypted.",
        "solution": "From Console:\n\nLogin to the AWS Management Console and open the RDS dashboard at https://console.aws.amazon.com/rds/.\n\nIn the left navigation panel, click on Databases\n\nSelect the Database instance that needs to be encrypted.\n\nClick on Actions button placed at the top right and select Take Snapshot.\n\nOn the Take Snapshot page, enter a database name of which you want to take a snapshot in the Snapshot Name field and click on Take Snapshot.\n\nSelect the newly created snapshot and click on the Action button placed at the top right and select Copy snapshot from the Action menu.\n\nOn the Make Copy of DB Snapshot page, perform the following:\n\nIn the New DB Snapshot Identifier field, Enter a name for the new snapshot.\n\nCheck Copy Tags, New snapshot must have the same tags as the source snapshot.\n\nSelect Yes from the Enable Encryption dropdown list to enable encryption, You can choose to use the AWS default encryption key or custom key from Master Key dropdown list.\n\nClick Copy Snapshot to create an encrypted copy of the selected instance snapshot.\n\nSelect the new Snapshot Encrypted Copy and click on the Action button placed at the top right and select Restore Snapshot button from the Action menu, This will restore the encrypted snapshot to a new database instance.\n\nOn the Restore DB Instance page, enter a unique name for the new database instance in the DB Instance Identifier field.\n\nReview the instance configuration details and click Restore DB Instance.\n\nAs the new instance provisioning process is completed can update application configuration to refer to the endpoint of the new Encrypted database instance Once the database endpoint is changed at the application level, can remove the unencrypted instance.\n\nFrom Command Line:\n\nRun describe-db-instances command to list all RDS database names available in the selected AWS region, The command output should return the database instance identifier.\n\naws rds describe-db-instances --region--query 'DBInstances[*].DBInstanceIdentifier'\n\nRun create-db-snapshot command to create a snapshot for the selected database instance, The command output will return the new snapshot with name DB Snapshot Name.\n\naws rds create-db-snapshot --region--db-snapshot-identifier--db-instance-identifierNow run list-aliases command to list the KMS keys aliases available in a specified region, The command output should return each key alias currently available. For our RDS encryption activation process, locate the ID of the AWS default KMS key.\n\naws kms list-aliases --regionRun copy-db-snapshot command using the default KMS key ID for RDS instances returned earlier to create an encrypted copy of the database instance snapshot, The command output will return the encrypted instance snapshot configuration.\n\naws rds copy-db-snapshot --region--source-db-snapshot-identifier--target-db-snapshot-identifier--copy-tags --kms-key-idRun restore-db-instance-from-db-snapshot command to restore the encrypted snapshot created at the previous step to a new database instance, If successful, the command output should return the new encrypted database instance configuration.\n\naws rds restore-db-instance-from-db-snapshot --region--db-instance-identifier--db-snapshot-identifierRun describe-db-instances command to list all RDS database names, available in the selected AWS region, Output will return database instance identifier name Select encrypted database name that we just created DB-Name-Encrypted.\n\naws rds describe-db-instances --region--query 'DBInstances[*].DBInstanceIdentifier'\n\nRun again describe-db-instances command using the RDS instance identifier returned earlier, to determine if the selected database instance is encrypted, The command output should return the encryption status True.\n\naws rds describe-db-instances --region--db-instance-identifier--query 'DBInstances[*].StorageEncrypted'",
        "reference": "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeDBInstances",
        "xsl_stmt": ": Storage Encrypted =Storage Encrypted = No DB Instance Found",
        "regex": "Storage Encrypted =",
        "not_expect": "Storage Encrypted = false"
    },
    "custom_item_17": {
        "description": "2.3.2 Ensure Auto Minor Version Upgrade feature is Enabled for RDS Instances",
        "info": "Ensure that RDS database instances have the Auto Minor Version Upgrade flag enabled in order to receive automatically minor engine upgrades during the specified maintenance window. So, RDS instances can get the new features, bug fixes, and security patches for their database engines.\n\nRationale:\n\nAWS RDS will occasionally deprecate minor engine versions and provide new ones for an upgrade. When the last version number within the release is replaced, the version changed is considered minor. With Auto Minor Version Upgrade feature enabled, the version upgrades will occur automatically during the specified maintenance window so your RDS instances can get the new features, bug fixes, and security patches for their database engines.",
        "solution": "From Console:\n\nLog in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n\nIn the left navigation panel, click on Databases.\n\nSelect the RDS instance that wants to update.\n\nClick on the Modify button placed on the top right side.\n\nOn the Modify DB Instance:page, In the Maintenance section, select Auto minor version upgrade click on the Yes radio button.\n\nAt the bottom of the page click on Continue, check to Apply Immediately to apply the changes immediately, or select Apply during the next scheduled maintenance window to avoid any downtime.\n\nReview the changes and click on Modify DB Instance. The instance status should change from available to modifying and back to available. Once the feature is enabled, the Auto Minor Version Upgrade status should change to Yes.\n\nFrom Command Line:\n\nRun describe-db-instances command to list all RDS database instance names, available in the selected AWS region:\n\naws rds describe-db-instances --region--query 'DBInstances[*].DBInstanceIdentifier'\n\nThe command output should return each database instance identifier.\n\nRun the modify-db-instance command to modify the selected RDS instance configuration this command will apply the changes immediately, Remove --apply-immediately to apply changes during the next scheduled maintenance window and avoid any downtime:\n\naws rds modify-db-instance --region--db-instance-identifier--auto-minor-version-upgrade --apply-immediately\n\nThe command output should reveal the new configuration metadata for the RDS instance and check AutoMinorVersionUpgrade parameter value.\n\nRun describe-db-instances command to check if the Auto Minor Version Upgrade feature has been successfully enable:\n\naws rds describe-db-instances --region--db-instance-identifier--query 'DBInstances[*].AutoMinorVersionUpgrade'\n\nThe command output should return the feature current status set to true, the feature is enabled and the minor engine upgrades will be applied to the selected RDS instance.",
        "reference": "800-171|3.11.2,800-171|3.11.3,800-171|3.14.1,800-53|RA-5,800-53|SI-2,800-53|SI-2(2),800-53r5|RA-5,800-53r5|SI-2,800-53r5|SI-2(2),CN-L3|8.1.4.4(e),CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.5,CSCv8|7.4,CSF|DE.CM-8,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.IP-12,CSF|RS.CO-3,CSF|RS.MI-3,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.6.1,ITSG-33|RA-5,ITSG-33|SI-2,ITSG-33|SI-2(2),LEVEL|1A,NESA|M1.2.2,NESA|M5.4.1,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,PCI-DSSv3.2.1|6.1,PCI-DSSv3.2.1|6.2,PCI-DSSv4.0|6.3,PCI-DSSv4.0|6.3.1,PCI-DSSv4.0|6.3.3,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|2.2,SWIFT-CSCv1|2.7",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeDBInstances",
        "xsl_stmt": ": Auto Minor Version Upgrade =Auto Minor Version Upgrade = No DB Instance Found",
        "regex": "Auto Minor Version Upgrade =",
        "not_expect": "Auto Minor Version Upgrade = false"
    },
    "custom_item_18": {
        "description": "2.3.3 Ensure that public access is not given to RDS Instance",
        "info": "Ensure and verify that RDS database instances provisioned in your AWS account do restrict unauthorized access in order to minimize security risks. To restrict access to any publicly accessible RDS database instance, you must disable the database Publicly Accessible flag and update the VPC security group associated with the instance.\n\nRationale:\n\nEnsure that no public-facing RDS database instances are provisioned in your AWS account and restrict unauthorized access in order to minimize security risks. When the RDS instance allows unrestricted access (0.0.0.0/0), everyone and everything on the Internet can establish a connection to your database and this can increase the opportunity for malicious activities such as brute force attacks, PostgreSQL injections, or DoS/DDoS attacks.",
        "solution": "From Console:\n\nLog in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n\nUnder the navigation panel, On RDS Dashboard, click Databases.\n\nSelect the RDS instance that you want to update.\n\nClick Modify from the dashboard top menu.\n\nOn the Modify DB Instance panel, under the Connectivity section, click on Additional connectivity configuration and update the value for Publicly Accessible to Not publicly accessible to restrict public access. Follow the below steps to update subnet configurations:\n\nSelect the Connectivity and security tab, and click on the VPC attribute value inside the Networking section.\n\nSelect the Details tab from the VPC dashboard bottom panel and click on Route table configuration attribute value.\n\nOn the Route table details page, select the Routes tab from the dashboard bottom panel and click on Edit routes.\n\nOn the Edit routes page, update the Destination of Target which is set to igw-xxxxx and click on Save routes.\n\nOn the Modify DB Instance panel Click on Continue and In the Scheduling of modifications section, perform one of the following actions based on your requirements:\n\nSelect Apply during the next scheduled maintenance window to apply the changes automatically during the next scheduled maintenance window.\n\nSelect Apply immediately to apply the changes right away. With this option, any pending modifications will be asynchronously applied as soon as possible, regardless of the maintenance window setting for this RDS database instance. Note that any changes available in the pending modifications queue are also applied. If any of the pending modifications require downtime, choosing this option can cause unexpected downtime for the application.\n\nRepeat steps 3 to 6 for each RDS instance available in the current region.\n\nChange the AWS region from the navigation bar to repeat the process for other regions.\n\nFrom Command Line:\n\nRun describe-db-instances command to list all RDS database names identifiers, available in the selected AWS region:\n\naws rds describe-db-instances --region--query 'DBInstances[*].DBInstanceIdentifier'\n\nThe command output should return each database instance identifier.\n\nRun modify-db-instance command to modify the selected RDS instance configuration. Then use the following command to disable the Publicly Accessible flag for the selected RDS instances. This command use the apply-immediately flag. If you want to avoid any downtime --no-apply-immediately flag can be used:\n\naws rds modify-db-instance --region--db-instance-identifier--no-publicly-accessible --apply-immediately\n\nThe command output should reveal the PubliclyAccessible configuration under pending values and should get applied at the specified time.\n\nUpdating the Internet Gateway Destination via AWS CLI is not currently supported To update information about Internet Gateway use the AWS Console Procedure.\n\nRepeat steps 1 to 5 for each RDS instance provisioned in the current region.\n\nChange the AWS region by using the --region filter to repeat the process for other regions.",
        "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeDBInstances",
        "xsl_stmt": ": Publicly Accessible =Publicly Accessible = No DB Instance Found",
        "regex": "Publicly Accessible =",
        "not_expect": "Publicly Accessible = true"
    },
    "custom_item_19": {
        "description": "IsMultiRegionTrail",
        "aws_action": "DescribeTrails",
        "regex": "IsMultiRegionTrail = ",
        "expect": "IsMultiRegionTrail = true",
        "any_region": "YES"
    },
    "custom_item_20": {
        "description": "IsLogging",
        "aws_action": "GetTrailStatus",
        "regex": ".+",
        "not_expect": "IsLogging = false"
    },
    "custom_item_21": {
        "description": "IsMultiRegionTrail",
        "aws_action": "GetEventSelectors",
        "regex": "Equals = ",
        "not_expect": "Equals = (true|false) Field = readOnly"
    },
    "custom_item_22": {
        "description": "3.4 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
        "info": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.\n\nRationale:\n\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within any target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.",
        "solution": "Perform the following to enable S3 bucket logging:\nFrom Console:\n\nSign in to the AWS Management Console and open the S3 console at https://console.aws.amazon.com/s3.\n\nUnder All Buckets click on the target S3 bucket\n\nClick on Properties in the top right of the console\n\nUnder Bucket:click on Logging\n\nConfigure bucket logging\n\nClick on the Enabled checkbox\n\nSelect Target Bucket from list\n\nEnter a Target Prefix\n\nClick Save.\n\nFrom Command Line:\n\nGet the name of the S3 bucket that CloudTrail is logging to:\n\naws cloudtrail describe-trails --region--query trailList[*].S3BucketName\n\nCopy and add target bucket name at, Prefix for logfile atand optionally add an email address in the following template and save it as:\n\n{\n'LoggingEnabled': {\n'TargetBucket': '',\n'TargetPrefix': '',\n'TargetGrants': [\n{\n'Grantee': {\n'Type': 'AmazonCustomerByEmail',\n'EmailAddress': ''\n},\n'Permission': 'FULL_CONTROL'\n}\n]\n}\n}\n\nRun the put-bucket-logging command with bucket name andas input: for more information refer to put-bucket-logging:\n\naws s3api put-bucket-logging --bucket--bucket-logging-status file://Default Value:\n\nLogging is disabled.",
        "reference": "800-171|3.1.7,800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AC-6(9),800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AC-6(9),800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CCE|CCE-78918-0,CN-L3|7.1.2.3(c),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.3(a),CN-L3|8.1.10.6(a),CSCv7|6.2,CSCv7|14.9,CSCv8|3.14,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.AC-4,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.3,ITSG-33|AC-6,ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|M1.2.2,NESA|M5.5.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.5.4,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.1,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,SWIFT-CSCv1|6.4,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "GetCloudTrailBucketLogging",
        "xsl_stmt": "Bucket:TargetBucket =logging is disabledNo buckets found",
        "regex": ".+",
        "not_expect": "logging is disabled"
    },
    "custom_item_23": {
        "description": "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
        "info": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17) or ALL (-1) protocols\n\nRationale:\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.",
        "solution": "From Console:\nPerform the following:\n\nLogin to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n\nIn the left pane, click Network ACLs\n\nFor each network ACL to remediate, perform the following:\n\nSelect the network ACL\n\nClick the Inbound Rules tab\n\nClick Edit inbound rules\n\nEither A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule\n\nClick Save",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.14.6,800-171|3.14.7,800-53|SC-7,800-53|SI-4,800-53r5|SC-7,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CN-L3|8.1.10.6(j),CSCv7|9.2,CSCv7|12.4,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-8,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeNetworkAcls",
        "xsl_stmt": "Allow Ingress ACLs:ACL ID:- Rule Number:-to-all ports/all protocols/tcp/udpNo Allow Ingress ACLs",
        "regex": ".+",
        "not_expect": "allow 0\\.0\\.0\\.0/0 to ((([0-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9]{2,}+))|all ports|(([0-9]|[1-2][0-9]{0,3}|3[0-2][0-9]{2,}|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9]{2,}|[1-9][0-9]{4,}+)))/(all protocols|tcp|udp)"
    },
    "custom_item_24": {
        "description": "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
        "info": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17) or ALL (-1) protocols\n\nRationale:\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\nImpact:\n\nWhen updating an existing environment, ensure that administrators have access to remote server administration ports through another mechanism before removing access by deleting the 0.0.0.0/0 inbound rule.",
        "solution": "Perform the following to implement the prescribed state:\n\nLogin to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n\nIn the left pane, click Security Groups\n\nFor each security group, perform the following:\n\nSelect the security group\n\nClick the Inbound Rules tab\n\nClick the Edit inbound rules button\n\nIdentify the rules to be edited or removed\n\nEither A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule\n\nClick Save rules",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.14.6,800-171|3.14.7,800-53|SC-7,800-53|SI-4,800-53r5|SC-7,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CN-L3|8.1.10.6(j),CSCv7|9.2,CSCv7|12.4,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-8,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeSecurityGroups",
        "xsl_stmt": "Security Group:- allowtoall ports-/all protocolsNo security groups found",
        "regex": ".+",
        "not_expect": "allow 0\\.0\\.0\\.0/0 to ((([0-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9]{2,}+))|all ports|(([0-9]|[1-2][0-9]{0,3}|3[0-2][0-9]{2,}|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9]{2,}|[1-9][0-9]{4,}+)))/(all protocols|tcp|udp)"
    },
    "custom_item_25": {
        "description": "5.3 Ensure no security groups allow ingress from ::/0 to remote server administration ports",
        "info": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.\n\nRationale:\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\nImpact:\n\nWhen updating an existing environment, ensure that administrators have access to remote server administration ports through another mechanism before removing access by deleting the ::/0 inbound rule.",
        "solution": "Perform the following to implement the prescribed state:\n\nLogin to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n\nIn the left pane, click Security Groups\n\nFor each security group, perform the following:\n\nSelect the security group\n\nClick the Inbound Rules tab\n\nClick the Edit inbound rules button\n\nIdentify the rules to be edited or removed\n\nEither A) update the Source field to a range other than ::/0, or, B) Click Delete to remove the offending inbound rule\n\nClick Save rules",
        "reference": "800-171|3.13.1,800-171|3.13.5,800-171|3.14.6,800-171|3.14.7,800-53|SC-7,800-53|SI-4,800-53r5|SC-7,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CN-L3|8.1.10.6(j),CSCv7|9.2,CSCv7|12.4,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-8,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,TBA-FIISB|43.1",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeSecurityGroups",
        "xsl_stmt": "Security Group:- allowtoall ports-/all protocolsNo security groups found",
        "regex": ".+",
        "not_expect": "allow ::/0 to ((([0-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9]{2,}+))|all ports|(([0-9]|[1-2][0-9]{0,3}|3[0-2][0-9]{2,}|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9]{2,}|[1-9][0-9]{4,}+))|-)/(all protocols|tcp|udp)"
    },
    "custom_item_26": {
        "description": "5.6 Ensure that EC2 Metadata Service only allows IMDSv2",
        "info": "When enabling the Metadata Service on AWS EC2 instances, users have the option of using either Instance Metadata Service Version 1 (IMDSv1; a request/response method) or Instance Metadata Service Version 2 (IMDSv2; a session-oriented method).\n\nRationale:\n\nInstance metadata is data about your instance that you can use to configure or manage the running instance. Instance metadata is divided into categories, for example, host name, events, and security groups.\n\nWhen enabling the Metadata Service on AWS EC2 instances, users have the option of using either Instance Metadata Service Version 1 (IMDSv1; a request/response method) or Instance Metadata Service Version 2 (IMDSv2; a session-oriented method). With IMDSv2, every request is now protected by session authentication. A session begins and ends a series of requests that software running on an EC2 instance uses to access the locally-stored EC2 instance metadata and credentials.\n\nAllowing Version 1 of the service may open EC2 instances to Server-Side Request Forgery (SSRF) attacks, so Amazon recommends utilizing Version 2 for better instance security.",
        "solution": "From Console:\n\nSign in to the AWS Management Console and navigate to the EC2 dashboard at https://console.aws.amazon.com/ec2/.\n\nIn the left navigation panel, under the INSTANCES section, choose Instances.\n\nSelect the EC2 instance that you want to examine.\n\nChoose Actions > Instance Settings > Modify instance metadata options.\n\nEnsure Instance metadata service is set to Enable and set IMDSv2 to Required.\n\nRepeat steps no. 1 - 5 to perform the remediation process for other EC2 Instances in the all applicable AWS region(s).\n\nFrom Command Line:\n\nRun the describe-instances command using appropriate filtering to list the IDs of all the existing EC2 instances currently available in the selected region:\n\n        aws ec2 describe-instances --region--output table --query 'Reservations[*].Instances[*].InstanceId'\n\nThe command output should return a table with the requested instance IDs.\n\nNow run the modify-instance-metadata-options command using an instance ID returned at the previous step to update the Instance Metadata Version:\n\n        aws ec2 modify-instance-metadata-options --instance-id--http-tokens required --regionRepeat steps no. 1 - 3 to perform the remediation process for other EC2 Instances in the same AWS region.\n\nChange the region by updating --region and repeat the entire process for other regions.",
        "reference": "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|1A,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3",
        "see_also": "https://workbench.cisecurity.org/benchmarks/14207",
        "aws_action": "DescribeInstances",
        "xsl_stmt": "Instance:--No instances found",
        "regex": ".+",
        "not_expect": "optional - applied"
    }
}